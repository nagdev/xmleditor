# .\proced.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:e92452c8d3e28a9e27abfc9994d2007779e7f4c9
# Generated 2014-07-13 21:22:00.734000 by PyXB version 1.2.3
# Namespace AbsentNamespace0

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:6151674f-0b0e-11e4-b5d8-7071bcf839fc')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.3'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import _rdf as _ImportedBinding__rdf
import _nsgroup as _ImportedBinding__nsgroup
import _xlink as _ImportedBinding__xlink

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.CreateAbsentNamespace()
Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_rdf = _ImportedBinding__rdf.Namespace
_Namespace_rdf.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_xlink = _ImportedBinding__xlink.Namespace
_Namespace_xlink.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, unicode):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: modelIdentCodeAttType
class modelIdentCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'modelIdentCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 84, 4)
    _Documentation = None
modelIdentCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
modelIdentCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{2,14}')
modelIdentCodeAttType._InitializeFacetMap(modelIdentCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'modelIdentCodeAttType', modelIdentCodeAttType)

# Atomic simple type: systemDiffCodeAttType
class systemDiffCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'systemDiffCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 90, 4)
    _Documentation = None
systemDiffCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
systemDiffCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{1,4}')
systemDiffCodeAttType._InitializeFacetMap(systemDiffCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'systemDiffCodeAttType', systemDiffCodeAttType)

# Atomic simple type: systemCodeAttType
class systemCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'systemCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 96, 4)
    _Documentation = None
systemCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
systemCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{2,3}')
systemCodeAttType._InitializeFacetMap(systemCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'systemCodeAttType', systemCodeAttType)

# Atomic simple type: subSystemCodeAttType
class subSystemCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'subSystemCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 102, 4)
    _Documentation = None
subSystemCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
subSystemCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{1}')
subSystemCodeAttType._InitializeFacetMap(subSystemCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'subSystemCodeAttType', subSystemCodeAttType)

# Atomic simple type: subSubSystemCodeAttType
class subSubSystemCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'subSubSystemCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 108, 4)
    _Documentation = None
subSubSystemCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
subSubSystemCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{1}')
subSubSystemCodeAttType._InitializeFacetMap(subSubSystemCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'subSubSystemCodeAttType', subSubSystemCodeAttType)

# Atomic simple type: assyCodeAttType
class assyCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'assyCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 114, 4)
    _Documentation = None
assyCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
assyCodeAttType._CF_pattern.addPattern(pattern=u'([A-Z0-9]{2}|[A-Z0-9]{4})')
assyCodeAttType._InitializeFacetMap(assyCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'assyCodeAttType', assyCodeAttType)

# Atomic simple type: disassyCodeAttType
class disassyCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'disassyCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 120, 4)
    _Documentation = None
disassyCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
disassyCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{2}')
disassyCodeAttType._InitializeFacetMap(disassyCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'disassyCodeAttType', disassyCodeAttType)

# Atomic simple type: disassyCodeVariantAttType
class disassyCodeVariantAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'disassyCodeVariantAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 126, 4)
    _Documentation = None
disassyCodeVariantAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
disassyCodeVariantAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{1,3}')
disassyCodeVariantAttType._InitializeFacetMap(disassyCodeVariantAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'disassyCodeVariantAttType', disassyCodeVariantAttType)

# Atomic simple type: infoCodeAttType
class infoCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'infoCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 132, 4)
    _Documentation = None
infoCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
infoCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{3}')
infoCodeAttType._InitializeFacetMap(infoCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'infoCodeAttType', infoCodeAttType)

# Atomic simple type: infoCodeVariantAttType
class infoCodeVariantAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'infoCodeVariantAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 138, 4)
    _Documentation = None
infoCodeVariantAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
infoCodeVariantAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{1}')
infoCodeVariantAttType._InitializeFacetMap(infoCodeVariantAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'infoCodeVariantAttType', infoCodeVariantAttType)

# Atomic simple type: itemLocationCodeAttType
class itemLocationCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'itemLocationCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 144, 4)
    _Documentation = None
itemLocationCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
itemLocationCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{1}')
itemLocationCodeAttType._InitializeFacetMap(itemLocationCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'itemLocationCodeAttType', itemLocationCodeAttType)

# Atomic simple type: learnCodeAttType
class learnCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'learnCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 150, 4)
    _Documentation = None
learnCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
learnCodeAttType._CF_pattern.addPattern(pattern=u'([T|H][A-Z0-9]{2})')
learnCodeAttType._InitializeFacetMap(learnCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'learnCodeAttType', learnCodeAttType)

# Atomic simple type: learnEventCodeAttType
class learnEventCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'learnEventCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 156, 4)
    _Documentation = None
learnEventCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
learnEventCodeAttType._CF_pattern.addPattern(pattern=u'([A|B|C|D|E])')
learnEventCodeAttType._InitializeFacetMap(learnEventCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'learnEventCodeAttType', learnEventCodeAttType)

# Atomic simple type: languageIsoCodeAttType
class languageIsoCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'languageIsoCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 167, 4)
    _Documentation = None
languageIsoCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
languageIsoCodeAttType._CF_pattern.addPattern(pattern=u'[a-z]{2,3}')
languageIsoCodeAttType._InitializeFacetMap(languageIsoCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'languageIsoCodeAttType', languageIsoCodeAttType)

# Atomic simple type: countryIsoCodeAttType
class countryIsoCodeAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'countryIsoCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 173, 4)
    _Documentation = None
countryIsoCodeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
countryIsoCodeAttType._CF_pattern.addPattern(pattern=u'[A-Z]{2}')
countryIsoCodeAttType._InitializeFacetMap(countryIsoCodeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'countryIsoCodeAttType', countryIsoCodeAttType)

# Atomic simple type: issueNumberAttType
class issueNumberAttType (pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'issueNumberAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 184, 4)
    _Documentation = None
issueNumberAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
issueNumberAttType._CF_pattern.addPattern(pattern=u'\\d{3}')
issueNumberAttType._InitializeFacetMap(issueNumberAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'issueNumberAttType', issueNumberAttType)

# Atomic simple type: inWorkAttType
class inWorkAttType (pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'inWorkAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 190, 4)
    _Documentation = None
inWorkAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
inWorkAttType._CF_pattern.addPattern(pattern=u'\\d{2}')
inWorkAttType._InitializeFacetMap(inWorkAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'inWorkAttType', inWorkAttType)

# Atomic simple type: yearAttType
class yearAttType (pyxb.binding.datatypes.gYear):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'yearAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 212, 4)
    _Documentation = None
yearAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
yearAttType._CF_pattern.addPattern(pattern=u'\\d{4}')
yearAttType._InitializeFacetMap(yearAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'yearAttType', yearAttType)

# Atomic simple type: monthAttType
class monthAttType (pyxb.binding.datatypes.positiveInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'monthAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 218, 4)
    _Documentation = None
monthAttType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=monthAttType, value=pyxb.binding.datatypes.positiveInteger(12L))
monthAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
monthAttType._CF_pattern.addPattern(pattern=u'\\d{2}')
monthAttType._InitializeFacetMap(monthAttType._CF_maxInclusive,
   monthAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'monthAttType', monthAttType)

# Atomic simple type: dayAttType
class dayAttType (pyxb.binding.datatypes.positiveInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dayAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 225, 4)
    _Documentation = None
dayAttType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=dayAttType, value=pyxb.binding.datatypes.positiveInteger(31L))
dayAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
dayAttType._CF_pattern.addPattern(pattern=u'\\d{2}')
dayAttType._InitializeFacetMap(dayAttType._CF_maxInclusive,
   dayAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'dayAttType', dayAttType)

# Atomic simple type: securityClassificationAttType
class securityClassificationAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'securityClassificationAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 283, 4)
    _Documentation = None
securityClassificationAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=securityClassificationAttType, enum_prefix=None)
securityClassificationAttType.n01 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'01', tag=u'n01')
securityClassificationAttType.n02 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'02', tag=u'n02')
securityClassificationAttType.n03 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'03', tag=u'n03')
securityClassificationAttType.n04 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'04', tag=u'n04')
securityClassificationAttType.n05 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'05', tag=u'n05')
securityClassificationAttType.n06 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'06', tag=u'n06')
securityClassificationAttType.n07 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'07', tag=u'n07')
securityClassificationAttType.n08 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'08', tag=u'n08')
securityClassificationAttType.n09 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'09', tag=u'n09')
securityClassificationAttType.n10 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'10', tag=u'n10')
securityClassificationAttType.n11 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'11', tag=u'n11')
securityClassificationAttType.n12 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'12', tag=u'n12')
securityClassificationAttType.n13 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'13', tag=u'n13')
securityClassificationAttType.n14 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'14', tag=u'n14')
securityClassificationAttType.n15 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'15', tag=u'n15')
securityClassificationAttType.n16 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'16', tag=u'n16')
securityClassificationAttType.n17 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'17', tag=u'n17')
securityClassificationAttType.n18 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'18', tag=u'n18')
securityClassificationAttType.n19 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'19', tag=u'n19')
securityClassificationAttType.n20 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'20', tag=u'n20')
securityClassificationAttType.n21 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'21', tag=u'n21')
securityClassificationAttType.n22 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'22', tag=u'n22')
securityClassificationAttType.n23 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'23', tag=u'n23')
securityClassificationAttType.n24 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'24', tag=u'n24')
securityClassificationAttType.n25 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'25', tag=u'n25')
securityClassificationAttType.n26 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'26', tag=u'n26')
securityClassificationAttType.n27 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'27', tag=u'n27')
securityClassificationAttType.n28 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'28', tag=u'n28')
securityClassificationAttType.n29 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'29', tag=u'n29')
securityClassificationAttType.n30 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'30', tag=u'n30')
securityClassificationAttType.n31 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'31', tag=u'n31')
securityClassificationAttType.n32 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'32', tag=u'n32')
securityClassificationAttType.n33 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'33', tag=u'n33')
securityClassificationAttType.n34 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'34', tag=u'n34')
securityClassificationAttType.n35 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'35', tag=u'n35')
securityClassificationAttType.n36 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'36', tag=u'n36')
securityClassificationAttType.n37 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'37', tag=u'n37')
securityClassificationAttType.n38 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'38', tag=u'n38')
securityClassificationAttType.n39 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'39', tag=u'n39')
securityClassificationAttType.n40 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'40', tag=u'n40')
securityClassificationAttType.n41 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'41', tag=u'n41')
securityClassificationAttType.n42 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'42', tag=u'n42')
securityClassificationAttType.n43 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'43', tag=u'n43')
securityClassificationAttType.n44 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'44', tag=u'n44')
securityClassificationAttType.n45 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'45', tag=u'n45')
securityClassificationAttType.n46 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'46', tag=u'n46')
securityClassificationAttType.n47 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'47', tag=u'n47')
securityClassificationAttType.n48 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'48', tag=u'n48')
securityClassificationAttType.n49 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'49', tag=u'n49')
securityClassificationAttType.n50 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'50', tag=u'n50')
securityClassificationAttType.n51 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'51', tag=u'n51')
securityClassificationAttType.n52 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'52', tag=u'n52')
securityClassificationAttType.n53 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'53', tag=u'n53')
securityClassificationAttType.n54 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'54', tag=u'n54')
securityClassificationAttType.n55 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'55', tag=u'n55')
securityClassificationAttType.n56 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'56', tag=u'n56')
securityClassificationAttType.n57 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'57', tag=u'n57')
securityClassificationAttType.n58 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'58', tag=u'n58')
securityClassificationAttType.n59 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'59', tag=u'n59')
securityClassificationAttType.n60 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'60', tag=u'n60')
securityClassificationAttType.n61 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'61', tag=u'n61')
securityClassificationAttType.n62 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'62', tag=u'n62')
securityClassificationAttType.n63 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'63', tag=u'n63')
securityClassificationAttType.n64 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'64', tag=u'n64')
securityClassificationAttType.n65 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'65', tag=u'n65')
securityClassificationAttType.n66 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'66', tag=u'n66')
securityClassificationAttType.n67 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'67', tag=u'n67')
securityClassificationAttType.n68 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'68', tag=u'n68')
securityClassificationAttType.n69 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'69', tag=u'n69')
securityClassificationAttType.n70 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'70', tag=u'n70')
securityClassificationAttType.n71 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'71', tag=u'n71')
securityClassificationAttType.n72 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'72', tag=u'n72')
securityClassificationAttType.n73 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'73', tag=u'n73')
securityClassificationAttType.n74 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'74', tag=u'n74')
securityClassificationAttType.n75 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'75', tag=u'n75')
securityClassificationAttType.n76 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'76', tag=u'n76')
securityClassificationAttType.n77 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'77', tag=u'n77')
securityClassificationAttType.n78 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'78', tag=u'n78')
securityClassificationAttType.n79 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'79', tag=u'n79')
securityClassificationAttType.n80 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'80', tag=u'n80')
securityClassificationAttType.n81 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'81', tag=u'n81')
securityClassificationAttType.n82 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'82', tag=u'n82')
securityClassificationAttType.n83 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'83', tag=u'n83')
securityClassificationAttType.n84 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'84', tag=u'n84')
securityClassificationAttType.n85 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'85', tag=u'n85')
securityClassificationAttType.n86 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'86', tag=u'n86')
securityClassificationAttType.n87 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'87', tag=u'n87')
securityClassificationAttType.n88 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'88', tag=u'n88')
securityClassificationAttType.n89 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'89', tag=u'n89')
securityClassificationAttType.n90 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'90', tag=u'n90')
securityClassificationAttType.n91 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'91', tag=u'n91')
securityClassificationAttType.n92 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'92', tag=u'n92')
securityClassificationAttType.n93 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'93', tag=u'n93')
securityClassificationAttType.n94 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'94', tag=u'n94')
securityClassificationAttType.n95 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'95', tag=u'n95')
securityClassificationAttType.n96 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'96', tag=u'n96')
securityClassificationAttType.n97 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'97', tag=u'n97')
securityClassificationAttType.n98 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'98', tag=u'n98')
securityClassificationAttType.n99 = securityClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'99', tag=u'n99')
securityClassificationAttType._InitializeFacetMap(securityClassificationAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'securityClassificationAttType', securityClassificationAttType)

# Atomic simple type: commercialClassificationAttType
class commercialClassificationAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'commercialClassificationAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 391, 4)
    _Documentation = None
commercialClassificationAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=commercialClassificationAttType, enum_prefix=None)
commercialClassificationAttType.cc01 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc01', tag=u'cc01')
commercialClassificationAttType.cc02 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc02', tag=u'cc02')
commercialClassificationAttType.cc03 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc03', tag=u'cc03')
commercialClassificationAttType.cc04 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc04', tag=u'cc04')
commercialClassificationAttType.cc05 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc05', tag=u'cc05')
commercialClassificationAttType.cc06 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc06', tag=u'cc06')
commercialClassificationAttType.cc07 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc07', tag=u'cc07')
commercialClassificationAttType.cc08 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc08', tag=u'cc08')
commercialClassificationAttType.cc09 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc09', tag=u'cc09')
commercialClassificationAttType.cc10 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc10', tag=u'cc10')
commercialClassificationAttType.cc11 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc11', tag=u'cc11')
commercialClassificationAttType.cc12 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc12', tag=u'cc12')
commercialClassificationAttType.cc13 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc13', tag=u'cc13')
commercialClassificationAttType.cc14 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc14', tag=u'cc14')
commercialClassificationAttType.cc15 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc15', tag=u'cc15')
commercialClassificationAttType.cc16 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc16', tag=u'cc16')
commercialClassificationAttType.cc17 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc17', tag=u'cc17')
commercialClassificationAttType.cc18 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc18', tag=u'cc18')
commercialClassificationAttType.cc19 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc19', tag=u'cc19')
commercialClassificationAttType.cc20 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc20', tag=u'cc20')
commercialClassificationAttType.cc21 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc21', tag=u'cc21')
commercialClassificationAttType.cc22 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc22', tag=u'cc22')
commercialClassificationAttType.cc23 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc23', tag=u'cc23')
commercialClassificationAttType.cc24 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc24', tag=u'cc24')
commercialClassificationAttType.cc25 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc25', tag=u'cc25')
commercialClassificationAttType.cc26 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc26', tag=u'cc26')
commercialClassificationAttType.cc27 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc27', tag=u'cc27')
commercialClassificationAttType.cc28 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc28', tag=u'cc28')
commercialClassificationAttType.cc29 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc29', tag=u'cc29')
commercialClassificationAttType.cc30 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc30', tag=u'cc30')
commercialClassificationAttType.cc31 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc31', tag=u'cc31')
commercialClassificationAttType.cc32 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc32', tag=u'cc32')
commercialClassificationAttType.cc33 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc33', tag=u'cc33')
commercialClassificationAttType.cc34 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc34', tag=u'cc34')
commercialClassificationAttType.cc35 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc35', tag=u'cc35')
commercialClassificationAttType.cc36 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc36', tag=u'cc36')
commercialClassificationAttType.cc37 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc37', tag=u'cc37')
commercialClassificationAttType.cc38 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc38', tag=u'cc38')
commercialClassificationAttType.cc39 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc39', tag=u'cc39')
commercialClassificationAttType.cc40 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc40', tag=u'cc40')
commercialClassificationAttType.cc41 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc41', tag=u'cc41')
commercialClassificationAttType.cc42 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc42', tag=u'cc42')
commercialClassificationAttType.cc43 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc43', tag=u'cc43')
commercialClassificationAttType.cc44 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc44', tag=u'cc44')
commercialClassificationAttType.cc45 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc45', tag=u'cc45')
commercialClassificationAttType.cc46 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc46', tag=u'cc46')
commercialClassificationAttType.cc47 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc47', tag=u'cc47')
commercialClassificationAttType.cc48 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc48', tag=u'cc48')
commercialClassificationAttType.cc49 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc49', tag=u'cc49')
commercialClassificationAttType.cc50 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc50', tag=u'cc50')
commercialClassificationAttType.cc51 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc51', tag=u'cc51')
commercialClassificationAttType.cc52 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc52', tag=u'cc52')
commercialClassificationAttType.cc53 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc53', tag=u'cc53')
commercialClassificationAttType.cc54 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc54', tag=u'cc54')
commercialClassificationAttType.cc55 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc55', tag=u'cc55')
commercialClassificationAttType.cc56 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc56', tag=u'cc56')
commercialClassificationAttType.cc57 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc57', tag=u'cc57')
commercialClassificationAttType.cc58 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc58', tag=u'cc58')
commercialClassificationAttType.cc59 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc59', tag=u'cc59')
commercialClassificationAttType.cc60 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc60', tag=u'cc60')
commercialClassificationAttType.cc61 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc61', tag=u'cc61')
commercialClassificationAttType.cc62 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc62', tag=u'cc62')
commercialClassificationAttType.cc63 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc63', tag=u'cc63')
commercialClassificationAttType.cc64 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc64', tag=u'cc64')
commercialClassificationAttType.cc65 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc65', tag=u'cc65')
commercialClassificationAttType.cc66 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc66', tag=u'cc66')
commercialClassificationAttType.cc67 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc67', tag=u'cc67')
commercialClassificationAttType.cc68 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc68', tag=u'cc68')
commercialClassificationAttType.cc69 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc69', tag=u'cc69')
commercialClassificationAttType.cc70 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc70', tag=u'cc70')
commercialClassificationAttType.cc71 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc71', tag=u'cc71')
commercialClassificationAttType.cc72 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc72', tag=u'cc72')
commercialClassificationAttType.cc73 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc73', tag=u'cc73')
commercialClassificationAttType.cc74 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc74', tag=u'cc74')
commercialClassificationAttType.cc75 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc75', tag=u'cc75')
commercialClassificationAttType.cc76 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc76', tag=u'cc76')
commercialClassificationAttType.cc77 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc77', tag=u'cc77')
commercialClassificationAttType.cc78 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc78', tag=u'cc78')
commercialClassificationAttType.cc79 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc79', tag=u'cc79')
commercialClassificationAttType.cc80 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc80', tag=u'cc80')
commercialClassificationAttType.cc81 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc81', tag=u'cc81')
commercialClassificationAttType.cc82 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc82', tag=u'cc82')
commercialClassificationAttType.cc83 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc83', tag=u'cc83')
commercialClassificationAttType.cc84 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc84', tag=u'cc84')
commercialClassificationAttType.cc85 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc85', tag=u'cc85')
commercialClassificationAttType.cc86 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc86', tag=u'cc86')
commercialClassificationAttType.cc87 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc87', tag=u'cc87')
commercialClassificationAttType.cc88 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc88', tag=u'cc88')
commercialClassificationAttType.cc89 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc89', tag=u'cc89')
commercialClassificationAttType.cc90 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc90', tag=u'cc90')
commercialClassificationAttType.cc91 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc91', tag=u'cc91')
commercialClassificationAttType.cc92 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc92', tag=u'cc92')
commercialClassificationAttType.cc93 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc93', tag=u'cc93')
commercialClassificationAttType.cc94 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc94', tag=u'cc94')
commercialClassificationAttType.cc95 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc95', tag=u'cc95')
commercialClassificationAttType.cc96 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc96', tag=u'cc96')
commercialClassificationAttType.cc97 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc97', tag=u'cc97')
commercialClassificationAttType.cc98 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc98', tag=u'cc98')
commercialClassificationAttType.cc99 = commercialClassificationAttType._CF_enumeration.addEnumeration(unicode_value=u'cc99', tag=u'cc99')
commercialClassificationAttType._InitializeFacetMap(commercialClassificationAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'commercialClassificationAttType', commercialClassificationAttType)

# Atomic simple type: caveatAttType
class caveatAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'caveatAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 495, 4)
    _Documentation = None
caveatAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=caveatAttType, enum_prefix=None)
caveatAttType.cv01 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv01', tag=u'cv01')
caveatAttType.cv02 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv02', tag=u'cv02')
caveatAttType.cv03 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv03', tag=u'cv03')
caveatAttType.cv04 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv04', tag=u'cv04')
caveatAttType.cv05 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv05', tag=u'cv05')
caveatAttType.cv06 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv06', tag=u'cv06')
caveatAttType.cv07 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv07', tag=u'cv07')
caveatAttType.cv08 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv08', tag=u'cv08')
caveatAttType.cv09 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv09', tag=u'cv09')
caveatAttType.cv10 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv10', tag=u'cv10')
caveatAttType.cv11 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv11', tag=u'cv11')
caveatAttType.cv12 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv12', tag=u'cv12')
caveatAttType.cv13 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv13', tag=u'cv13')
caveatAttType.cv14 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv14', tag=u'cv14')
caveatAttType.cv15 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv15', tag=u'cv15')
caveatAttType.cv16 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv16', tag=u'cv16')
caveatAttType.cv17 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv17', tag=u'cv17')
caveatAttType.cv18 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv18', tag=u'cv18')
caveatAttType.cv19 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv19', tag=u'cv19')
caveatAttType.cv20 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv20', tag=u'cv20')
caveatAttType.cv21 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv21', tag=u'cv21')
caveatAttType.cv22 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv22', tag=u'cv22')
caveatAttType.cv23 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv23', tag=u'cv23')
caveatAttType.cv24 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv24', tag=u'cv24')
caveatAttType.cv25 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv25', tag=u'cv25')
caveatAttType.cv26 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv26', tag=u'cv26')
caveatAttType.cv27 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv27', tag=u'cv27')
caveatAttType.cv28 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv28', tag=u'cv28')
caveatAttType.cv29 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv29', tag=u'cv29')
caveatAttType.cv30 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv30', tag=u'cv30')
caveatAttType.cv31 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv31', tag=u'cv31')
caveatAttType.cv32 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv32', tag=u'cv32')
caveatAttType.cv33 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv33', tag=u'cv33')
caveatAttType.cv34 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv34', tag=u'cv34')
caveatAttType.cv35 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv35', tag=u'cv35')
caveatAttType.cv36 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv36', tag=u'cv36')
caveatAttType.cv37 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv37', tag=u'cv37')
caveatAttType.cv38 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv38', tag=u'cv38')
caveatAttType.cv39 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv39', tag=u'cv39')
caveatAttType.cv40 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv40', tag=u'cv40')
caveatAttType.cv41 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv41', tag=u'cv41')
caveatAttType.cv42 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv42', tag=u'cv42')
caveatAttType.cv43 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv43', tag=u'cv43')
caveatAttType.cv44 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv44', tag=u'cv44')
caveatAttType.cv45 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv45', tag=u'cv45')
caveatAttType.cv46 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv46', tag=u'cv46')
caveatAttType.cv47 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv47', tag=u'cv47')
caveatAttType.cv48 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv48', tag=u'cv48')
caveatAttType.cv49 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv49', tag=u'cv49')
caveatAttType.cv50 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv50', tag=u'cv50')
caveatAttType.cv51 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv51', tag=u'cv51')
caveatAttType.cv52 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv52', tag=u'cv52')
caveatAttType.cv53 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv53', tag=u'cv53')
caveatAttType.cv54 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv54', tag=u'cv54')
caveatAttType.cv55 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv55', tag=u'cv55')
caveatAttType.cv56 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv56', tag=u'cv56')
caveatAttType.cv57 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv57', tag=u'cv57')
caveatAttType.cv58 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv58', tag=u'cv58')
caveatAttType.cv59 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv59', tag=u'cv59')
caveatAttType.cv60 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv60', tag=u'cv60')
caveatAttType.cv61 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv61', tag=u'cv61')
caveatAttType.cv62 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv62', tag=u'cv62')
caveatAttType.cv63 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv63', tag=u'cv63')
caveatAttType.cv64 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv64', tag=u'cv64')
caveatAttType.cv65 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv65', tag=u'cv65')
caveatAttType.cv66 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv66', tag=u'cv66')
caveatAttType.cv67 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv67', tag=u'cv67')
caveatAttType.cv68 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv68', tag=u'cv68')
caveatAttType.cv69 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv69', tag=u'cv69')
caveatAttType.cv70 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv70', tag=u'cv70')
caveatAttType.cv71 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv71', tag=u'cv71')
caveatAttType.cv72 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv72', tag=u'cv72')
caveatAttType.cv73 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv73', tag=u'cv73')
caveatAttType.cv74 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv74', tag=u'cv74')
caveatAttType.cv75 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv75', tag=u'cv75')
caveatAttType.cv76 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv76', tag=u'cv76')
caveatAttType.cv77 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv77', tag=u'cv77')
caveatAttType.cv78 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv78', tag=u'cv78')
caveatAttType.cv79 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv79', tag=u'cv79')
caveatAttType.cv80 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv80', tag=u'cv80')
caveatAttType.cv81 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv81', tag=u'cv81')
caveatAttType.cv82 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv82', tag=u'cv82')
caveatAttType.cv83 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv83', tag=u'cv83')
caveatAttType.cv84 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv84', tag=u'cv84')
caveatAttType.cv85 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv85', tag=u'cv85')
caveatAttType.cv86 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv86', tag=u'cv86')
caveatAttType.cv87 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv87', tag=u'cv87')
caveatAttType.cv88 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv88', tag=u'cv88')
caveatAttType.cv89 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv89', tag=u'cv89')
caveatAttType.cv90 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv90', tag=u'cv90')
caveatAttType.cv91 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv91', tag=u'cv91')
caveatAttType.cv92 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv92', tag=u'cv92')
caveatAttType.cv93 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv93', tag=u'cv93')
caveatAttType.cv94 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv94', tag=u'cv94')
caveatAttType.cv95 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv95', tag=u'cv95')
caveatAttType.cv96 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv96', tag=u'cv96')
caveatAttType.cv97 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv97', tag=u'cv97')
caveatAttType.cv98 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv98', tag=u'cv98')
caveatAttType.cv99 = caveatAttType._CF_enumeration.addEnumeration(unicode_value=u'cv99', tag=u'cv99')
caveatAttType._InitializeFacetMap(caveatAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'caveatAttType', caveatAttType)

# Atomic simple type: changeTypeAttType
class changeTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'changeTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 637, 4)
    _Documentation = None
changeTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=changeTypeAttType, enum_prefix=None)
changeTypeAttType.add = changeTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'add', tag=u'add')
changeTypeAttType.delete = changeTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'delete', tag=u'delete')
changeTypeAttType.modify = changeTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'modify', tag=u'modify')
changeTypeAttType._InitializeFacetMap(changeTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'changeTypeAttType', changeTypeAttType)

# Atomic simple type: yesOrNoAttType
class yesOrNoAttType (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'yesOrNoAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 645, 4)
    _Documentation = None
yesOrNoAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
yesOrNoAttType._CF_pattern.addPattern(pattern=u'[01]')
yesOrNoAttType._InitializeFacetMap(yesOrNoAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'yesOrNoAttType', yesOrNoAttType)

# Atomic simple type: linkShowAttType
class linkShowAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'linkShowAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 734, 4)
    _Documentation = None
linkShowAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=linkShowAttType, enum_prefix=None)
linkShowAttType.newPane = linkShowAttType._CF_enumeration.addEnumeration(unicode_value=u'newPane', tag=u'newPane')
linkShowAttType.embedInContext = linkShowAttType._CF_enumeration.addEnumeration(unicode_value=u'embedInContext', tag=u'embedInContext')
linkShowAttType.replaceAndReturnToSource = linkShowAttType._CF_enumeration.addEnumeration(unicode_value=u'replaceAndReturnToSource', tag=u'replaceAndReturnToSource')
linkShowAttType.replaceAndNoReturn = linkShowAttType._CF_enumeration.addEnumeration(unicode_value=u'replaceAndNoReturn', tag=u'replaceAndNoReturn')
linkShowAttType._InitializeFacetMap(linkShowAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'linkShowAttType', linkShowAttType)

# Atomic simple type: linkActuateAttType
class linkActuateAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'linkActuateAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 743, 4)
    _Documentation = None
linkActuateAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=linkActuateAttType, enum_prefix=None)
linkActuateAttType.onLoad = linkActuateAttType._CF_enumeration.addEnumeration(unicode_value=u'onLoad', tag=u'onLoad')
linkActuateAttType.onRequest = linkActuateAttType._CF_enumeration.addEnumeration(unicode_value=u'onRequest', tag=u'onRequest')
linkActuateAttType._InitializeFacetMap(linkActuateAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'linkActuateAttType', linkActuateAttType)

# Atomic simple type: exportRoleAttType
class exportRoleAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'exportRoleAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 752, 4)
    _Documentation = None
exportRoleAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=exportRoleAttType, enum_prefix=None)
exportRoleAttType.partial = exportRoleAttType._CF_enumeration.addEnumeration(unicode_value=u'partial', tag=u'partial')
exportRoleAttType.full = exportRoleAttType._CF_enumeration.addEnumeration(unicode_value=u'full', tag=u'full')
exportRoleAttType._InitializeFacetMap(exportRoleAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'exportRoleAttType', exportRoleAttType)

# Atomic simple type: pmIssuerAttType
class pmIssuerAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pmIssuerAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 912, 4)
    _Documentation = None
pmIssuerAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
pmIssuerAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{5}')
pmIssuerAttType._InitializeFacetMap(pmIssuerAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'pmIssuerAttType', pmIssuerAttType)

# Atomic simple type: pmNumberAttType
class pmNumberAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pmNumberAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 918, 4)
    _Documentation = None
pmNumberAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
pmNumberAttType._CF_pattern.addPattern(pattern=u'[A-Z0-9]{5}')
pmNumberAttType._InitializeFacetMap(pmNumberAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'pmNumberAttType', pmNumberAttType)

# Atomic simple type: pmVolumeAttType
class pmVolumeAttType (pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pmVolumeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 924, 4)
    _Documentation = None
pmVolumeAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
pmVolumeAttType._CF_pattern.addPattern(pattern=u'\\d{2}')
pmVolumeAttType._InitializeFacetMap(pmVolumeAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'pmVolumeAttType', pmVolumeAttType)

# Atomic simple type: acronymTypeAttType
class acronymTypeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'acronymTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1036, 4)
    _Documentation = None
acronymTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=acronymTypeAttType, enum_prefix=None)
acronymTypeAttType.at01 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at01', tag=u'at01')
acronymTypeAttType.at02 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at02', tag=u'at02')
acronymTypeAttType.at03 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at03', tag=u'at03')
acronymTypeAttType.at04 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at04', tag=u'at04')
acronymTypeAttType.at05 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at05', tag=u'at05')
acronymTypeAttType.at06 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at06', tag=u'at06')
acronymTypeAttType.at07 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at07', tag=u'at07')
acronymTypeAttType.at08 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at08', tag=u'at08')
acronymTypeAttType.at09 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at09', tag=u'at09')
acronymTypeAttType.at10 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at10', tag=u'at10')
acronymTypeAttType.at11 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at11', tag=u'at11')
acronymTypeAttType.at12 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at12', tag=u'at12')
acronymTypeAttType.at13 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at13', tag=u'at13')
acronymTypeAttType.at14 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at14', tag=u'at14')
acronymTypeAttType.at15 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at15', tag=u'at15')
acronymTypeAttType.at16 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at16', tag=u'at16')
acronymTypeAttType.at17 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at17', tag=u'at17')
acronymTypeAttType.at18 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at18', tag=u'at18')
acronymTypeAttType.at19 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at19', tag=u'at19')
acronymTypeAttType.at20 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at20', tag=u'at20')
acronymTypeAttType.at21 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at21', tag=u'at21')
acronymTypeAttType.at22 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at22', tag=u'at22')
acronymTypeAttType.at23 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at23', tag=u'at23')
acronymTypeAttType.at24 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at24', tag=u'at24')
acronymTypeAttType.at25 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at25', tag=u'at25')
acronymTypeAttType.at26 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at26', tag=u'at26')
acronymTypeAttType.at27 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at27', tag=u'at27')
acronymTypeAttType.at28 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at28', tag=u'at28')
acronymTypeAttType.at29 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at29', tag=u'at29')
acronymTypeAttType.at30 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at30', tag=u'at30')
acronymTypeAttType.at31 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at31', tag=u'at31')
acronymTypeAttType.at32 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at32', tag=u'at32')
acronymTypeAttType.at33 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at33', tag=u'at33')
acronymTypeAttType.at34 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at34', tag=u'at34')
acronymTypeAttType.at35 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at35', tag=u'at35')
acronymTypeAttType.at36 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at36', tag=u'at36')
acronymTypeAttType.at37 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at37', tag=u'at37')
acronymTypeAttType.at38 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at38', tag=u'at38')
acronymTypeAttType.at39 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at39', tag=u'at39')
acronymTypeAttType.at40 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at40', tag=u'at40')
acronymTypeAttType.at41 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at41', tag=u'at41')
acronymTypeAttType.at42 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at42', tag=u'at42')
acronymTypeAttType.at43 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at43', tag=u'at43')
acronymTypeAttType.at44 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at44', tag=u'at44')
acronymTypeAttType.at45 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at45', tag=u'at45')
acronymTypeAttType.at46 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at46', tag=u'at46')
acronymTypeAttType.at47 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at47', tag=u'at47')
acronymTypeAttType.at48 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at48', tag=u'at48')
acronymTypeAttType.at49 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at49', tag=u'at49')
acronymTypeAttType.at50 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at50', tag=u'at50')
acronymTypeAttType.at51 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at51', tag=u'at51')
acronymTypeAttType.at52 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at52', tag=u'at52')
acronymTypeAttType.at53 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at53', tag=u'at53')
acronymTypeAttType.at54 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at54', tag=u'at54')
acronymTypeAttType.at55 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at55', tag=u'at55')
acronymTypeAttType.at56 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at56', tag=u'at56')
acronymTypeAttType.at57 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at57', tag=u'at57')
acronymTypeAttType.at58 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at58', tag=u'at58')
acronymTypeAttType.at59 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at59', tag=u'at59')
acronymTypeAttType.at60 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at60', tag=u'at60')
acronymTypeAttType.at61 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at61', tag=u'at61')
acronymTypeAttType.at62 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at62', tag=u'at62')
acronymTypeAttType.at63 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at63', tag=u'at63')
acronymTypeAttType.at64 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at64', tag=u'at64')
acronymTypeAttType.at65 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at65', tag=u'at65')
acronymTypeAttType.at66 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at66', tag=u'at66')
acronymTypeAttType.at67 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at67', tag=u'at67')
acronymTypeAttType.at68 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at68', tag=u'at68')
acronymTypeAttType.at69 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at69', tag=u'at69')
acronymTypeAttType.at70 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at70', tag=u'at70')
acronymTypeAttType.at71 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at71', tag=u'at71')
acronymTypeAttType.at72 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at72', tag=u'at72')
acronymTypeAttType.at73 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at73', tag=u'at73')
acronymTypeAttType.at74 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at74', tag=u'at74')
acronymTypeAttType.at75 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at75', tag=u'at75')
acronymTypeAttType.at76 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at76', tag=u'at76')
acronymTypeAttType.at77 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at77', tag=u'at77')
acronymTypeAttType.at78 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at78', tag=u'at78')
acronymTypeAttType.at79 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at79', tag=u'at79')
acronymTypeAttType.at80 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at80', tag=u'at80')
acronymTypeAttType.at81 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at81', tag=u'at81')
acronymTypeAttType.at82 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at82', tag=u'at82')
acronymTypeAttType.at83 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at83', tag=u'at83')
acronymTypeAttType.at84 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at84', tag=u'at84')
acronymTypeAttType.at85 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at85', tag=u'at85')
acronymTypeAttType.at86 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at86', tag=u'at86')
acronymTypeAttType.at87 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at87', tag=u'at87')
acronymTypeAttType.at88 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at88', tag=u'at88')
acronymTypeAttType.at89 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at89', tag=u'at89')
acronymTypeAttType.at90 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at90', tag=u'at90')
acronymTypeAttType.at91 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at91', tag=u'at91')
acronymTypeAttType.at92 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at92', tag=u'at92')
acronymTypeAttType.at93 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at93', tag=u'at93')
acronymTypeAttType.at94 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at94', tag=u'at94')
acronymTypeAttType.at95 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at95', tag=u'at95')
acronymTypeAttType.at96 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at96', tag=u'at96')
acronymTypeAttType.at97 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at97', tag=u'at97')
acronymTypeAttType.at98 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at98', tag=u'at98')
acronymTypeAttType.at99 = acronymTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'at99', tag=u'at99')
acronymTypeAttType._InitializeFacetMap(acronymTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'acronymTypeAttType', acronymTypeAttType)

# Atomic simple type: verbatimStyleAttType
class verbatimStyleAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'verbatimStyleAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1147, 4)
    _Documentation = None
verbatimStyleAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=verbatimStyleAttType, enum_prefix=None)
verbatimStyleAttType.vs01 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs01', tag=u'vs01')
verbatimStyleAttType.vs02 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs02', tag=u'vs02')
verbatimStyleAttType.vs03 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs03', tag=u'vs03')
verbatimStyleAttType.vs04 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs04', tag=u'vs04')
verbatimStyleAttType.vs05 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs05', tag=u'vs05')
verbatimStyleAttType.vs06 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs06', tag=u'vs06')
verbatimStyleAttType.vs07 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs07', tag=u'vs07')
verbatimStyleAttType.vs08 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs08', tag=u'vs08')
verbatimStyleAttType.vs09 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs09', tag=u'vs09')
verbatimStyleAttType.vs10 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs10', tag=u'vs10')
verbatimStyleAttType.vs11 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs11', tag=u'vs11')
verbatimStyleAttType.vs12 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs12', tag=u'vs12')
verbatimStyleAttType.vs13 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs13', tag=u'vs13')
verbatimStyleAttType.vs14 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs14', tag=u'vs14')
verbatimStyleAttType.vs15 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs15', tag=u'vs15')
verbatimStyleAttType.vs16 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs16', tag=u'vs16')
verbatimStyleAttType.vs17 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs17', tag=u'vs17')
verbatimStyleAttType.vs18 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs18', tag=u'vs18')
verbatimStyleAttType.vs19 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs19', tag=u'vs19')
verbatimStyleAttType.vs20 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs20', tag=u'vs20')
verbatimStyleAttType.vs21 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs21', tag=u'vs21')
verbatimStyleAttType.vs22 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs22', tag=u'vs22')
verbatimStyleAttType.vs23 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs23', tag=u'vs23')
verbatimStyleAttType.vs24 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs24', tag=u'vs24')
verbatimStyleAttType.vs25 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs25', tag=u'vs25')
verbatimStyleAttType.vs26 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs26', tag=u'vs26')
verbatimStyleAttType.vs27 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs27', tag=u'vs27')
verbatimStyleAttType.vs28 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs28', tag=u'vs28')
verbatimStyleAttType.vs29 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs29', tag=u'vs29')
verbatimStyleAttType.vs30 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs30', tag=u'vs30')
verbatimStyleAttType.vs31 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs31', tag=u'vs31')
verbatimStyleAttType.vs32 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs32', tag=u'vs32')
verbatimStyleAttType.vs33 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs33', tag=u'vs33')
verbatimStyleAttType.vs34 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs34', tag=u'vs34')
verbatimStyleAttType.vs35 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs35', tag=u'vs35')
verbatimStyleAttType.vs36 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs36', tag=u'vs36')
verbatimStyleAttType.vs37 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs37', tag=u'vs37')
verbatimStyleAttType.vs38 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs38', tag=u'vs38')
verbatimStyleAttType.vs39 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs39', tag=u'vs39')
verbatimStyleAttType.vs40 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs40', tag=u'vs40')
verbatimStyleAttType.vs41 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs41', tag=u'vs41')
verbatimStyleAttType.vs42 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs42', tag=u'vs42')
verbatimStyleAttType.vs43 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs43', tag=u'vs43')
verbatimStyleAttType.vs44 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs44', tag=u'vs44')
verbatimStyleAttType.vs45 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs45', tag=u'vs45')
verbatimStyleAttType.vs46 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs46', tag=u'vs46')
verbatimStyleAttType.vs47 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs47', tag=u'vs47')
verbatimStyleAttType.vs48 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs48', tag=u'vs48')
verbatimStyleAttType.vs49 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs49', tag=u'vs49')
verbatimStyleAttType.vs50 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs50', tag=u'vs50')
verbatimStyleAttType.vs51 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs51', tag=u'vs51')
verbatimStyleAttType.vs52 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs52', tag=u'vs52')
verbatimStyleAttType.vs53 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs53', tag=u'vs53')
verbatimStyleAttType.vs54 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs54', tag=u'vs54')
verbatimStyleAttType.vs55 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs55', tag=u'vs55')
verbatimStyleAttType.vs56 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs56', tag=u'vs56')
verbatimStyleAttType.vs57 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs57', tag=u'vs57')
verbatimStyleAttType.vs58 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs58', tag=u'vs58')
verbatimStyleAttType.vs59 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs59', tag=u'vs59')
verbatimStyleAttType.vs60 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs60', tag=u'vs60')
verbatimStyleAttType.vs61 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs61', tag=u'vs61')
verbatimStyleAttType.vs62 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs62', tag=u'vs62')
verbatimStyleAttType.vs63 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs63', tag=u'vs63')
verbatimStyleAttType.vs64 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs64', tag=u'vs64')
verbatimStyleAttType.vs65 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs65', tag=u'vs65')
verbatimStyleAttType.vs66 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs66', tag=u'vs66')
verbatimStyleAttType.vs67 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs67', tag=u'vs67')
verbatimStyleAttType.vs68 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs68', tag=u'vs68')
verbatimStyleAttType.vs69 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs69', tag=u'vs69')
verbatimStyleAttType.vs70 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs70', tag=u'vs70')
verbatimStyleAttType.vs71 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs71', tag=u'vs71')
verbatimStyleAttType.vs72 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs72', tag=u'vs72')
verbatimStyleAttType.vs73 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs73', tag=u'vs73')
verbatimStyleAttType.vs74 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs74', tag=u'vs74')
verbatimStyleAttType.vs75 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs75', tag=u'vs75')
verbatimStyleAttType.vs76 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs76', tag=u'vs76')
verbatimStyleAttType.vs77 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs77', tag=u'vs77')
verbatimStyleAttType.vs78 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs78', tag=u'vs78')
verbatimStyleAttType.vs79 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs79', tag=u'vs79')
verbatimStyleAttType.vs80 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs80', tag=u'vs80')
verbatimStyleAttType.vs81 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs81', tag=u'vs81')
verbatimStyleAttType.vs82 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs82', tag=u'vs82')
verbatimStyleAttType.vs83 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs83', tag=u'vs83')
verbatimStyleAttType.vs84 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs84', tag=u'vs84')
verbatimStyleAttType.vs85 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs85', tag=u'vs85')
verbatimStyleAttType.vs86 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs86', tag=u'vs86')
verbatimStyleAttType.vs87 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs87', tag=u'vs87')
verbatimStyleAttType.vs88 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs88', tag=u'vs88')
verbatimStyleAttType.vs89 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs89', tag=u'vs89')
verbatimStyleAttType.vs90 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs90', tag=u'vs90')
verbatimStyleAttType.vs91 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs91', tag=u'vs91')
verbatimStyleAttType.vs92 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs92', tag=u'vs92')
verbatimStyleAttType.vs93 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs93', tag=u'vs93')
verbatimStyleAttType.vs94 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs94', tag=u'vs94')
verbatimStyleAttType.vs95 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs95', tag=u'vs95')
verbatimStyleAttType.vs96 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs96', tag=u'vs96')
verbatimStyleAttType.vs97 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs97', tag=u'vs97')
verbatimStyleAttType.vs98 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs98', tag=u'vs98')
verbatimStyleAttType.vs99 = verbatimStyleAttType._CF_enumeration.addEnumeration(unicode_value=u'vs99', tag=u'vs99')
verbatimStyleAttType._InitializeFacetMap(verbatimStyleAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'verbatimStyleAttType', verbatimStyleAttType)

# Atomic simple type: functionalItemTypeAttType
class functionalItemTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'functionalItemTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1302, 4)
    _Documentation = None
functionalItemTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=functionalItemTypeAttType, enum_prefix=None)
functionalItemTypeAttType.exact = functionalItemTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'exact', tag=u'exact')
functionalItemTypeAttType.family = functionalItemTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'family', tag=u'family')
functionalItemTypeAttType._InitializeFacetMap(functionalItemTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'functionalItemTypeAttType', functionalItemTypeAttType)

# Atomic simple type: circuitBreakerTypeAttType
class circuitBreakerTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1326, 4)
    _Documentation = None
circuitBreakerTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=circuitBreakerTypeAttType, enum_prefix=None)
circuitBreakerTypeAttType.eltro = circuitBreakerTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'eltro', tag=u'eltro')
circuitBreakerTypeAttType.elmec = circuitBreakerTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'elmec', tag=u'elmec')
circuitBreakerTypeAttType.clip = circuitBreakerTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'clip', tag=u'clip')
circuitBreakerTypeAttType._InitializeFacetMap(circuitBreakerTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'circuitBreakerTypeAttType', circuitBreakerTypeAttType)

# Atomic simple type: circuitBreakerActionAttType
class circuitBreakerActionAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerActionAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1334, 4)
    _Documentation = None
circuitBreakerActionAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=circuitBreakerActionAttType, enum_prefix=None)
circuitBreakerActionAttType.open = circuitBreakerActionAttType._CF_enumeration.addEnumeration(unicode_value=u'open', tag=u'open')
circuitBreakerActionAttType.close = circuitBreakerActionAttType._CF_enumeration.addEnumeration(unicode_value=u'close', tag=u'close')
circuitBreakerActionAttType.verif_open = circuitBreakerActionAttType._CF_enumeration.addEnumeration(unicode_value=u'verif-open', tag=u'verif_open')
circuitBreakerActionAttType.verif_close = circuitBreakerActionAttType._CF_enumeration.addEnumeration(unicode_value=u'verif-close', tag=u'verif_close')
circuitBreakerActionAttType._InitializeFacetMap(circuitBreakerActionAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'circuitBreakerActionAttType', circuitBreakerActionAttType)

# Atomic simple type: significantParaDataTypeAttType
class significantParaDataTypeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'significantParaDataTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1360, 4)
    _Documentation = None
significantParaDataTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=significantParaDataTypeAttType, enum_prefix=None)
significantParaDataTypeAttType.psd01 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd01', tag=u'psd01')
significantParaDataTypeAttType.psd02 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd02', tag=u'psd02')
significantParaDataTypeAttType.psd03 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd03', tag=u'psd03')
significantParaDataTypeAttType.psd04 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd04', tag=u'psd04')
significantParaDataTypeAttType.psd05 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd05', tag=u'psd05')
significantParaDataTypeAttType.psd06 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd06', tag=u'psd06')
significantParaDataTypeAttType.psd07 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd07', tag=u'psd07')
significantParaDataTypeAttType.psd08 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd08', tag=u'psd08')
significantParaDataTypeAttType.psd09 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd09', tag=u'psd09')
significantParaDataTypeAttType.psd10 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd10', tag=u'psd10')
significantParaDataTypeAttType.psd11 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd11', tag=u'psd11')
significantParaDataTypeAttType.psd12 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd12', tag=u'psd12')
significantParaDataTypeAttType.psd13 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd13', tag=u'psd13')
significantParaDataTypeAttType.psd14 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd14', tag=u'psd14')
significantParaDataTypeAttType.psd15 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd15', tag=u'psd15')
significantParaDataTypeAttType.psd16 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd16', tag=u'psd16')
significantParaDataTypeAttType.psd17 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd17', tag=u'psd17')
significantParaDataTypeAttType.psd18 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd18', tag=u'psd18')
significantParaDataTypeAttType.psd19 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd19', tag=u'psd19')
significantParaDataTypeAttType.psd20 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd20', tag=u'psd20')
significantParaDataTypeAttType.psd21 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd21', tag=u'psd21')
significantParaDataTypeAttType.psd22 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd22', tag=u'psd22')
significantParaDataTypeAttType.psd23 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd23', tag=u'psd23')
significantParaDataTypeAttType.psd24 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd24', tag=u'psd24')
significantParaDataTypeAttType.psd25 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd25', tag=u'psd25')
significantParaDataTypeAttType.psd26 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd26', tag=u'psd26')
significantParaDataTypeAttType.psd27 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd27', tag=u'psd27')
significantParaDataTypeAttType.psd28 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd28', tag=u'psd28')
significantParaDataTypeAttType.psd29 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd29', tag=u'psd29')
significantParaDataTypeAttType.psd30 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd30', tag=u'psd30')
significantParaDataTypeAttType.psd31 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd31', tag=u'psd31')
significantParaDataTypeAttType.psd32 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd32', tag=u'psd32')
significantParaDataTypeAttType.psd33 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd33', tag=u'psd33')
significantParaDataTypeAttType.psd34 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd34', tag=u'psd34')
significantParaDataTypeAttType.psd35 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd35', tag=u'psd35')
significantParaDataTypeAttType.psd36 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd36', tag=u'psd36')
significantParaDataTypeAttType.psd37 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd37', tag=u'psd37')
significantParaDataTypeAttType.psd38 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd38', tag=u'psd38')
significantParaDataTypeAttType.psd39 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd39', tag=u'psd39')
significantParaDataTypeAttType.psd40 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd40', tag=u'psd40')
significantParaDataTypeAttType.psd41 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd41', tag=u'psd41')
significantParaDataTypeAttType.psd42 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd42', tag=u'psd42')
significantParaDataTypeAttType.psd43 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd43', tag=u'psd43')
significantParaDataTypeAttType.psd44 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd44', tag=u'psd44')
significantParaDataTypeAttType.psd45 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd45', tag=u'psd45')
significantParaDataTypeAttType.psd46 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd46', tag=u'psd46')
significantParaDataTypeAttType.psd47 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd47', tag=u'psd47')
significantParaDataTypeAttType.psd48 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd48', tag=u'psd48')
significantParaDataTypeAttType.psd49 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd49', tag=u'psd49')
significantParaDataTypeAttType.psd50 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd50', tag=u'psd50')
significantParaDataTypeAttType.psd51 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd51', tag=u'psd51')
significantParaDataTypeAttType.psd52 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd52', tag=u'psd52')
significantParaDataTypeAttType.psd53 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd53', tag=u'psd53')
significantParaDataTypeAttType.psd54 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd54', tag=u'psd54')
significantParaDataTypeAttType.psd55 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd55', tag=u'psd55')
significantParaDataTypeAttType.psd56 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd56', tag=u'psd56')
significantParaDataTypeAttType.psd57 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd57', tag=u'psd57')
significantParaDataTypeAttType.psd58 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd58', tag=u'psd58')
significantParaDataTypeAttType.psd59 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd59', tag=u'psd59')
significantParaDataTypeAttType.psd60 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd60', tag=u'psd60')
significantParaDataTypeAttType.psd61 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd61', tag=u'psd61')
significantParaDataTypeAttType.psd62 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd62', tag=u'psd62')
significantParaDataTypeAttType.psd63 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd63', tag=u'psd63')
significantParaDataTypeAttType.psd64 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd64', tag=u'psd64')
significantParaDataTypeAttType.psd65 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd65', tag=u'psd65')
significantParaDataTypeAttType.psd66 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd66', tag=u'psd66')
significantParaDataTypeAttType.psd67 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd67', tag=u'psd67')
significantParaDataTypeAttType.psd68 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd68', tag=u'psd68')
significantParaDataTypeAttType.psd69 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd69', tag=u'psd69')
significantParaDataTypeAttType.psd70 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd70', tag=u'psd70')
significantParaDataTypeAttType.psd71 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd71', tag=u'psd71')
significantParaDataTypeAttType.psd72 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd72', tag=u'psd72')
significantParaDataTypeAttType.psd73 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd73', tag=u'psd73')
significantParaDataTypeAttType.psd74 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd74', tag=u'psd74')
significantParaDataTypeAttType.psd75 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd75', tag=u'psd75')
significantParaDataTypeAttType.psd76 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd76', tag=u'psd76')
significantParaDataTypeAttType.psd77 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd77', tag=u'psd77')
significantParaDataTypeAttType.psd78 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd78', tag=u'psd78')
significantParaDataTypeAttType.psd79 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd79', tag=u'psd79')
significantParaDataTypeAttType.psd80 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd80', tag=u'psd80')
significantParaDataTypeAttType.psd81 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd81', tag=u'psd81')
significantParaDataTypeAttType.psd82 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd82', tag=u'psd82')
significantParaDataTypeAttType.psd83 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd83', tag=u'psd83')
significantParaDataTypeAttType.psd84 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd84', tag=u'psd84')
significantParaDataTypeAttType.psd85 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd85', tag=u'psd85')
significantParaDataTypeAttType.psd86 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd86', tag=u'psd86')
significantParaDataTypeAttType.psd87 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd87', tag=u'psd87')
significantParaDataTypeAttType.psd88 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd88', tag=u'psd88')
significantParaDataTypeAttType.psd89 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd89', tag=u'psd89')
significantParaDataTypeAttType.psd90 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd90', tag=u'psd90')
significantParaDataTypeAttType.psd91 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd91', tag=u'psd91')
significantParaDataTypeAttType.psd92 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd92', tag=u'psd92')
significantParaDataTypeAttType.psd93 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd93', tag=u'psd93')
significantParaDataTypeAttType.psd94 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd94', tag=u'psd94')
significantParaDataTypeAttType.psd95 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd95', tag=u'psd95')
significantParaDataTypeAttType.psd96 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd96', tag=u'psd96')
significantParaDataTypeAttType.psd97 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd97', tag=u'psd97')
significantParaDataTypeAttType.psd98 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd98', tag=u'psd98')
significantParaDataTypeAttType.psd99 = significantParaDataTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'psd99', tag=u'psd99')
significantParaDataTypeAttType._InitializeFacetMap(significantParaDataTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'significantParaDataTypeAttType', significantParaDataTypeAttType)

# Atomic simple type: quantityUnitOfMeasureAttType
class quantityUnitOfMeasureAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityUnitOfMeasureAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1493, 4)
    _Documentation = None
quantityUnitOfMeasureAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=quantityUnitOfMeasureAttType, enum_prefix=None)
quantityUnitOfMeasureAttType.n1H = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/H', tag=u'n1H')
quantityUnitOfMeasureAttType.n1K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/K', tag=u'n1K')
quantityUnitOfMeasureAttType.n1kg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/kg', tag=u'n1kg')
quantityUnitOfMeasureAttType.n1m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/m', tag=u'n1m')
quantityUnitOfMeasureAttType.n1m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/m2', tag=u'n1m2')
quantityUnitOfMeasureAttType.n1m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/m3', tag=u'n1m3')
quantityUnitOfMeasureAttType.n1N = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/N', tag=u'n1N')
quantityUnitOfMeasureAttType.n1Pa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/Pa', tag=u'n1Pa')
quantityUnitOfMeasureAttType.n1s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/s', tag=u'n1s')
quantityUnitOfMeasureAttType.n1V = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/V', tag=u'n1V')
quantityUnitOfMeasureAttType.A = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A', tag=u'A')
quantityUnitOfMeasureAttType.A_m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A.m2', tag=u'A_m2')
quantityUnitOfMeasureAttType.Am = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A/m', tag=u'Am')
quantityUnitOfMeasureAttType.Am2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A/m2', tag=u'Am2')
quantityUnitOfMeasureAttType.B = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'B', tag=u'B')
quantityUnitOfMeasureAttType.Bm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'B/m', tag=u'Bm')
quantityUnitOfMeasureAttType.BO = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'B/O', tag=u'BO')
quantityUnitOfMeasureAttType.Bd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Bd', tag=u'Bd')
quantityUnitOfMeasureAttType.Bq = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Bq', tag=u'Bq')
quantityUnitOfMeasureAttType.Bqkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Bq/kg', tag=u'Bqkg')
quantityUnitOfMeasureAttType.byte = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'byte', tag=u'byte')
quantityUnitOfMeasureAttType.C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C', tag=u'C')
quantityUnitOfMeasureAttType.C_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C.m', tag=u'C_m')
quantityUnitOfMeasureAttType.Ckg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/kg', tag=u'Ckg')
quantityUnitOfMeasureAttType.Cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/m2', tag=u'Cm2')
quantityUnitOfMeasureAttType.Cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/m3', tag=u'Cm3')
quantityUnitOfMeasureAttType.cd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cd', tag=u'cd')
quantityUnitOfMeasureAttType.cdm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cd/m2', tag=u'cdm2')
quantityUnitOfMeasureAttType.eq = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'eq', tag=u'eq')
quantityUnitOfMeasureAttType.eqkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'eq/kg', tag=u'eqkg')
quantityUnitOfMeasureAttType.eqm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'eq/m3', tag=u'eqm3')
quantityUnitOfMeasureAttType.Euc = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Euc', tag=u'Euc')
quantityUnitOfMeasureAttType.F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'F', tag=u'F')
quantityUnitOfMeasureAttType.Fm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'F/m', tag=u'Fm')
quantityUnitOfMeasureAttType.gu = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gu', tag=u'gu')
quantityUnitOfMeasureAttType.gAPI = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gAPI', tag=u'gAPI')
quantityUnitOfMeasureAttType.Gy = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Gy', tag=u'Gy')
quantityUnitOfMeasureAttType.H = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'H', tag=u'H')
quantityUnitOfMeasureAttType.Hm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'H/m', tag=u'Hm')
quantityUnitOfMeasureAttType.Hz = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Hz', tag=u'Hz')
quantityUnitOfMeasureAttType.J = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J', tag=u'J')
quantityUnitOfMeasureAttType.JK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/K', tag=u'JK')
quantityUnitOfMeasureAttType.Jkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/kg', tag=u'Jkg')
quantityUnitOfMeasureAttType.Jkg_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/kg.K', tag=u'Jkg_K')
quantityUnitOfMeasureAttType.Jm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/m3', tag=u'Jm3')
quantityUnitOfMeasureAttType.Jmol = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/mol', tag=u'Jmol')
quantityUnitOfMeasureAttType.Jmol_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/mol.K', tag=u'Jmol_K')
quantityUnitOfMeasureAttType.K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'K', tag=u'K')
quantityUnitOfMeasureAttType.K_m2W = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'K.m2/W', tag=u'K_m2W')
quantityUnitOfMeasureAttType.Km = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'K/m', tag=u'Km')
quantityUnitOfMeasureAttType.Ks = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'K/s', tag=u'Ks')
quantityUnitOfMeasureAttType.KW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'K/W', tag=u'KW')
quantityUnitOfMeasureAttType.kg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg', tag=u'kg')
quantityUnitOfMeasureAttType.kg_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg.m', tag=u'kg_m')
quantityUnitOfMeasureAttType.kg_ms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg.m/s', tag=u'kg_ms')
quantityUnitOfMeasureAttType.kg_m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg.m2', tag=u'kg_m2')
quantityUnitOfMeasureAttType.kgJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/J', tag=u'kgJ')
quantityUnitOfMeasureAttType.kgm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/m', tag=u'kgm')
quantityUnitOfMeasureAttType.kgm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/m2', tag=u'kgm2')
quantityUnitOfMeasureAttType.kgm2_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/m2.s', tag=u'kgm2_s')
quantityUnitOfMeasureAttType.kgm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/m3', tag=u'kgm3')
quantityUnitOfMeasureAttType.kgm4 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/m4', tag=u'kgm4')
quantityUnitOfMeasureAttType.kgs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/s', tag=u'kgs')
quantityUnitOfMeasureAttType.lm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lm', tag=u'lm')
quantityUnitOfMeasureAttType.lm_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lm.s', tag=u'lm_s')
quantityUnitOfMeasureAttType.lmW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lm/W', tag=u'lmW')
quantityUnitOfMeasureAttType.lx = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lx', tag=u'lx')
quantityUnitOfMeasureAttType.lx_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lx.s', tag=u'lx_s')
quantityUnitOfMeasureAttType.m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm', tag=u'm')
quantityUnitOfMeasureAttType.mK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/K', tag=u'mK')
quantityUnitOfMeasureAttType.ms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/s', tag=u'ms')
quantityUnitOfMeasureAttType.ms2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/s2', tag=u'ms2')
quantityUnitOfMeasureAttType.m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2', tag=u'm2')
quantityUnitOfMeasureAttType.m2kg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/kg', tag=u'm2kg')
quantityUnitOfMeasureAttType.m2mol = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/mol', tag=u'm2mol')
quantityUnitOfMeasureAttType.m2Pa_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/Pa.s', tag=u'm2Pa_s')
quantityUnitOfMeasureAttType.m2s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/s', tag=u'm2s')
quantityUnitOfMeasureAttType.m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3', tag=u'm3')
quantityUnitOfMeasureAttType.m3J = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/J', tag=u'm3J')
quantityUnitOfMeasureAttType.m3kg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/kg', tag=u'm3kg')
quantityUnitOfMeasureAttType.m3mol = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/mol', tag=u'm3mol')
quantityUnitOfMeasureAttType.m3Pa_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/Pa.s', tag=u'm3Pa_s')
quantityUnitOfMeasureAttType.m3Pas = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/Pa/s', tag=u'm3Pas')
quantityUnitOfMeasureAttType.m3Pa2_s2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/Pa2.s2', tag=u'm3Pa2_s2')
quantityUnitOfMeasureAttType.m3s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/s', tag=u'm3s')
quantityUnitOfMeasureAttType.m3s2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/s2', tag=u'm3s2')
quantityUnitOfMeasureAttType.m3scm0C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/scm(0C)', tag=u'm3scm0C')
quantityUnitOfMeasureAttType.m3scm15C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/scm(15C)', tag=u'm3scm15C')
quantityUnitOfMeasureAttType.m4 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm4', tag=u'm4')
quantityUnitOfMeasureAttType.m4s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm4/s', tag=u'm4s')
quantityUnitOfMeasureAttType.mol = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol', tag=u'mol')
quantityUnitOfMeasureAttType.molm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol/m2', tag=u'molm2')
quantityUnitOfMeasureAttType.molm2_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol/m2.s', tag=u'molm2_s')
quantityUnitOfMeasureAttType.molm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol/m3', tag=u'molm3')
quantityUnitOfMeasureAttType.mols = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol/s', tag=u'mols')
quantityUnitOfMeasureAttType.N = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N', tag=u'N')
quantityUnitOfMeasureAttType.N_m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N.m2', tag=u'N_m2')
quantityUnitOfMeasureAttType.Nm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N/m', tag=u'Nm')
quantityUnitOfMeasureAttType.Nm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N/m3', tag=u'Nm3')
quantityUnitOfMeasureAttType.N4kg_m7 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N4/kg.m7', tag=u'N4kg_m7')
quantityUnitOfMeasureAttType.nAPI = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nAPI', tag=u'nAPI')
quantityUnitOfMeasureAttType.O = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'O', tag=u'O')
quantityUnitOfMeasureAttType.ohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ohm', tag=u'ohm')
quantityUnitOfMeasureAttType.ohm_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ohm.m', tag=u'ohm_m')
quantityUnitOfMeasureAttType.ohmm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ohm/m', tag=u'ohmm')
quantityUnitOfMeasureAttType.Pa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa', tag=u'Pa')
quantityUnitOfMeasureAttType.Pa_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa.s', tag=u'Pa_s')
quantityUnitOfMeasureAttType.Pa_sm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa.s/m3', tag=u'Pa_sm3')
quantityUnitOfMeasureAttType.Pa_sm6 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa.s/m6', tag=u'Pa_sm6')
quantityUnitOfMeasureAttType.Pam = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa/m', tag=u'Pam')
quantityUnitOfMeasureAttType.Pam3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa/m3', tag=u'Pam3')
quantityUnitOfMeasureAttType.Pas = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa/s', tag=u'Pas')
quantityUnitOfMeasureAttType.Pa2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa2', tag=u'Pa2')
quantityUnitOfMeasureAttType.pH = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pH', tag=u'pH')
quantityUnitOfMeasureAttType.rad = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rad', tag=u'rad')
quantityUnitOfMeasureAttType.radm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rad/m', tag=u'radm')
quantityUnitOfMeasureAttType.radm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rad/m3', tag=u'radm3')
quantityUnitOfMeasureAttType.rads = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rad/s', tag=u'rads')
quantityUnitOfMeasureAttType.rads2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rad/s2', tag=u'rads2')
quantityUnitOfMeasureAttType.S = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'S', tag=u'S')
quantityUnitOfMeasureAttType.s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's', tag=u's')
quantityUnitOfMeasureAttType.Sm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'S/m', tag=u'Sm')
quantityUnitOfMeasureAttType.sm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/m', tag=u'sm')
quantityUnitOfMeasureAttType.sm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/m3', tag=u'sm3')
quantityUnitOfMeasureAttType.scm0C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(0C)', tag=u'scm0C')
quantityUnitOfMeasureAttType.scm0Cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(0C)/m2', tag=u'scm0Cm2')
quantityUnitOfMeasureAttType.scm0Cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(0C)/m3', tag=u'scm0Cm3')
quantityUnitOfMeasureAttType.scm15C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(15C)', tag=u'scm15C')
quantityUnitOfMeasureAttType.scm15Cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(15C)/m2', tag=u'scm15Cm2')
quantityUnitOfMeasureAttType.scm15Cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(15C)/m3', tag=u'scm15Cm3')
quantityUnitOfMeasureAttType.scm15Cs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(15C)/s', tag=u'scm15Cs')
quantityUnitOfMeasureAttType.sr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sr', tag=u'sr')
quantityUnitOfMeasureAttType.Sv = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Sv', tag=u'Sv')
quantityUnitOfMeasureAttType.Svs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Sv/s', tag=u'Svs')
quantityUnitOfMeasureAttType.T = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'T', tag=u'T')
quantityUnitOfMeasureAttType.V = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'V', tag=u'V')
quantityUnitOfMeasureAttType.VB = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'V/B', tag=u'VB')
quantityUnitOfMeasureAttType.Vm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'V/m', tag=u'Vm')
quantityUnitOfMeasureAttType.W = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W', tag=u'W')
quantityUnitOfMeasureAttType.WK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/K', tag=u'WK')
quantityUnitOfMeasureAttType.Wm_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/m.K', tag=u'Wm_K')
quantityUnitOfMeasureAttType.Wm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/m2', tag=u'Wm2')
quantityUnitOfMeasureAttType.Wm2_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/m2.K', tag=u'Wm2_K')
quantityUnitOfMeasureAttType.Wm2_sr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/m2.sr', tag=u'Wm2_sr')
quantityUnitOfMeasureAttType.Wm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/m3', tag=u'Wm3')
quantityUnitOfMeasureAttType.Wm3_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/m3.K', tag=u'Wm3_K')
quantityUnitOfMeasureAttType.Wsr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/sr', tag=u'Wsr')
quantityUnitOfMeasureAttType.Wb = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Wb', tag=u'Wb')
quantityUnitOfMeasureAttType.Wb_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Wb.m', tag=u'Wb_m')
quantityUnitOfMeasureAttType.Wbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Wb/m', tag=u'Wbm')
quantityUnitOfMeasureAttType.emptyString = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'%', tag='emptyString')
quantityUnitOfMeasureAttType.n1a = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/a', tag=u'n1a')
quantityUnitOfMeasureAttType.n1angstrom = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/angstrom', tag=u'n1angstrom')
quantityUnitOfMeasureAttType.n1bar = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/bar', tag=u'n1bar')
quantityUnitOfMeasureAttType.n1bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/bbl', tag=u'n1bbl')
quantityUnitOfMeasureAttType.n1cm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/cm', tag=u'n1cm')
quantityUnitOfMeasureAttType.n1d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/d', tag=u'n1d')
quantityUnitOfMeasureAttType.n1degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/degC', tag=u'n1degC')
quantityUnitOfMeasureAttType.n1degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/degF', tag=u'n1degF')
quantityUnitOfMeasureAttType.n1degR = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/degR', tag=u'n1degR')
quantityUnitOfMeasureAttType.n1ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/ft', tag=u'n1ft')
quantityUnitOfMeasureAttType.n1ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/ft2', tag=u'n1ft2')
quantityUnitOfMeasureAttType.n1ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/ft3', tag=u'n1ft3')
quantityUnitOfMeasureAttType.n1g = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/g', tag=u'n1g')
quantityUnitOfMeasureAttType.n1galUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/galUK', tag=u'n1galUK')
quantityUnitOfMeasureAttType.n1galUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/galUS', tag=u'n1galUS')
quantityUnitOfMeasureAttType.n1h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/h', tag=u'n1h')
quantityUnitOfMeasureAttType.n1in = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/in', tag=u'n1in')
quantityUnitOfMeasureAttType.n1km2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/km2', tag=u'n1km2')
quantityUnitOfMeasureAttType.n1kPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/kPa', tag=u'n1kPa')
quantityUnitOfMeasureAttType.n1L = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/L', tag=u'n1L')
quantityUnitOfMeasureAttType.n1lbf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/lbf', tag=u'n1lbf')
quantityUnitOfMeasureAttType.n1lbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/lbm', tag=u'n1lbm')
quantityUnitOfMeasureAttType.n1mi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/mi', tag=u'n1mi')
quantityUnitOfMeasureAttType.n1mi2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/mi2', tag=u'n1mi2')
quantityUnitOfMeasureAttType.n1min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/min', tag=u'n1min')
quantityUnitOfMeasureAttType.n1mm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/mm', tag=u'n1mm')
quantityUnitOfMeasureAttType.n1nm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/nm', tag=u'n1nm')
quantityUnitOfMeasureAttType.n1pPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/pPa', tag=u'n1pPa')
quantityUnitOfMeasureAttType.n1psi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/psi', tag=u'n1psi')
quantityUnitOfMeasureAttType.n1upsi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/upsi', tag=u'n1upsi')
quantityUnitOfMeasureAttType.n1uV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/uV', tag=u'n1uV')
quantityUnitOfMeasureAttType.n1wk = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/wk', tag=u'n1wk')
quantityUnitOfMeasureAttType.n1yd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1/yd', tag=u'n1yd')
quantityUnitOfMeasureAttType.n1000ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000ft3', tag=u'n1000ft3')
quantityUnitOfMeasureAttType.n1000ft3bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000ft3/bbl', tag=u'n1000ft3bbl')
quantityUnitOfMeasureAttType.n1000ft3d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000ft3/d', tag=u'n1000ft3d')
quantityUnitOfMeasureAttType.n1000ft3d_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000ft3/d.ft', tag=u'n1000ft3d_ft')
quantityUnitOfMeasureAttType.n1000ft3psi_d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000ft3/psi.d', tag=u'n1000ft3psi_d')
quantityUnitOfMeasureAttType.n1000m3d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000m3/d', tag=u'n1000m3d')
quantityUnitOfMeasureAttType.n1000m3d_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000m3/d.m', tag=u'n1000m3d_m')
quantityUnitOfMeasureAttType.n1000m3h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000m3/h', tag=u'n1000m3h')
quantityUnitOfMeasureAttType.n1000m3h_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000m3/h.m', tag=u'n1000m3h_m')
quantityUnitOfMeasureAttType.n1000m4d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'1000m4/d', tag=u'n1000m4d')
quantityUnitOfMeasureAttType.n100ka = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'100ka', tag=u'n100ka')
quantityUnitOfMeasureAttType.n10Mgm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'10Mg/m3', tag=u'n10Mgm3')
quantityUnitOfMeasureAttType.a = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'a', tag=u'a')
quantityUnitOfMeasureAttType.A_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A.h', tag=u'A_h')
quantityUnitOfMeasureAttType.Acm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A/cm2', tag=u'Acm2')
quantityUnitOfMeasureAttType.Aft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A/ft2', tag=u'Aft2')
quantityUnitOfMeasureAttType.Amm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A/mm', tag=u'Amm')
quantityUnitOfMeasureAttType.Amm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'A/mm2', tag=u'Amm2')
quantityUnitOfMeasureAttType.acre = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'acre', tag=u'acre')
quantityUnitOfMeasureAttType.acre_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'acre.ft', tag=u'acre_ft')
quantityUnitOfMeasureAttType.acre_ftMMstb = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'acre.ft/MMstb', tag=u'acre_ftMMstb')
quantityUnitOfMeasureAttType.ag = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ag', tag=u'ag')
quantityUnitOfMeasureAttType.aJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'aJ', tag=u'aJ')
quantityUnitOfMeasureAttType.angstrom = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'angstrom', tag=u'angstrom')
quantityUnitOfMeasureAttType.at = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'at', tag=u'at')
quantityUnitOfMeasureAttType.atm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'atm', tag=u'atm')
quantityUnitOfMeasureAttType.atmft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'atm/ft', tag=u'atmft')
quantityUnitOfMeasureAttType.atmh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'atm/h', tag=u'atmh')
quantityUnitOfMeasureAttType.atmhm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'atm/hm', tag=u'atmhm')
quantityUnitOfMeasureAttType.atmm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'atm/m', tag=u'atmm')
quantityUnitOfMeasureAttType.b = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'b', tag=u'b')
quantityUnitOfMeasureAttType.bcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'b/cm3', tag=u'bcm3')
quantityUnitOfMeasureAttType.belec = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'b/elec', tag=u'belec')
quantityUnitOfMeasureAttType.bar = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bar', tag=u'bar')
quantityUnitOfMeasureAttType.barh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bar/h', tag=u'barh')
quantityUnitOfMeasureAttType.barkm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bar/km', tag=u'barkm')
quantityUnitOfMeasureAttType.barm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bar/m', tag=u'barm')
quantityUnitOfMeasureAttType.bar2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bar2', tag=u'bar2')
quantityUnitOfMeasureAttType.bar2cP = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bar2/cP', tag=u'bar2cP')
quantityUnitOfMeasureAttType.bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl', tag=u'bbl')
quantityUnitOfMeasureAttType.bbl100bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/100bbl', tag=u'bbl100bbl')
quantityUnitOfMeasureAttType.bblacre = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/acre', tag=u'bblacre')
quantityUnitOfMeasureAttType.bblacre_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/acre.ft', tag=u'bblacre_ft')
quantityUnitOfMeasureAttType.bblbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/bbl', tag=u'bblbbl')
quantityUnitOfMeasureAttType.bblcP_d_psi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/cP.d.psi', tag=u'bblcP_d_psi')
quantityUnitOfMeasureAttType.bbld = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/d', tag=u'bbld')
quantityUnitOfMeasureAttType.bbld_acre_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/d.acre.ft', tag=u'bbld_acre_ft')
quantityUnitOfMeasureAttType.bbld_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/d.ft', tag=u'bbld_ft')
quantityUnitOfMeasureAttType.bbld_ft_psi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/d.ft.psi', tag=u'bbld_ft_psi')
quantityUnitOfMeasureAttType.bbld_psi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/d.psi', tag=u'bbld_psi')
quantityUnitOfMeasureAttType.bbld2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/d2', tag=u'bbld2')
quantityUnitOfMeasureAttType.bblft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/ft', tag=u'bblft')
quantityUnitOfMeasureAttType.bblft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/ft3', tag=u'bblft3')
quantityUnitOfMeasureAttType.bblhr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/hr', tag=u'bblhr')
quantityUnitOfMeasureAttType.bblhr2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/hr2', tag=u'bblhr2')
quantityUnitOfMeasureAttType.bblin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/in', tag=u'bblin')
quantityUnitOfMeasureAttType.bblkft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/k(ft3)', tag=u'bblkft3')
quantityUnitOfMeasureAttType.bblkPa_d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/kPa.d', tag=u'bblkPa_d')
quantityUnitOfMeasureAttType.bblMft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/M(ft3)', tag=u'bblMft3')
quantityUnitOfMeasureAttType.bblmi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/mi', tag=u'bblmi')
quantityUnitOfMeasureAttType.bblmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/min', tag=u'bblmin')
quantityUnitOfMeasureAttType.bblMMscf60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/MMscf(60F)', tag=u'bblMMscf60F')
quantityUnitOfMeasureAttType.bblpsi_d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/psi.d', tag=u'bblpsi_d')
quantityUnitOfMeasureAttType.bblstb60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/stb(60F)', tag=u'bblstb60F')
quantityUnitOfMeasureAttType.bbltonUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/tonUK', tag=u'bbltonUK')
quantityUnitOfMeasureAttType.bbltonUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bbl/tonUS', tag=u'bbltonUS')
quantityUnitOfMeasureAttType.bcf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bcf', tag=u'bcf')
quantityUnitOfMeasureAttType.bit = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'bit', tag=u'bit')
quantityUnitOfMeasureAttType.Btu = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu', tag=u'Btu')
quantityUnitOfMeasureAttType.Btu_inhr_ft2_F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu.in/hr.ft2.F', tag=u'Btu_inhr_ft2_F')
quantityUnitOfMeasureAttType.Btumillionhr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu(million)/hr', tag=u'Btumillionhr')
quantityUnitOfMeasureAttType.Btubbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/bbl', tag=u'Btubbl')
quantityUnitOfMeasureAttType.Btubhp_hr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/bhp.hr', tag=u'Btubhp_hr')
quantityUnitOfMeasureAttType.Btuft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/ft3', tag=u'Btuft3')
quantityUnitOfMeasureAttType.BtugalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/galUK', tag=u'BtugalUK')
quantityUnitOfMeasureAttType.BtugalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/galUS', tag=u'BtugalUS')
quantityUnitOfMeasureAttType.Btuhr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr', tag=u'Btuhr')
quantityUnitOfMeasureAttType.Btuhr_ft_degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr.ft.degF', tag=u'Btuhr_ft_degF')
quantityUnitOfMeasureAttType.Btuhr_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr.ft2', tag=u'Btuhr_ft2')
quantityUnitOfMeasureAttType.Btuhr_ft2_degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr.ft2.degF', tag=u'Btuhr_ft2_degF')
quantityUnitOfMeasureAttType.Btuhr_ft2_degR = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr.ft2.degR', tag=u'Btuhr_ft2_degR')
quantityUnitOfMeasureAttType.Btuhr_ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr.ft3', tag=u'Btuhr_ft3')
quantityUnitOfMeasureAttType.Btuhr_ft3_degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr.ft3.degF', tag=u'Btuhr_ft3_degF')
quantityUnitOfMeasureAttType.Btuhr_m2_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/hr.m2.degC', tag=u'Btuhr_m2_degC')
quantityUnitOfMeasureAttType.Btulbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/lbm', tag=u'Btulbm')
quantityUnitOfMeasureAttType.Btulbm_degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/lbm.degF', tag=u'Btulbm_degF')
quantityUnitOfMeasureAttType.Btulbm_degR = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/lbm.degR', tag=u'Btulbm_degR')
quantityUnitOfMeasureAttType.Btumin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/min', tag=u'Btumin')
quantityUnitOfMeasureAttType.Btumollbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/mol(lbm)', tag=u'Btumollbm')
quantityUnitOfMeasureAttType.Btumollbm_F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/mol(lbm).F', tag=u'Btumollbm_F')
quantityUnitOfMeasureAttType.Btus = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/s', tag=u'Btus')
quantityUnitOfMeasureAttType.Btus_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/s.ft2', tag=u'Btus_ft2')
quantityUnitOfMeasureAttType.Btus_ft2_degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/s.ft2.degF', tag=u'Btus_ft2_degF')
quantityUnitOfMeasureAttType.Btus_ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/s.ft3', tag=u'Btus_ft3')
quantityUnitOfMeasureAttType.Btus_ft3_degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Btu/s.ft3.degF', tag=u'Btus_ft3_degF')
quantityUnitOfMeasureAttType.c = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'c', tag=u'c')
quantityUnitOfMeasureAttType.Ccm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/cm2', tag=u'Ccm2')
quantityUnitOfMeasureAttType.Ccm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/cm3', tag=u'Ccm3')
quantityUnitOfMeasureAttType.Cg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/g', tag=u'Cg')
quantityUnitOfMeasureAttType.Cmm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/mm2', tag=u'Cmm2')
quantityUnitOfMeasureAttType.Cmm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'C/mm3', tag=u'Cmm3')
quantityUnitOfMeasureAttType.cs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'c/s', tag=u'cs')
quantityUnitOfMeasureAttType.cal = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal', tag=u'cal')
quantityUnitOfMeasureAttType.calcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/cm3', tag=u'calcm3')
quantityUnitOfMeasureAttType.calg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/g', tag=u'calg')
quantityUnitOfMeasureAttType.calg_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/g.K', tag=u'calg_K')
quantityUnitOfMeasureAttType.calh_cm_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/h.cm.degC', tag=u'calh_cm_degC')
quantityUnitOfMeasureAttType.calh_cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/h.cm2', tag=u'calh_cm2')
quantityUnitOfMeasureAttType.calh_cm2_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/h.cm2.degC', tag=u'calh_cm2_degC')
quantityUnitOfMeasureAttType.calh_cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/h.cm3', tag=u'calh_cm3')
quantityUnitOfMeasureAttType.calkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/kg', tag=u'calkg')
quantityUnitOfMeasureAttType.callbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/lbm', tag=u'callbm')
quantityUnitOfMeasureAttType.calmL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/mL', tag=u'calmL')
quantityUnitOfMeasureAttType.calmm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/mm3', tag=u'calmm3')
quantityUnitOfMeasureAttType.calmolg_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/mol(g).degC', tag=u'calmolg_degC')
quantityUnitOfMeasureAttType.cals_cm_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/s.cm.degC', tag=u'cals_cm_degC')
quantityUnitOfMeasureAttType.cals_cm2_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/s.cm2.degC', tag=u'cals_cm2_degC')
quantityUnitOfMeasureAttType.cals_cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cal/s.cm3', tag=u'cals_cm3')
quantityUnitOfMeasureAttType.ccgr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ccgr', tag=u'ccgr')
quantityUnitOfMeasureAttType.cEuc = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cEuc', tag=u'cEuc')
quantityUnitOfMeasureAttType.cgr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cgr', tag=u'cgr')
quantityUnitOfMeasureAttType.ch = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ch', tag=u'ch')
quantityUnitOfMeasureAttType.ch_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ch.h', tag=u'ch_h')
quantityUnitOfMeasureAttType.chBnA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'chBnA', tag=u'chBnA')
quantityUnitOfMeasureAttType.chBnB = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'chBnB', tag=u'chBnB')
quantityUnitOfMeasureAttType.chCla = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'chCla', tag=u'chCla')
quantityUnitOfMeasureAttType.chSe = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'chSe', tag=u'chSe')
quantityUnitOfMeasureAttType.Chu = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Chu', tag=u'Chu')
quantityUnitOfMeasureAttType.chUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'chUS', tag=u'chUS')
quantityUnitOfMeasureAttType.Ci = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Ci', tag=u'Ci')
quantityUnitOfMeasureAttType.cL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cL', tag=u'cL')
quantityUnitOfMeasureAttType.cm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm', tag=u'cm')
quantityUnitOfMeasureAttType.cma = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm/a', tag=u'cma')
quantityUnitOfMeasureAttType.cms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm/s', tag=u'cms')
quantityUnitOfMeasureAttType.cms2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm/s2', tag=u'cms2')
quantityUnitOfMeasureAttType.cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm2', tag=u'cm2')
quantityUnitOfMeasureAttType.cm2g = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm2/g', tag=u'cm2g')
quantityUnitOfMeasureAttType.cm2s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm2/s', tag=u'cm2s')
quantityUnitOfMeasureAttType.cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3', tag=u'cm3')
quantityUnitOfMeasureAttType.cm330min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3/30min', tag=u'cm330min')
quantityUnitOfMeasureAttType.cm3cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3/cm3', tag=u'cm3cm3')
quantityUnitOfMeasureAttType.cm3g = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3/g', tag=u'cm3g')
quantityUnitOfMeasureAttType.cm3h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3/h', tag=u'cm3h')
quantityUnitOfMeasureAttType.cm3m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3/m3', tag=u'cm3m3')
quantityUnitOfMeasureAttType.cm3min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3/min', tag=u'cm3min')
quantityUnitOfMeasureAttType.cm3s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm3/s', tag=u'cm3s')
quantityUnitOfMeasureAttType.cm4 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cm4', tag=u'cm4')
quantityUnitOfMeasureAttType.cmH2O4degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cmH2O(4degC)', tag=u'cmH2O4degC')
quantityUnitOfMeasureAttType.cP = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cP', tag=u'cP')
quantityUnitOfMeasureAttType.cs_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cs', tag=u'cs_')
quantityUnitOfMeasureAttType.cSt = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cSt', tag=u'cSt')
quantityUnitOfMeasureAttType.ct = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ct', tag=u'ct')
quantityUnitOfMeasureAttType.cu = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cu', tag=u'cu')
quantityUnitOfMeasureAttType.cu_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cu ft', tag=u'cu_ft')
quantityUnitOfMeasureAttType.cu_in = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cu in', tag=u'cu_in')
quantityUnitOfMeasureAttType.cu_yd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cu yd', tag=u'cu_yd')
quantityUnitOfMeasureAttType.cubem = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cubem', tag=u'cubem')
quantityUnitOfMeasureAttType.curie = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'curie', tag=u'curie')
quantityUnitOfMeasureAttType.CV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'CV', tag=u'CV')
quantityUnitOfMeasureAttType.CV_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'CV.h', tag=u'CV_h')
quantityUnitOfMeasureAttType.cwtUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cwtUK', tag=u'cwtUK')
quantityUnitOfMeasureAttType.cwtUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cwtUS', tag=u'cwtUS')
quantityUnitOfMeasureAttType.D = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'D', tag=u'D')
quantityUnitOfMeasureAttType.d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'd', tag=u'd')
quantityUnitOfMeasureAttType.D_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'D.ft', tag=u'D_ft')
quantityUnitOfMeasureAttType.D_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'D.m', tag=u'D_m')
quantityUnitOfMeasureAttType.dbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'd/bbl', tag=u'dbbl')
quantityUnitOfMeasureAttType.dft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'd/ft3', tag=u'dft3')
quantityUnitOfMeasureAttType.dkft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'd/k(ft3)', tag=u'dkft3')
quantityUnitOfMeasureAttType.dm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'd/m3', tag=u'dm3')
quantityUnitOfMeasureAttType.daN = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'daN', tag=u'daN')
quantityUnitOfMeasureAttType.daN_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'daN.m', tag=u'daN_m')
quantityUnitOfMeasureAttType.dAPI = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dAPI', tag=u'dAPI')
quantityUnitOfMeasureAttType.dB = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dB', tag=u'dB')
quantityUnitOfMeasureAttType.dB100m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dB/100m', tag=u'dB100m')
quantityUnitOfMeasureAttType.dBft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dB/ft', tag=u'dBft')
quantityUnitOfMeasureAttType.dBm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dB/m', tag=u'dBm')
quantityUnitOfMeasureAttType.dBkm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dB/km', tag=u'dBkm')
quantityUnitOfMeasureAttType.dBO = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dB/O', tag=u'dBO')
quantityUnitOfMeasureAttType.ddegC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ddegC', tag=u'ddegC')
quantityUnitOfMeasureAttType.ddegF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ddegF', tag=u'ddegF')
quantityUnitOfMeasureAttType.ddegK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ddegK', tag=u'ddegK')
quantityUnitOfMeasureAttType.ddegR = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ddegR', tag=u'ddegR')
quantityUnitOfMeasureAttType.dega = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega', tag=u'dega')
quantityUnitOfMeasureAttType.dega100ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/100ft', tag=u'dega100ft')
quantityUnitOfMeasureAttType.dega30ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/30ft', tag=u'dega30ft')
quantityUnitOfMeasureAttType.dega30m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/30m', tag=u'dega30m')
quantityUnitOfMeasureAttType.degaft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/ft', tag=u'degaft')
quantityUnitOfMeasureAttType.degaft100 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/ft(100)', tag=u'degaft100')
quantityUnitOfMeasureAttType.degah = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/h', tag=u'degah')
quantityUnitOfMeasureAttType.degam = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/m', tag=u'degam')
quantityUnitOfMeasureAttType.degam30 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/m(30)', tag=u'degam30')
quantityUnitOfMeasureAttType.degamin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/min', tag=u'degamin')
quantityUnitOfMeasureAttType.degas = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dega/s', tag=u'degas')
quantityUnitOfMeasureAttType.degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC', tag=u'degC')
quantityUnitOfMeasureAttType.degC_m2_hkcal = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC.m2.h/kcal', tag=u'degC_m2_hkcal')
quantityUnitOfMeasureAttType.degC100m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC/100m', tag=u'degC100m')
quantityUnitOfMeasureAttType.degCft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC/ft', tag=u'degCft')
quantityUnitOfMeasureAttType.degCh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC/h', tag=u'degCh')
quantityUnitOfMeasureAttType.degCkm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC/km', tag=u'degCkm')
quantityUnitOfMeasureAttType.degCm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC/m', tag=u'degCm')
quantityUnitOfMeasureAttType.degCmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC/min', tag=u'degCmin')
quantityUnitOfMeasureAttType.degCs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degC/s', tag=u'degCs')
quantityUnitOfMeasureAttType.degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF', tag=u'degF')
quantityUnitOfMeasureAttType.degF_ft2_hBtu = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF.ft2.h/Btu', tag=u'degF_ft2_hBtu')
quantityUnitOfMeasureAttType.degF100ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF/100ft', tag=u'degF100ft')
quantityUnitOfMeasureAttType.degFft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF/ft', tag=u'degFft')
quantityUnitOfMeasureAttType.degFft100 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF/ft(100)', tag=u'degFft100')
quantityUnitOfMeasureAttType.degFh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF/h', tag=u'degFh')
quantityUnitOfMeasureAttType.degFm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF/m', tag=u'degFm')
quantityUnitOfMeasureAttType.degFmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF/min', tag=u'degFmin')
quantityUnitOfMeasureAttType.degFs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degF/s', tag=u'degFs')
quantityUnitOfMeasureAttType.degR = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'degR', tag=u'degR')
quantityUnitOfMeasureAttType.dL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dL', tag=u'dL')
quantityUnitOfMeasureAttType.dm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm', tag=u'dm')
quantityUnitOfMeasureAttType.dms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm/s', tag=u'dms')
quantityUnitOfMeasureAttType.dm3_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3', tag=u'dm3_')
quantityUnitOfMeasureAttType.dm3100km = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/100km', tag=u'dm3100km')
quantityUnitOfMeasureAttType.dm3kg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/kg', tag=u'dm3kg')
quantityUnitOfMeasureAttType.dm3km100 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/km(100)', tag=u'dm3km100')
quantityUnitOfMeasureAttType.dm3kW_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/kW.h', tag=u'dm3kW_h')
quantityUnitOfMeasureAttType.dm3m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/m', tag=u'dm3m')
quantityUnitOfMeasureAttType.dm3m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/m3', tag=u'dm3m3')
quantityUnitOfMeasureAttType.dm3MJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/MJ', tag=u'dm3MJ')
quantityUnitOfMeasureAttType.dm3molkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/mol(kg)', tag=u'dm3molkg')
quantityUnitOfMeasureAttType.dm3s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/s', tag=u'dm3s')
quantityUnitOfMeasureAttType.dm3s2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/s2', tag=u'dm3s2')
quantityUnitOfMeasureAttType.dm3t = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dm3/t', tag=u'dm3t')
quantityUnitOfMeasureAttType.dN_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dN.m', tag=u'dN_m')
quantityUnitOfMeasureAttType.dyne = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dyne', tag=u'dyne')
quantityUnitOfMeasureAttType.dyne_cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dyne.cm2', tag=u'dyne_cm2')
quantityUnitOfMeasureAttType.dyne_scm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dyne.s/cm2', tag=u'dyne_scm2')
quantityUnitOfMeasureAttType.dynecm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dyne/cm', tag=u'dynecm')
quantityUnitOfMeasureAttType.dynecm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dyne/cm2', tag=u'dynecm2')
quantityUnitOfMeasureAttType.dynecm4gcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'(dyne/cm)4/gcm3', tag=u'dynecm4gcm3')
quantityUnitOfMeasureAttType.Nm4kg_m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'(N/m)4/kg.m3', tag=u'Nm4kg_m3')
quantityUnitOfMeasureAttType.ehp = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ehp', tag=u'ehp')
quantityUnitOfMeasureAttType.EJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'EJ', tag=u'EJ')
quantityUnitOfMeasureAttType.EJa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'EJ/a', tag=u'EJa')
quantityUnitOfMeasureAttType.eqL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'eq/L', tag=u'eqL')
quantityUnitOfMeasureAttType.erg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'erg', tag=u'erg')
quantityUnitOfMeasureAttType.erga = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'erg/a', tag=u'erga')
quantityUnitOfMeasureAttType.ergcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'erg/cm2', tag=u'ergcm2')
quantityUnitOfMeasureAttType.ergcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'erg/cm3', tag=u'ergcm3')
quantityUnitOfMeasureAttType.ergg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'erg/g', tag=u'ergg')
quantityUnitOfMeasureAttType.ergkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'erg/kg', tag=u'ergkg')
quantityUnitOfMeasureAttType.ergm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'erg/m3', tag=u'ergm3')
quantityUnitOfMeasureAttType.eV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'eV', tag=u'eV')
quantityUnitOfMeasureAttType.fathom = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'fathom', tag=u'fathom')
quantityUnitOfMeasureAttType.fC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'fC', tag=u'fC')
quantityUnitOfMeasureAttType.fl_ozUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'fl ozUK', tag=u'fl_ozUK')
quantityUnitOfMeasureAttType.fl_ozUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'fl ozUS', tag=u'fl_ozUS')
quantityUnitOfMeasureAttType.flops = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'flops', tag=u'flops')
quantityUnitOfMeasureAttType.flozUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'flozUK', tag=u'flozUK')
quantityUnitOfMeasureAttType.flozUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'flozUS', tag=u'flozUS')
quantityUnitOfMeasureAttType.fm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'fm', tag=u'fm')
quantityUnitOfMeasureAttType.footcandle = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'footcandle', tag=u'footcandle')
quantityUnitOfMeasureAttType.footcandle_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'footcandle.s', tag=u'footcandle_s')
quantityUnitOfMeasureAttType.ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft', tag=u'ft')
quantityUnitOfMeasureAttType.ft_lbf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft.lbf', tag=u'ft_lbf')
quantityUnitOfMeasureAttType.ft_lbfbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft.lbf/bbl', tag=u'ft_lbfbbl')
quantityUnitOfMeasureAttType.ft_lbfgalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft.lbf/galUS', tag=u'ft_lbfgalUS')
quantityUnitOfMeasureAttType.ft_lbflbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft.lbf/lbm', tag=u'ft_lbflbm')
quantityUnitOfMeasureAttType.ft_lbfmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft.lbf/min', tag=u'ft_lbfmin')
quantityUnitOfMeasureAttType.ft_lbfs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft.lbf/s', tag=u'ft_lbfs')
quantityUnitOfMeasureAttType.ft_lbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft.lbm', tag=u'ft_lbm')
quantityUnitOfMeasureAttType.ft100ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/100ft', tag=u'ft100ft')
quantityUnitOfMeasureAttType.ftbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/bbl', tag=u'ftbbl')
quantityUnitOfMeasureAttType.ftd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/d', tag=u'ftd')
quantityUnitOfMeasureAttType.ftdegF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/degF', tag=u'ftdegF')
quantityUnitOfMeasureAttType.ftft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/ft', tag=u'ftft')
quantityUnitOfMeasureAttType.ftft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/ft3', tag=u'ftft3')
quantityUnitOfMeasureAttType.ftgalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/galUS', tag=u'ftgalUS')
quantityUnitOfMeasureAttType.fth = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/h', tag=u'fth')
quantityUnitOfMeasureAttType.ftin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/in', tag=u'ftin')
quantityUnitOfMeasureAttType.ftm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/m', tag=u'ftm')
quantityUnitOfMeasureAttType.ftmi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/mi', tag=u'ftmi')
quantityUnitOfMeasureAttType.ftmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/min', tag=u'ftmin')
quantityUnitOfMeasureAttType.ftms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/ms', tag=u'ftms')
quantityUnitOfMeasureAttType.fts = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/s', tag=u'fts')
quantityUnitOfMeasureAttType.fts2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/s2', tag=u'fts2')
quantityUnitOfMeasureAttType.ftus = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft/us', tag=u'ftus')
quantityUnitOfMeasureAttType.ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft2', tag=u'ft2')
quantityUnitOfMeasureAttType.ft2h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft2/h', tag=u'ft2h')
quantityUnitOfMeasureAttType.ft2in3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft2/in3', tag=u'ft2in3')
quantityUnitOfMeasureAttType.ft2s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft2/s', tag=u'ft2s')
quantityUnitOfMeasureAttType.ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3', tag=u'ft3')
quantityUnitOfMeasureAttType.ft3std60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3(std,60F)', tag=u'ft3std60F')
quantityUnitOfMeasureAttType.ft3bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/bbl', tag=u'ft3bbl')
quantityUnitOfMeasureAttType.ft3d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/d', tag=u'ft3d')
quantityUnitOfMeasureAttType.ft3d_ft_psi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/d.ft.psi', tag=u'ft3d_ft_psi')
quantityUnitOfMeasureAttType.ft3d2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/d2', tag=u'ft3d2')
quantityUnitOfMeasureAttType.ft3ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/ft', tag=u'ft3ft')
quantityUnitOfMeasureAttType.ft3ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/ft3', tag=u'ft3ft3')
quantityUnitOfMeasureAttType.ft3h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/h', tag=u'ft3h')
quantityUnitOfMeasureAttType.ft3h2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/h2', tag=u'ft3h2')
quantityUnitOfMeasureAttType.ft3kg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/kg', tag=u'ft3kg')
quantityUnitOfMeasureAttType.ft3lbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/lbm', tag=u'ft3lbm')
quantityUnitOfMeasureAttType.ft3min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/min', tag=u'ft3min')
quantityUnitOfMeasureAttType.ft3min_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/min.ft2', tag=u'ft3min_ft2')
quantityUnitOfMeasureAttType.ft3min2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/min2', tag=u'ft3min2')
quantityUnitOfMeasureAttType.ft3mollbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/mol(lbm)', tag=u'ft3mollbm')
quantityUnitOfMeasureAttType.ft3s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/s', tag=u'ft3s')
quantityUnitOfMeasureAttType.ft3s_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/s.ft2', tag=u'ft3s_ft2')
quantityUnitOfMeasureAttType.ft3s2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/s2', tag=u'ft3s2')
quantityUnitOfMeasureAttType.ft3sack94 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/sack94', tag=u'ft3sack94')
quantityUnitOfMeasureAttType.ft3scf60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ft3/scf(60F)', tag=u'ft3scf60F')
quantityUnitOfMeasureAttType.ftBnA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftBnA', tag=u'ftBnA')
quantityUnitOfMeasureAttType.ftBnB = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftBnB', tag=u'ftBnB')
quantityUnitOfMeasureAttType.ftBr65 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftBr(65)', tag=u'ftBr65')
quantityUnitOfMeasureAttType.ftCla = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftCla', tag=u'ftCla')
quantityUnitOfMeasureAttType.ftGC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftGC', tag=u'ftGC')
quantityUnitOfMeasureAttType.ftInd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftInd', tag=u'ftInd')
quantityUnitOfMeasureAttType.ftInd37 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftInd(37)', tag=u'ftInd37')
quantityUnitOfMeasureAttType.ftInd62 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftInd(62)', tag=u'ftInd62')
quantityUnitOfMeasureAttType.ftInd75 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftInd(75)', tag=u'ftInd75')
quantityUnitOfMeasureAttType.ftMA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftMA', tag=u'ftMA')
quantityUnitOfMeasureAttType.ftSe = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftSe', tag=u'ftSe')
quantityUnitOfMeasureAttType.ftUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ftUS', tag=u'ftUS')
quantityUnitOfMeasureAttType.g = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g', tag=u'g')
quantityUnitOfMeasureAttType.g_ftcm3_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g.ft/cm3.s', tag=u'g_ftcm3_s')
quantityUnitOfMeasureAttType.gcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/cm3', tag=u'gcm3')
quantityUnitOfMeasureAttType.gcm4 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/cm4', tag=u'gcm4')
quantityUnitOfMeasureAttType.gdm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/dm3', tag=u'gdm3')
quantityUnitOfMeasureAttType.ggalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/galUK', tag=u'ggalUK')
quantityUnitOfMeasureAttType.ggalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/galUS', tag=u'ggalUS')
quantityUnitOfMeasureAttType.gkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/kg', tag=u'gkg')
quantityUnitOfMeasureAttType.gL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/L', tag=u'gL')
quantityUnitOfMeasureAttType.gm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/m3', tag=u'gm3')
quantityUnitOfMeasureAttType.gs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'g/s', tag=u'gs')
quantityUnitOfMeasureAttType.Ga = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Ga', tag=u'Ga')
quantityUnitOfMeasureAttType.Gal = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Gal', tag=u'Gal')
quantityUnitOfMeasureAttType.galsack = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gal/sack', tag=u'galsack')
quantityUnitOfMeasureAttType.galUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK', tag=u'galUK')
quantityUnitOfMeasureAttType.galUKd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/d', tag=u'galUKd')
quantityUnitOfMeasureAttType.galUKft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/ft3', tag=u'galUKft3')
quantityUnitOfMeasureAttType.galUKhr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/hr', tag=u'galUKhr')
quantityUnitOfMeasureAttType.galUKhr_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/hr.ft', tag=u'galUKhr_ft')
quantityUnitOfMeasureAttType.galUKhr_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/hr.ft2', tag=u'galUKhr_ft2')
quantityUnitOfMeasureAttType.galUKhr_in = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/hr.in', tag=u'galUKhr_in')
quantityUnitOfMeasureAttType.galUKhr_in2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/hr.in2', tag=u'galUKhr_in2')
quantityUnitOfMeasureAttType.galUKhr2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/hr2', tag=u'galUKhr2')
quantityUnitOfMeasureAttType.galUKkgalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/kgalUK', tag=u'galUKkgalUK')
quantityUnitOfMeasureAttType.galUKlbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/lbm', tag=u'galUKlbm')
quantityUnitOfMeasureAttType.galUKMbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/Mbbl', tag=u'galUKMbbl')
quantityUnitOfMeasureAttType.galUKmi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/mi', tag=u'galUKmi')
quantityUnitOfMeasureAttType.galUKmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/min', tag=u'galUKmin')
quantityUnitOfMeasureAttType.galUKmin_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/min.ft', tag=u'galUKmin_ft')
quantityUnitOfMeasureAttType.galUKmin_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/min.ft2', tag=u'galUKmin_ft2')
quantityUnitOfMeasureAttType.galUKmin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUK/min2', tag=u'galUKmin2')
quantityUnitOfMeasureAttType.galUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS', tag=u'galUS')
quantityUnitOfMeasureAttType.galUS10bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/10bbl', tag=u'galUS10bbl')
quantityUnitOfMeasureAttType.galUSbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/bbl', tag=u'galUSbbl')
quantityUnitOfMeasureAttType.galUSd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/d', tag=u'galUSd')
quantityUnitOfMeasureAttType.galUSft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/ft', tag=u'galUSft')
quantityUnitOfMeasureAttType.galUSft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/ft3', tag=u'galUSft3')
quantityUnitOfMeasureAttType.galUShr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/hr', tag=u'galUShr')
quantityUnitOfMeasureAttType.galUShr_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/hr.ft', tag=u'galUShr_ft')
quantityUnitOfMeasureAttType.galUShr_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/hr.ft2', tag=u'galUShr_ft2')
quantityUnitOfMeasureAttType.galUShr_in = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/hr.in', tag=u'galUShr_in')
quantityUnitOfMeasureAttType.galUShr_in2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/hr.in2', tag=u'galUShr_in2')
quantityUnitOfMeasureAttType.galUShr2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/hr2', tag=u'galUShr2')
quantityUnitOfMeasureAttType.galUSkgalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/kgalUS', tag=u'galUSkgalUS')
quantityUnitOfMeasureAttType.galUSlbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/lbm', tag=u'galUSlbm')
quantityUnitOfMeasureAttType.galUSMbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/Mbbl', tag=u'galUSMbbl')
quantityUnitOfMeasureAttType.galUSmi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/mi', tag=u'galUSmi')
quantityUnitOfMeasureAttType.galUSmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/min', tag=u'galUSmin')
quantityUnitOfMeasureAttType.galUSmin_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/min.ft', tag=u'galUSmin_ft')
quantityUnitOfMeasureAttType.galUSmin_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/min.ft2', tag=u'galUSmin_ft2')
quantityUnitOfMeasureAttType.galUSmin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/min2', tag=u'galUSmin2')
quantityUnitOfMeasureAttType.galUSMscf60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/Mscf(60F)', tag=u'galUSMscf60F')
quantityUnitOfMeasureAttType.galUSsack94 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/sack94', tag=u'galUSsack94')
quantityUnitOfMeasureAttType.galUStonUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/tonUK', tag=u'galUStonUK')
quantityUnitOfMeasureAttType.galUStonUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'galUS/tonUS', tag=u'galUStonUS')
quantityUnitOfMeasureAttType.gamma = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gamma', tag=u'gamma')
quantityUnitOfMeasureAttType.gauss = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gauss', tag=u'gauss')
quantityUnitOfMeasureAttType.GBq = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GBq', tag=u'GBq')
quantityUnitOfMeasureAttType.GeV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GeV', tag=u'GeV')
quantityUnitOfMeasureAttType.gf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gf', tag=u'gf')
quantityUnitOfMeasureAttType.GHz = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GHz', tag=u'GHz')
quantityUnitOfMeasureAttType.GJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GJ', tag=u'GJ')
quantityUnitOfMeasureAttType.gn = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gn', tag=u'gn')
quantityUnitOfMeasureAttType.Gohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Gohm', tag=u'Gohm')
quantityUnitOfMeasureAttType.gon = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gon', tag=u'gon')
quantityUnitOfMeasureAttType.GPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GPa', tag=u'GPa')
quantityUnitOfMeasureAttType.GPacm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GPa/cm', tag=u'GPacm')
quantityUnitOfMeasureAttType.GPa2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GPa2', tag=u'GPa2')
quantityUnitOfMeasureAttType.gr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'gr', tag=u'gr')
quantityUnitOfMeasureAttType.Grad = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Grad', tag=u'Grad')
quantityUnitOfMeasureAttType.grain = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'grain', tag=u'grain')
quantityUnitOfMeasureAttType.grain100ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'grain/100ft3', tag=u'grain100ft3')
quantityUnitOfMeasureAttType.grainft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'grain/ft3', tag=u'grainft3')
quantityUnitOfMeasureAttType.grainft3100 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'grain/ft3(100)', tag=u'grainft3100')
quantityUnitOfMeasureAttType.graingalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'grain/galUS', tag=u'graingalUS')
quantityUnitOfMeasureAttType.GS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GS', tag=u'GS')
quantityUnitOfMeasureAttType.Gsm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Gsm3', tag=u'Gsm3')
quantityUnitOfMeasureAttType.GW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GW', tag=u'GW')
quantityUnitOfMeasureAttType.GW_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'GW.h', tag=u'GW_h')
quantityUnitOfMeasureAttType.h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'h', tag=u'h')
quantityUnitOfMeasureAttType.hft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'h/ft3', tag=u'hft3')
quantityUnitOfMeasureAttType.hkft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'h/kft', tag=u'hkft')
quantityUnitOfMeasureAttType.hkm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'h/km', tag=u'hkm')
quantityUnitOfMeasureAttType.hm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'h/m3', tag=u'hm3')
quantityUnitOfMeasureAttType.ha = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ha', tag=u'ha')
quantityUnitOfMeasureAttType.ha_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ha.m', tag=u'ha_m')
quantityUnitOfMeasureAttType.hbar = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hbar', tag=u'hbar')
quantityUnitOfMeasureAttType.hhp = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hhp', tag=u'hhp')
quantityUnitOfMeasureAttType.hhpin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hhp/in2', tag=u'hhpin2')
quantityUnitOfMeasureAttType.hL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hL', tag=u'hL')
quantityUnitOfMeasureAttType.hp = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hp', tag=u'hp')
quantityUnitOfMeasureAttType.hPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hPa', tag=u'hPa')
quantityUnitOfMeasureAttType.hp_hr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hp.hr', tag=u'hp_hr')
quantityUnitOfMeasureAttType.hp_hrbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hp.hr/bbl', tag=u'hp_hrbbl')
quantityUnitOfMeasureAttType.hp_hrlbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hp.hr/lbm', tag=u'hp_hrlbm')
quantityUnitOfMeasureAttType.hpft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hp/ft3', tag=u'hpft3')
quantityUnitOfMeasureAttType.hpin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hp/in2', tag=u'hpin2')
quantityUnitOfMeasureAttType.hs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'hs', tag=u'hs')
quantityUnitOfMeasureAttType.in_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in', tag=u'in_')
quantityUnitOfMeasureAttType.in10 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/10', tag=u'in10')
quantityUnitOfMeasureAttType.in16 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/16', tag=u'in16')
quantityUnitOfMeasureAttType.in32 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/32', tag=u'in32')
quantityUnitOfMeasureAttType.in64 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/64', tag=u'in64')
quantityUnitOfMeasureAttType.ina = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/a', tag=u'ina')
quantityUnitOfMeasureAttType.inin_degF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/in.degF', tag=u'inin_degF')
quantityUnitOfMeasureAttType.inmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/min', tag=u'inmin')
quantityUnitOfMeasureAttType.ins = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in/s', tag=u'ins')
quantityUnitOfMeasureAttType.in2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in2', tag=u'in2')
quantityUnitOfMeasureAttType.in2ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in2/ft2', tag=u'in2ft2')
quantityUnitOfMeasureAttType.in2in2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in2/in2', tag=u'in2in2')
quantityUnitOfMeasureAttType.in2s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in2/s', tag=u'in2s')
quantityUnitOfMeasureAttType.in3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in3', tag=u'in3')
quantityUnitOfMeasureAttType.in3ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in3/ft', tag=u'in3ft')
quantityUnitOfMeasureAttType.in4 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'in4', tag=u'in4')
quantityUnitOfMeasureAttType.inH2O39_2F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'inH2O(39.2F)', tag=u'inH2O39_2F')
quantityUnitOfMeasureAttType.inH2O60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'inH2O(60F)', tag=u'inH2O60F')
quantityUnitOfMeasureAttType.inHg32F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'inHg(32F)', tag=u'inHg32F')
quantityUnitOfMeasureAttType.inHg60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'inHg(60F)', tag=u'inHg60F')
quantityUnitOfMeasureAttType.inUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'inUS', tag=u'inUS')
quantityUnitOfMeasureAttType.Jcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/cm2', tag=u'Jcm2')
quantityUnitOfMeasureAttType.Jdm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/dm3', tag=u'Jdm3')
quantityUnitOfMeasureAttType.Jg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/g', tag=u'Jg')
quantityUnitOfMeasureAttType.Jg_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/g.K', tag=u'Jg_K')
quantityUnitOfMeasureAttType.Jm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/m', tag=u'Jm')
quantityUnitOfMeasureAttType.Jm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/m2', tag=u'Jm2')
quantityUnitOfMeasureAttType.Js_m2_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'J/s.m2.degC', tag=u'Js_m2_degC')
quantityUnitOfMeasureAttType.K_m2kW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'K.m2/kW', tag=u'K_m2kW')
quantityUnitOfMeasureAttType.kA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kA', tag=u'kA')
quantityUnitOfMeasureAttType.kbbld = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kbbl/d', tag=u'kbbld')
quantityUnitOfMeasureAttType.kbyte = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kbyte', tag=u'kbyte')
quantityUnitOfMeasureAttType.kC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kC', tag=u'kC')
quantityUnitOfMeasureAttType.kcal = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal', tag=u'kcal')
quantityUnitOfMeasureAttType.kcal_mcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal.m/cm2', tag=u'kcal_mcm2')
quantityUnitOfMeasureAttType.kcalcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/cm3', tag=u'kcalcm3')
quantityUnitOfMeasureAttType.kcalg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/g', tag=u'kcalg')
quantityUnitOfMeasureAttType.kcalh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/h', tag=u'kcalh')
quantityUnitOfMeasureAttType.kcalh_m_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/h.m.degC', tag=u'kcalh_m_degC')
quantityUnitOfMeasureAttType.kcalh_m2_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/h.m2.degC', tag=u'kcalh_m2_degC')
quantityUnitOfMeasureAttType.kcalkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/kg', tag=u'kcalkg')
quantityUnitOfMeasureAttType.kcalkg_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/kg.degC', tag=u'kcalkg_degC')
quantityUnitOfMeasureAttType.kcalm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/m3', tag=u'kcalm3')
quantityUnitOfMeasureAttType.kcalmolg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcal/mol(g)', tag=u'kcalmolg')
quantityUnitOfMeasureAttType.kcd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kcd', tag=u'kcd')
quantityUnitOfMeasureAttType.kdyne = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kdyne', tag=u'kdyne')
quantityUnitOfMeasureAttType.kEucs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kEuc/s', tag=u'kEucs')
quantityUnitOfMeasureAttType.keV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'keV', tag=u'keV')
quantityUnitOfMeasureAttType.kft_lbf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kft.lbf', tag=u'kft_lbf')
quantityUnitOfMeasureAttType.kfth = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kft/h', tag=u'kfth')
quantityUnitOfMeasureAttType.kfts = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kft/s', tag=u'kfts')
quantityUnitOfMeasureAttType.kg_mcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg.m/cm2', tag=u'kg_mcm2')
quantityUnitOfMeasureAttType.kgd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/d', tag=u'kgd')
quantityUnitOfMeasureAttType.kgdm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/dm3', tag=u'kgdm3')
quantityUnitOfMeasureAttType.kgdm4 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/dm4', tag=u'kgdm4')
quantityUnitOfMeasureAttType.kgh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/h', tag=u'kgh')
quantityUnitOfMeasureAttType.kgkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/kg', tag=u'kgkg')
quantityUnitOfMeasureAttType.kgkW_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/kW.h', tag=u'kgkW_h')
quantityUnitOfMeasureAttType.kgL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/L', tag=u'kgL')
quantityUnitOfMeasureAttType.kgm_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/m.s', tag=u'kgm_s')
quantityUnitOfMeasureAttType.kgmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/min', tag=u'kgmin')
quantityUnitOfMeasureAttType.kgMJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/MJ', tag=u'kgMJ')
quantityUnitOfMeasureAttType.kgsack94 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kg/sack94', tag=u'kgsack94')
quantityUnitOfMeasureAttType.kgf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf', tag=u'kgf')
quantityUnitOfMeasureAttType.kgf_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf.m', tag=u'kgf_m')
quantityUnitOfMeasureAttType.kgf_mcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf.m/cm2', tag=u'kgf_mcm2')
quantityUnitOfMeasureAttType.kgf_mm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf.m/m', tag=u'kgf_mm')
quantityUnitOfMeasureAttType.kgf_m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf.m2', tag=u'kgf_m2')
quantityUnitOfMeasureAttType.kgf_sm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf.s/m2', tag=u'kgf_sm2')
quantityUnitOfMeasureAttType.kgfcm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf/cm', tag=u'kgfcm')
quantityUnitOfMeasureAttType.kgfcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf/cm2', tag=u'kgfcm2')
quantityUnitOfMeasureAttType.kgfkgf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf/kgf', tag=u'kgfkgf')
quantityUnitOfMeasureAttType.kgfmm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kgf/mm2', tag=u'kgfmm2')
quantityUnitOfMeasureAttType.kHz = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kHz', tag=u'kHz')
quantityUnitOfMeasureAttType.kJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ', tag=u'kJ')
quantityUnitOfMeasureAttType.kJ_mh_m2_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ.m/h.m2.K', tag=u'kJ_mh_m2_K')
quantityUnitOfMeasureAttType.kJdm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ/dm3', tag=u'kJdm3')
quantityUnitOfMeasureAttType.kJh_m2_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ/h.m2.K', tag=u'kJh_m2_K')
quantityUnitOfMeasureAttType.kJkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ/kg', tag=u'kJkg')
quantityUnitOfMeasureAttType.kJkg_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ/kg.K', tag=u'kJkg_K')
quantityUnitOfMeasureAttType.kJm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ/m3', tag=u'kJm3')
quantityUnitOfMeasureAttType.kJmolkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ/mol(kg)', tag=u'kJmolkg')
quantityUnitOfMeasureAttType.kJmolkg_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kJ/mol(kg).K', tag=u'kJmolkg_K')
quantityUnitOfMeasureAttType.klbf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'klbf', tag=u'klbf')
quantityUnitOfMeasureAttType.klbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'klbm', tag=u'klbm')
quantityUnitOfMeasureAttType.klbmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'klbm/in', tag=u'klbmin')
quantityUnitOfMeasureAttType.klx = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'klx', tag=u'klx')
quantityUnitOfMeasureAttType.km = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km', tag=u'km')
quantityUnitOfMeasureAttType.kmcm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km/cm', tag=u'kmcm')
quantityUnitOfMeasureAttType.kmdm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km/dm3', tag=u'kmdm3')
quantityUnitOfMeasureAttType.kmh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km/h', tag=u'kmh')
quantityUnitOfMeasureAttType.kmL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km/L', tag=u'kmL')
quantityUnitOfMeasureAttType.kms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km/s', tag=u'kms')
quantityUnitOfMeasureAttType.km2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km2', tag=u'km2')
quantityUnitOfMeasureAttType.km3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'km3', tag=u'km3')
quantityUnitOfMeasureAttType.kmol = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kmol', tag=u'kmol')
quantityUnitOfMeasureAttType.kN = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kN', tag=u'kN')
quantityUnitOfMeasureAttType.kN_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kN.m', tag=u'kN_m')
quantityUnitOfMeasureAttType.kN_m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kN.m2', tag=u'kN_m2')
quantityUnitOfMeasureAttType.kNm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kN/m', tag=u'kNm')
quantityUnitOfMeasureAttType.kNm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kN/m2', tag=u'kNm2')
quantityUnitOfMeasureAttType.knot = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'knot', tag=u'knot')
quantityUnitOfMeasureAttType.kohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kohm', tag=u'kohm')
quantityUnitOfMeasureAttType.kohm_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kohm.m', tag=u'kohm_m')
quantityUnitOfMeasureAttType.kPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa', tag=u'kPa')
quantityUnitOfMeasureAttType.kPa_sm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa.s/m', tag=u'kPa_sm')
quantityUnitOfMeasureAttType.kPa100m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa/100m', tag=u'kPa100m')
quantityUnitOfMeasureAttType.kPah = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa/h', tag=u'kPah')
quantityUnitOfMeasureAttType.kPam = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa/m', tag=u'kPam')
quantityUnitOfMeasureAttType.kPamin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa/min', tag=u'kPamin')
quantityUnitOfMeasureAttType.kPa2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa2', tag=u'kPa2')
quantityUnitOfMeasureAttType.kPa2cP = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa2/cP', tag=u'kPa2cP')
quantityUnitOfMeasureAttType.kPa2kcP = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kPa2/kcP', tag=u'kPa2kcP')
quantityUnitOfMeasureAttType.kpsi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kpsi', tag=u'kpsi')
quantityUnitOfMeasureAttType.kpsi2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kpsi2', tag=u'kpsi2')
quantityUnitOfMeasureAttType.krad = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'krad', tag=u'krad')
quantityUnitOfMeasureAttType.kS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kS', tag=u'kS')
quantityUnitOfMeasureAttType.ksm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ksm3', tag=u'ksm3')
quantityUnitOfMeasureAttType.ksm3d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ksm3/d', tag=u'ksm3d')
quantityUnitOfMeasureAttType.ksm3sm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ksm3/sm3', tag=u'ksm3sm3')
quantityUnitOfMeasureAttType.kV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kV', tag=u'kV')
quantityUnitOfMeasureAttType.kW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW', tag=u'kW')
quantityUnitOfMeasureAttType.kW_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW.h', tag=u'kW_h')
quantityUnitOfMeasureAttType.kW_hdm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW.h/dm3', tag=u'kW_hdm3')
quantityUnitOfMeasureAttType.kW_hkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW.h/kg', tag=u'kW_hkg')
quantityUnitOfMeasureAttType.kW_hkg_degC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW.h/kg.degC', tag=u'kW_hkg_degC')
quantityUnitOfMeasureAttType.kW_hm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW.h/m3', tag=u'kW_hm3')
quantityUnitOfMeasureAttType.kWcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW/cm2', tag=u'kWcm2')
quantityUnitOfMeasureAttType.kWm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW/m2', tag=u'kWm2')
quantityUnitOfMeasureAttType.kWm2_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW/m2.K', tag=u'kWm2_K')
quantityUnitOfMeasureAttType.kWm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW/m3', tag=u'kWm3')
quantityUnitOfMeasureAttType.kWm3_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'kW/m3.K', tag=u'kWm3_K')
quantityUnitOfMeasureAttType.L = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L', tag=u'L')
quantityUnitOfMeasureAttType.cL_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'cL', tag=u'cL_')
quantityUnitOfMeasureAttType.dL_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'dL', tag=u'dL_')
quantityUnitOfMeasureAttType.L100kg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/100kg', tag=u'L100kg')
quantityUnitOfMeasureAttType.L100km = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/100km', tag=u'L100km')
quantityUnitOfMeasureAttType.L10bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/10bbl', tag=u'L10bbl')
quantityUnitOfMeasureAttType.Lbar_min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/bar.min', tag=u'Lbar_min')
quantityUnitOfMeasureAttType.Lh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/h', tag=u'Lh')
quantityUnitOfMeasureAttType.Lkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/kg', tag=u'Lkg')
quantityUnitOfMeasureAttType.Lkm100 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/km(100)', tag=u'Lkm100')
quantityUnitOfMeasureAttType.Lm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/m', tag=u'Lm')
quantityUnitOfMeasureAttType.Lm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/m3', tag=u'Lm3')
quantityUnitOfMeasureAttType.Lmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/min', tag=u'Lmin')
quantityUnitOfMeasureAttType.Lmolg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/mol(g)', tag=u'Lmolg')
quantityUnitOfMeasureAttType.Lmolkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/mol(kg)', tag=u'Lmolkg')
quantityUnitOfMeasureAttType.Ls = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/s', tag=u'Ls')
quantityUnitOfMeasureAttType.Ls2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/s2', tag=u'Ls2')
quantityUnitOfMeasureAttType.Lt = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/t', tag=u'Lt')
quantityUnitOfMeasureAttType.LtonUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'L/tonUK', tag=u'LtonUK')
quantityUnitOfMeasureAttType.lbf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf', tag=u'lbf')
quantityUnitOfMeasureAttType.lbf_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.ft', tag=u'lbf_ft')
quantityUnitOfMeasureAttType.lbf_ftbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.ft/bbl', tag=u'lbf_ftbbl')
quantityUnitOfMeasureAttType.lbf_ftin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.ft/in', tag=u'lbf_ftin')
quantityUnitOfMeasureAttType.lbf_ftin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.ft/in2', tag=u'lbf_ftin2')
quantityUnitOfMeasureAttType.lbf_ftlbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.ft/lbm', tag=u'lbf_ftlbm')
quantityUnitOfMeasureAttType.lbf_in = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.in', tag=u'lbf_in')
quantityUnitOfMeasureAttType.lbf_inin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.in/in', tag=u'lbf_inin')
quantityUnitOfMeasureAttType.lbf_in2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.in2', tag=u'lbf_in2')
quantityUnitOfMeasureAttType.lbf_sft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.s/ft2', tag=u'lbf_sft2')
quantityUnitOfMeasureAttType.lbf_sin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf.s/in2', tag=u'lbf_sin2')
quantityUnitOfMeasureAttType.lbf100ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/100ft', tag=u'lbf100ft')
quantityUnitOfMeasureAttType.lbf100ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/100ft2', tag=u'lbf100ft2')
quantityUnitOfMeasureAttType.lbf30m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/30m', tag=u'lbf30m')
quantityUnitOfMeasureAttType.lbfft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/ft', tag=u'lbfft')
quantityUnitOfMeasureAttType.lbfft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/ft2', tag=u'lbfft2')
quantityUnitOfMeasureAttType.lbfft2100 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/ft2(100)', tag=u'lbfft2100')
quantityUnitOfMeasureAttType.lbfft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/ft3', tag=u'lbfft3')
quantityUnitOfMeasureAttType.lbfgalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/galUS', tag=u'lbfgalUS')
quantityUnitOfMeasureAttType.lbfin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/in', tag=u'lbfin')
quantityUnitOfMeasureAttType.lbfin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/in2', tag=u'lbfin2')
quantityUnitOfMeasureAttType.lbflbf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbf/lbf', tag=u'lbflbf')
quantityUnitOfMeasureAttType.lbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm', tag=u'lbm')
quantityUnitOfMeasureAttType.lbm_fts = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm.ft/s', tag=u'lbm_fts')
quantityUnitOfMeasureAttType.lbm_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm.ft2', tag=u'lbm_ft2')
quantityUnitOfMeasureAttType.lbm_ft2s2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm.ft2/s2', tag=u'lbm_ft2s2')
quantityUnitOfMeasureAttType.lbmmillionyr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm(million)/yr', tag=u'lbmmillionyr')
quantityUnitOfMeasureAttType.lbm1000galUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/1000galUK', tag=u'lbm1000galUK')
quantityUnitOfMeasureAttType.lbm1000galUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/1000galUS', tag=u'lbm1000galUS')
quantityUnitOfMeasureAttType.lbm100ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/100ft2', tag=u'lbm100ft2')
quantityUnitOfMeasureAttType.lbm10bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/10bbl', tag=u'lbm10bbl')
quantityUnitOfMeasureAttType.lbmbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/bbl', tag=u'lbmbbl')
quantityUnitOfMeasureAttType.lbmd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/d', tag=u'lbmd')
quantityUnitOfMeasureAttType.lbmft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/ft', tag=u'lbmft')
quantityUnitOfMeasureAttType.lbmft_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/ft.h', tag=u'lbmft_h')
quantityUnitOfMeasureAttType.lbmft_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/ft.s', tag=u'lbmft_s')
quantityUnitOfMeasureAttType.lbmft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/ft2', tag=u'lbmft2')
quantityUnitOfMeasureAttType.lbmft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/ft3', tag=u'lbmft3')
quantityUnitOfMeasureAttType.lbmft4 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/ft4', tag=u'lbmft4')
quantityUnitOfMeasureAttType.lbmgalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/galUK', tag=u'lbmgalUK')
quantityUnitOfMeasureAttType.lbmgalUK_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/galUK.ft', tag=u'lbmgalUK_ft')
quantityUnitOfMeasureAttType.lbmgalUK1000 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/galUK(1000)', tag=u'lbmgalUK1000')
quantityUnitOfMeasureAttType.lbmgalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/galUS', tag=u'lbmgalUS')
quantityUnitOfMeasureAttType.lbmgalUS_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/galUS.ft', tag=u'lbmgalUS_ft')
quantityUnitOfMeasureAttType.lbmgalUS1000 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/galUS(1000)', tag=u'lbmgalUS1000')
quantityUnitOfMeasureAttType.lbmh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/h', tag=u'lbmh')
quantityUnitOfMeasureAttType.lbmh_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/h.ft', tag=u'lbmh_ft')
quantityUnitOfMeasureAttType.lbmh_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/h.ft2', tag=u'lbmh_ft2')
quantityUnitOfMeasureAttType.lbmhp_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/hp.h', tag=u'lbmhp_h')
quantityUnitOfMeasureAttType.lbmin3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/in3', tag=u'lbmin3')
quantityUnitOfMeasureAttType.lbmMbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/Mbbl', tag=u'lbmMbbl')
quantityUnitOfMeasureAttType.lbmmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/min', tag=u'lbmmin')
quantityUnitOfMeasureAttType.lbms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/s', tag=u'lbms')
quantityUnitOfMeasureAttType.lbms_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/s.ft', tag=u'lbms_ft')
quantityUnitOfMeasureAttType.lbms_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lbm/s.ft2', tag=u'lbms_ft2')
quantityUnitOfMeasureAttType.lkBnA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lkBnA', tag=u'lkBnA')
quantityUnitOfMeasureAttType.lkBnB = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lkBnB', tag=u'lkBnB')
quantityUnitOfMeasureAttType.lkCla = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lkCla', tag=u'lkCla')
quantityUnitOfMeasureAttType.lkSe = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lkSe', tag=u'lkSe')
quantityUnitOfMeasureAttType.lkUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lkUS', tag=u'lkUS')
quantityUnitOfMeasureAttType.lmm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'lm/m2', tag=u'lmm2')
quantityUnitOfMeasureAttType.Mft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'M(ft3)', tag=u'Mft3')
quantityUnitOfMeasureAttType.Mft3acre_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'M(ft3)/acre.ft', tag=u'Mft3acre_ft')
quantityUnitOfMeasureAttType.Mft3d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'M(ft3)/d', tag=u'Mft3d')
quantityUnitOfMeasureAttType.Mm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'M(m3)', tag=u'Mm3')
quantityUnitOfMeasureAttType.Mm3d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'M(m3)/d', tag=u'Mm3d')
quantityUnitOfMeasureAttType.m30m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/30m', tag=u'm30m')
quantityUnitOfMeasureAttType.mcm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/cm', tag=u'mcm')
quantityUnitOfMeasureAttType.md = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/d', tag=u'md')
quantityUnitOfMeasureAttType.mh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/h', tag=u'mh')
quantityUnitOfMeasureAttType.mkm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/km', tag=u'mkm')
quantityUnitOfMeasureAttType.mm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/m', tag=u'mm')
quantityUnitOfMeasureAttType.mm_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/m.K', tag=u'mm_K')
quantityUnitOfMeasureAttType.mm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/m3', tag=u'mm3')
quantityUnitOfMeasureAttType.mmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/min', tag=u'mmin')
quantityUnitOfMeasureAttType.mms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm/ms', tag=u'mms')
quantityUnitOfMeasureAttType.m2cm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/cm3', tag=u'm2cm3')
quantityUnitOfMeasureAttType.m2d_kPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/d.kPa', tag=u'm2d_kPa')
quantityUnitOfMeasureAttType.m2g = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/g', tag=u'm2g')
quantityUnitOfMeasureAttType.m2h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/h', tag=u'm2h')
quantityUnitOfMeasureAttType.m2m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/m2', tag=u'm2m2')
quantityUnitOfMeasureAttType.m2m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm2/m3', tag=u'm2m3')
quantityUnitOfMeasureAttType.m3std0C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3(std,0C)', tag=u'm3std0C')
quantityUnitOfMeasureAttType.m3std15C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3(std,15C)', tag=u'm3std15C')
quantityUnitOfMeasureAttType.m3bar_d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/bar.d', tag=u'm3bar_d')
quantityUnitOfMeasureAttType.m3bar_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/bar.h', tag=u'm3bar_h')
quantityUnitOfMeasureAttType.m3bar_min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/bar.min', tag=u'm3bar_min')
quantityUnitOfMeasureAttType.m3cP_d_kPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/cP.d.kPa', tag=u'm3cP_d_kPa')
quantityUnitOfMeasureAttType.m3cP_Pa_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/cP.Pa.s', tag=u'm3cP_Pa_s')
quantityUnitOfMeasureAttType.m3d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/d', tag=u'm3d')
quantityUnitOfMeasureAttType.m3d_kPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/d.kPa', tag=u'm3d_kPa')
quantityUnitOfMeasureAttType.m3d_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/d.m', tag=u'm3d_m')
quantityUnitOfMeasureAttType.m3d2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/d2', tag=u'm3d2')
quantityUnitOfMeasureAttType.m3g = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/g', tag=u'm3g')
quantityUnitOfMeasureAttType.m3h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/h', tag=u'm3h')
quantityUnitOfMeasureAttType.m3h_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/h.m', tag=u'm3h_m')
quantityUnitOfMeasureAttType.m3ha_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/ha.m', tag=u'm3ha_m')
quantityUnitOfMeasureAttType.m3km = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/km', tag=u'm3km')
quantityUnitOfMeasureAttType.m3kPa_d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/kPa.d', tag=u'm3kPa_d')
quantityUnitOfMeasureAttType.m3kPa_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/kPa.h', tag=u'm3kPa_h')
quantityUnitOfMeasureAttType.m3kW_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/kW.h', tag=u'm3kW_h')
quantityUnitOfMeasureAttType.m3m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/m', tag=u'm3m')
quantityUnitOfMeasureAttType.m3m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/m2', tag=u'm3m2')
quantityUnitOfMeasureAttType.m3m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/m3', tag=u'm3m3')
quantityUnitOfMeasureAttType.m3min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/min', tag=u'm3min')
quantityUnitOfMeasureAttType.m3molkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/mol(kg)', tag=u'm3molkg')
quantityUnitOfMeasureAttType.m3psi_d = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/psi.d', tag=u'm3psi_d')
quantityUnitOfMeasureAttType.m3s_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/s.ft', tag=u'm3s_ft')
quantityUnitOfMeasureAttType.m3s_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/s.m', tag=u'm3s_m')
quantityUnitOfMeasureAttType.m3s_m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/s.m2', tag=u'm3s_m2')
quantityUnitOfMeasureAttType.m3t = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/t', tag=u'm3t')
quantityUnitOfMeasureAttType.m3tonUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/tonUK', tag=u'm3tonUK')
quantityUnitOfMeasureAttType.m3tonUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'm3/tonUS', tag=u'm3tonUS')
quantityUnitOfMeasureAttType.mA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mA', tag=u'mA')
quantityUnitOfMeasureAttType.Ma = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Ma', tag=u'Ma')
quantityUnitOfMeasureAttType.MA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MA', tag=u'MA')
quantityUnitOfMeasureAttType.mAcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mA/cm2', tag=u'mAcm2')
quantityUnitOfMeasureAttType.mAft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mA/ft2', tag=u'mAft2')
quantityUnitOfMeasureAttType.mbar = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mbar', tag=u'mbar')
quantityUnitOfMeasureAttType.Mbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mbbl', tag=u'Mbbl')
quantityUnitOfMeasureAttType.Mbbl_ftd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mbbl.ft/d', tag=u'Mbbl_ftd')
quantityUnitOfMeasureAttType.Mbbld = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mbbl/d', tag=u'Mbbld')
quantityUnitOfMeasureAttType.MBq = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MBq', tag=u'MBq')
quantityUnitOfMeasureAttType.MBtuhr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MBtu/hr', tag=u'MBtuhr')
quantityUnitOfMeasureAttType.Mbyte = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mbyte', tag=u'Mbyte')
quantityUnitOfMeasureAttType.mC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mC', tag=u'mC')
quantityUnitOfMeasureAttType.mCm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mC/m2', tag=u'mCm2')
quantityUnitOfMeasureAttType.Mcf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mcf', tag=u'Mcf')
quantityUnitOfMeasureAttType.mCi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mCi', tag=u'mCi')
quantityUnitOfMeasureAttType.mcurie = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mcurie', tag=u'mcurie')
quantityUnitOfMeasureAttType.mD = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mD', tag=u'mD')
quantityUnitOfMeasureAttType.mD_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mD.ft', tag=u'mD_ft')
quantityUnitOfMeasureAttType.mD_ft2lbf_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mD.ft2/lbf.s', tag=u'mD_ft2lbf_s')
quantityUnitOfMeasureAttType.mD_in2lbf_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mD.in2/lbf.s', tag=u'mD_in2lbf_s')
quantityUnitOfMeasureAttType.mD_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mD.m', tag=u'mD_m')
quantityUnitOfMeasureAttType.mDcP = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mD/cP', tag=u'mDcP')
quantityUnitOfMeasureAttType.mDPa_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mD/Pa.s', tag=u'mDPa_s')
quantityUnitOfMeasureAttType.meq = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'meq', tag=u'meq')
quantityUnitOfMeasureAttType.meq100g = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'meq/100g', tag=u'meq100g')
quantityUnitOfMeasureAttType.meqcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'meq/cm3', tag=u'meqcm3')
quantityUnitOfMeasureAttType.meqg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'meq/g', tag=u'meqg')
quantityUnitOfMeasureAttType.mEuc = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mEuc', tag=u'mEuc')
quantityUnitOfMeasureAttType.MeV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MeV', tag=u'MeV')
quantityUnitOfMeasureAttType.Mflops = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mflops', tag=u'Mflops')
quantityUnitOfMeasureAttType.Mg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mg', tag=u'Mg')
quantityUnitOfMeasureAttType.mg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mg', tag=u'mg')
quantityUnitOfMeasureAttType.Mga = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mg/a', tag=u'Mga')
quantityUnitOfMeasureAttType.Mgd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mg/d', tag=u'Mgd')
quantityUnitOfMeasureAttType.mgdm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mg/dm3', tag=u'mgdm3')
quantityUnitOfMeasureAttType.mggalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mg/galUS', tag=u'mggalUS')
quantityUnitOfMeasureAttType.Mgh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mg/h', tag=u'Mgh')
quantityUnitOfMeasureAttType.Mgin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mg/in', tag=u'Mgin')
quantityUnitOfMeasureAttType.mgJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mg/J', tag=u'mgJ')
quantityUnitOfMeasureAttType.mgkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mg/kg', tag=u'mgkg')
quantityUnitOfMeasureAttType.mgL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mg/L', tag=u'mgL')
quantityUnitOfMeasureAttType.Mgm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mg/m2', tag=u'Mgm2')
quantityUnitOfMeasureAttType.mgm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mg/m3', tag=u'mgm3')
quantityUnitOfMeasureAttType.Mgm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mg/m3', tag=u'Mgm3')
quantityUnitOfMeasureAttType.mGal = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mGal', tag=u'mGal')
quantityUnitOfMeasureAttType.mgauss = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mgauss', tag=u'mgauss')
quantityUnitOfMeasureAttType.mGer = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mGer', tag=u'mGer')
quantityUnitOfMeasureAttType.Mgf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mgf', tag=u'Mgf')
quantityUnitOfMeasureAttType.mgn = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mgn', tag=u'mgn')
quantityUnitOfMeasureAttType.mGy = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mGy', tag=u'mGy')
quantityUnitOfMeasureAttType.mH = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mH', tag=u'mH')
quantityUnitOfMeasureAttType.mho = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mho', tag=u'mho')
quantityUnitOfMeasureAttType.mhom = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mho/m', tag=u'mhom')
quantityUnitOfMeasureAttType.MHz = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MHz', tag=u'MHz')
quantityUnitOfMeasureAttType.mHz = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mHz', tag=u'mHz')
quantityUnitOfMeasureAttType.mi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mi', tag=u'mi')
quantityUnitOfMeasureAttType.migalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mi/galUK', tag=u'migalUK')
quantityUnitOfMeasureAttType.migalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mi/galUS', tag=u'migalUS')
quantityUnitOfMeasureAttType.mih = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mi/h', tag=u'mih')
quantityUnitOfMeasureAttType.miin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mi/in', tag=u'miin')
quantityUnitOfMeasureAttType.mi2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mi2', tag=u'mi2')
quantityUnitOfMeasureAttType.mi3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mi3', tag=u'mi3')
quantityUnitOfMeasureAttType.mil = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mil', tag=u'mil')
quantityUnitOfMeasureAttType.milyr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mil/yr', tag=u'milyr')
quantityUnitOfMeasureAttType.mila = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mila', tag=u'mila')
quantityUnitOfMeasureAttType.min = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'min', tag=u'min')
quantityUnitOfMeasureAttType.minft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'min/ft', tag=u'minft')
quantityUnitOfMeasureAttType.minm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'min/m', tag=u'minm')
quantityUnitOfMeasureAttType.mina = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mina', tag=u'mina')
quantityUnitOfMeasureAttType.miUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'miUS', tag=u'miUS')
quantityUnitOfMeasureAttType.miUS2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'miUS2', tag=u'miUS2')
quantityUnitOfMeasureAttType.MJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MJ', tag=u'MJ')
quantityUnitOfMeasureAttType.mJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mJ', tag=u'mJ')
quantityUnitOfMeasureAttType.MJa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MJ/a', tag=u'MJa')
quantityUnitOfMeasureAttType.mJcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mJ/cm2', tag=u'mJcm2')
quantityUnitOfMeasureAttType.MJkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MJ/kg', tag=u'MJkg')
quantityUnitOfMeasureAttType.MJm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MJ/m', tag=u'MJm')
quantityUnitOfMeasureAttType.mJm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mJ/m2', tag=u'mJm2')
quantityUnitOfMeasureAttType.MJm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MJ/m3', tag=u'MJm3')
quantityUnitOfMeasureAttType.MJmolkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MJ/mol(kg)', tag=u'MJmolkg')
quantityUnitOfMeasureAttType.mKm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mK/m', tag=u'mKm')
quantityUnitOfMeasureAttType.mL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mL', tag=u'mL')
quantityUnitOfMeasureAttType.mLgalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mL/galUK', tag=u'mLgalUK')
quantityUnitOfMeasureAttType.mLgalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mL/galUS', tag=u'mLgalUS')
quantityUnitOfMeasureAttType.mLmL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mL/mL', tag=u'mLmL')
quantityUnitOfMeasureAttType.Mlbmyr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mlbm/yr', tag=u'Mlbmyr')
quantityUnitOfMeasureAttType.mm_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm', tag=u'mm_')
quantityUnitOfMeasureAttType.Mm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mm', tag=u'Mm')
quantityUnitOfMeasureAttType.mma = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm/a', tag=u'mma')
quantityUnitOfMeasureAttType.mmmm_K = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm/mm.K', tag=u'mmmm_K')
quantityUnitOfMeasureAttType.mms_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm/s', tag=u'mms_')
quantityUnitOfMeasureAttType.mm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm2', tag=u'mm2')
quantityUnitOfMeasureAttType.mm2mm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm2/mm2', tag=u'mm2mm2')
quantityUnitOfMeasureAttType.mm2s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm2/s', tag=u'mm2s')
quantityUnitOfMeasureAttType.mm3_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm3', tag=u'mm3_')
quantityUnitOfMeasureAttType.mm3J = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mm3/J', tag=u'mm3J')
quantityUnitOfMeasureAttType.MMbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMbbl', tag=u'MMbbl')
quantityUnitOfMeasureAttType.MMbblacre_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMbbl/acre.ft', tag=u'MMbblacre_ft')
quantityUnitOfMeasureAttType.MMcf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMcf', tag=u'MMcf')
quantityUnitOfMeasureAttType.mmHg0C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mmHg(0C)', tag=u'mmHg0C')
quantityUnitOfMeasureAttType.mmhom = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mmho/m', tag=u'mmhom')
quantityUnitOfMeasureAttType.mmol = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mmol', tag=u'mmol')
quantityUnitOfMeasureAttType.MMscf60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMscf(60F)', tag=u'MMscf60F')
quantityUnitOfMeasureAttType.MMscf60Fd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMscf(60F)/d', tag=u'MMscf60Fd')
quantityUnitOfMeasureAttType.MMscf60stb60 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMscf60/stb60', tag=u'MMscf60stb60')
quantityUnitOfMeasureAttType.MMscm15C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMscm(15C)', tag=u'MMscm15C')
quantityUnitOfMeasureAttType.MMscm15Cd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMscm(15C)/d', tag=u'MMscm15Cd')
quantityUnitOfMeasureAttType.MMstb60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMstb(60F)', tag=u'MMstb60F')
quantityUnitOfMeasureAttType.MMstb60Fd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMstb(60F)/d', tag=u'MMstb60Fd')
quantityUnitOfMeasureAttType.MMstbacre = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMstb/acre', tag=u'MMstbacre')
quantityUnitOfMeasureAttType.MMstbacre_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MMstb/acre.ft', tag=u'MMstbacre_ft')
quantityUnitOfMeasureAttType.MN = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MN', tag=u'MN')
quantityUnitOfMeasureAttType.mN = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mN', tag=u'mN')
quantityUnitOfMeasureAttType.mN_m2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mN.m2', tag=u'mN_m2')
quantityUnitOfMeasureAttType.mNkm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mN/km', tag=u'mNkm')
quantityUnitOfMeasureAttType.mNm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mN/m', tag=u'mNm')
quantityUnitOfMeasureAttType.Mohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mohm', tag=u'Mohm')
quantityUnitOfMeasureAttType.mohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mohm', tag=u'mohm')
quantityUnitOfMeasureAttType.mohmm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mohm/m', tag=u'mohmm')
quantityUnitOfMeasureAttType.molg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(g)', tag=u'molg')
quantityUnitOfMeasureAttType.molkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(kg)', tag=u'molkg')
quantityUnitOfMeasureAttType.molkgh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(kg)/h', tag=u'molkgh')
quantityUnitOfMeasureAttType.molkgm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(kg)/m3', tag=u'molkgm3')
quantityUnitOfMeasureAttType.molkgs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(kg)/s', tag=u'molkgs')
quantityUnitOfMeasureAttType.mollbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)', tag=u'mollbm')
quantityUnitOfMeasureAttType.mollbmft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)/ft3', tag=u'mollbmft3')
quantityUnitOfMeasureAttType.mollbmgalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)/galUK', tag=u'mollbmgalUK')
quantityUnitOfMeasureAttType.mollbmgalUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)/galUS', tag=u'mollbmgalUS')
quantityUnitOfMeasureAttType.mollbmh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)/h', tag=u'mollbmh')
quantityUnitOfMeasureAttType.mollbmh_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)/h.ft2', tag=u'mollbmh_ft2')
quantityUnitOfMeasureAttType.mollbms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)/s', tag=u'mollbms')
quantityUnitOfMeasureAttType.mollbms_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mol(lbm)/s.ft2', tag=u'mollbms_ft2')
quantityUnitOfMeasureAttType.mPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mPa', tag=u'mPa')
quantityUnitOfMeasureAttType.MPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MPa', tag=u'MPa')
quantityUnitOfMeasureAttType.mPa_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mPa.s', tag=u'mPa_s')
quantityUnitOfMeasureAttType.MPa_sm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MPa.s/m', tag=u'MPa_sm')
quantityUnitOfMeasureAttType.MPah = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MPa/h', tag=u'MPah')
quantityUnitOfMeasureAttType.MPam = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MPa/m', tag=u'MPam')
quantityUnitOfMeasureAttType.Mpsi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mpsi', tag=u'Mpsi')
quantityUnitOfMeasureAttType.mrad = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mrad', tag=u'mrad')
quantityUnitOfMeasureAttType.Mrad = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mrad', tag=u'Mrad')
quantityUnitOfMeasureAttType.mrem = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mrem', tag=u'mrem')
quantityUnitOfMeasureAttType.mremh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mrem/h', tag=u'mremh')
quantityUnitOfMeasureAttType.mS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mS', tag=u'mS')
quantityUnitOfMeasureAttType.ms_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ms', tag=u'ms_')
quantityUnitOfMeasureAttType.ms2_ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ms/2', tag=u'ms2_')
quantityUnitOfMeasureAttType.mscm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ms/cm', tag=u'mscm')
quantityUnitOfMeasureAttType.msft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ms/ft', tag=u'msft')
quantityUnitOfMeasureAttType.msin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ms/in', tag=u'msin')
quantityUnitOfMeasureAttType.mSm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mS/m', tag=u'mSm')
quantityUnitOfMeasureAttType.msm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ms/m', tag=u'msm')
quantityUnitOfMeasureAttType.mss = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ms/s', tag=u'mss')
quantityUnitOfMeasureAttType.Mscf60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mscf(60F)', tag=u'Mscf60F')
quantityUnitOfMeasureAttType.Mscf60Fd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mscf(60F)/d', tag=u'Mscf60Fd')
quantityUnitOfMeasureAttType.Mscf60stb60 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mscf60/stb60', tag=u'Mscf60stb60')
quantityUnitOfMeasureAttType.Mscm15Cd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mscm(15C)/d', tag=u'Mscm15Cd')
quantityUnitOfMeasureAttType.mseca = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mseca', tag=u'mseca')
quantityUnitOfMeasureAttType.Msm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Msm3', tag=u'Msm3')
quantityUnitOfMeasureAttType.Mstb60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mstb(60F)', tag=u'Mstb60F')
quantityUnitOfMeasureAttType.Mstb60Fd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Mstb(60F)/d', tag=u'Mstb60Fd')
quantityUnitOfMeasureAttType.mSv = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mSv', tag=u'mSv')
quantityUnitOfMeasureAttType.mSvh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mSv/h', tag=u'mSvh')
quantityUnitOfMeasureAttType.mT = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mT', tag=u'mT')
quantityUnitOfMeasureAttType.MV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MV', tag=u'MV')
quantityUnitOfMeasureAttType.mV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mV', tag=u'mV')
quantityUnitOfMeasureAttType.mVft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mV/ft', tag=u'mVft')
quantityUnitOfMeasureAttType.mVm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mV/m', tag=u'mVm')
quantityUnitOfMeasureAttType.MW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MW', tag=u'MW')
quantityUnitOfMeasureAttType.mW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mW', tag=u'mW')
quantityUnitOfMeasureAttType.MW_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MW.h', tag=u'MW_h')
quantityUnitOfMeasureAttType.MW_hkg = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MW.h/kg', tag=u'MW_hkg')
quantityUnitOfMeasureAttType.MW_hm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MW.h/m3', tag=u'MW_hm3')
quantityUnitOfMeasureAttType.mWm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mW/m2', tag=u'mWm2')
quantityUnitOfMeasureAttType.mWb = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'mWb', tag=u'mWb')
quantityUnitOfMeasureAttType.MY = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'MY', tag=u'MY')
quantityUnitOfMeasureAttType.N_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N.m', tag=u'N_m')
quantityUnitOfMeasureAttType.N_mm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N.m/m', tag=u'N_mm')
quantityUnitOfMeasureAttType.N_sm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N.s/m2', tag=u'N_sm2')
quantityUnitOfMeasureAttType.N30m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N/30m', tag=u'N30m')
quantityUnitOfMeasureAttType.Nm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N/m2', tag=u'Nm2')
quantityUnitOfMeasureAttType.Nmm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'N/mm2', tag=u'Nmm2')
quantityUnitOfMeasureAttType.nA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nA', tag=u'nA')
quantityUnitOfMeasureAttType.nautmi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nautmi', tag=u'nautmi')
quantityUnitOfMeasureAttType.nC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nC', tag=u'nC')
quantityUnitOfMeasureAttType.nCi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nCi', tag=u'nCi')
quantityUnitOfMeasureAttType.ncurie = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ncurie', tag=u'ncurie')
quantityUnitOfMeasureAttType.nEuc = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nEuc', tag=u'nEuc')
quantityUnitOfMeasureAttType.nH = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nH', tag=u'nH')
quantityUnitOfMeasureAttType.nJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nJ', tag=u'nJ')
quantityUnitOfMeasureAttType.nm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nm', tag=u'nm')
quantityUnitOfMeasureAttType.nms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nm/s', tag=u'nms')
quantityUnitOfMeasureAttType.nohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nohm', tag=u'nohm')
quantityUnitOfMeasureAttType.ns = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ns', tag=u'ns')
quantityUnitOfMeasureAttType.nsft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ns/ft', tag=u'nsft')
quantityUnitOfMeasureAttType.nsm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ns/m', tag=u'nsm')
quantityUnitOfMeasureAttType.nT = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nT', tag=u'nT')
quantityUnitOfMeasureAttType.nW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'nW', tag=u'nW')
quantityUnitOfMeasureAttType.Oe = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Oe', tag=u'Oe')
quantityUnitOfMeasureAttType.ohm_cm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ohm.cm', tag=u'ohm_cm')
quantityUnitOfMeasureAttType.ohmkm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ohm/km', tag=u'ohmkm')
quantityUnitOfMeasureAttType.ozav = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'oz(av)', tag=u'ozav')
quantityUnitOfMeasureAttType.oztroy = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'oz(troy)', tag=u'oztroy')
quantityUnitOfMeasureAttType.ozf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ozf', tag=u'ozf')
quantityUnitOfMeasureAttType.ozm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ozm', tag=u'ozm')
quantityUnitOfMeasureAttType.P = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'P', tag=u'P')
quantityUnitOfMeasureAttType.pA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pA', tag=u'pA')
quantityUnitOfMeasureAttType.Pa_s2m3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa.s2/m3', tag=u'Pa_s2m3')
quantityUnitOfMeasureAttType.Pag = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa(g)', tag=u'Pag')
quantityUnitOfMeasureAttType.Pah = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Pa/h', tag=u'Pah')
quantityUnitOfMeasureAttType.pC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pC', tag=u'pC')
quantityUnitOfMeasureAttType.pCi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pCi', tag=u'pCi')
quantityUnitOfMeasureAttType.pCig = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pCi/g', tag=u'pCig')
quantityUnitOfMeasureAttType.pcurie = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pcurie', tag=u'pcurie')
quantityUnitOfMeasureAttType.pdl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pdl', tag=u'pdl')
quantityUnitOfMeasureAttType.pdl_cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pdl.cm2', tag=u'pdl_cm2')
quantityUnitOfMeasureAttType.pdl_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pdl.ft', tag=u'pdl_ft')
quantityUnitOfMeasureAttType.pdlcm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pdl/cm', tag=u'pdlcm')
quantityUnitOfMeasureAttType.permil = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'permil', tag=u'permil')
quantityUnitOfMeasureAttType.pF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pF', tag=u'pF')
quantityUnitOfMeasureAttType.pm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pm', tag=u'pm')
quantityUnitOfMeasureAttType.pPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pPa', tag=u'pPa')
quantityUnitOfMeasureAttType.ppdk = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ppdk', tag=u'ppdk')
quantityUnitOfMeasureAttType.ppk = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ppk', tag=u'ppk')
quantityUnitOfMeasureAttType.ppm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ppm', tag=u'ppm')
quantityUnitOfMeasureAttType.ppmdegC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ppm/degC', tag=u'ppmdegC')
quantityUnitOfMeasureAttType.ppmdegF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ppm/degF', tag=u'ppmdegF')
quantityUnitOfMeasureAttType.ps = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ps', tag=u'ps')
quantityUnitOfMeasureAttType.pS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'pS', tag=u'pS')
quantityUnitOfMeasureAttType.psf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psf', tag=u'psf')
quantityUnitOfMeasureAttType.psi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi', tag=u'psi')
quantityUnitOfMeasureAttType.psi_dbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi.d/bbl', tag=u'psi_dbbl')
quantityUnitOfMeasureAttType.psi_s = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi.s', tag=u'psi_s')
quantityUnitOfMeasureAttType.psi100ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi/100ft', tag=u'psi100ft')
quantityUnitOfMeasureAttType.psift = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi/ft', tag=u'psift')
quantityUnitOfMeasureAttType.psift100 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi/ft(100)', tag=u'psift100')
quantityUnitOfMeasureAttType.psih = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi/h', tag=u'psih')
quantityUnitOfMeasureAttType.psikft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi/kft', tag=u'psikft')
quantityUnitOfMeasureAttType.psim = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi/m', tag=u'psim')
quantityUnitOfMeasureAttType.psimin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi/min', tag=u'psimin')
quantityUnitOfMeasureAttType.psi2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi2', tag=u'psi2')
quantityUnitOfMeasureAttType.psi2_dcP_ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi2.d/cP.ft3', tag=u'psi2_dcP_ft3')
quantityUnitOfMeasureAttType.psi2_dcp_ft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi2.d/cp.ft3', tag=u'psi2_dcp_ft3')
quantityUnitOfMeasureAttType.psi2_d2cP_ft6 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi2.d2/cP.ft6', tag=u'psi2_d2cP_ft6')
quantityUnitOfMeasureAttType.psi2_d2cp_ft6 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi2.d2/cp.ft6', tag=u'psi2_d2cp_ft6')
quantityUnitOfMeasureAttType.psi2cP = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psi2/cP', tag=u'psi2cP')
quantityUnitOfMeasureAttType.psia = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psia', tag=u'psia')
quantityUnitOfMeasureAttType.psig = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'psig', tag=u'psig')
quantityUnitOfMeasureAttType.ptUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ptUK', tag=u'ptUK')
quantityUnitOfMeasureAttType.ptUKhp_hr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ptUK/hp.hr', tag=u'ptUKhp_hr')
quantityUnitOfMeasureAttType.ptUKMbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ptUK/Mbbl', tag=u'ptUKMbbl')
quantityUnitOfMeasureAttType.ptUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ptUS', tag=u'ptUS')
quantityUnitOfMeasureAttType.ptUS10bbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ptUS/10bbl', tag=u'ptUS10bbl')
quantityUnitOfMeasureAttType.qtUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'qtUK', tag=u'qtUK')
quantityUnitOfMeasureAttType.qtUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'qtUS', tag=u'qtUS')
quantityUnitOfMeasureAttType.quad = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'quad', tag=u'quad')
quantityUnitOfMeasureAttType.quadyr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'quad/yr', tag=u'quadyr')
quantityUnitOfMeasureAttType.radft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rad/ft', tag=u'radft')
quantityUnitOfMeasureAttType.radft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rad/ft3', tag=u'radft3')
quantityUnitOfMeasureAttType.rd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rd', tag=u'rd')
quantityUnitOfMeasureAttType.rem = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rem', tag=u'rem')
quantityUnitOfMeasureAttType.remh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rem/h', tag=u'remh')
quantityUnitOfMeasureAttType.revmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rev/min', tag=u'revmin')
quantityUnitOfMeasureAttType.revs = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rev/s', tag=u'revs')
quantityUnitOfMeasureAttType.rpm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rpm', tag=u'rpm')
quantityUnitOfMeasureAttType.rpms = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'rpm/s', tag=u'rpms')
quantityUnitOfMeasureAttType.scm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/cm', tag=u'scm')
quantityUnitOfMeasureAttType.sft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/ft', tag=u'sft')
quantityUnitOfMeasureAttType.sft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/ft3', tag=u'sft3')
quantityUnitOfMeasureAttType.sin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/in', tag=u'sin')
quantityUnitOfMeasureAttType.sL = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/L', tag=u'sL')
quantityUnitOfMeasureAttType.sqtUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/qtUK', tag=u'sqtUK')
quantityUnitOfMeasureAttType.sqtUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u's/qtUS', tag=u'sqtUS')
quantityUnitOfMeasureAttType.sack94 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sack94', tag=u'sack94')
quantityUnitOfMeasureAttType.scf60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scf(60F)', tag=u'scf60F')
quantityUnitOfMeasureAttType.scf60Fbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scf(60F)/bbl', tag=u'scf60Fbbl')
quantityUnitOfMeasureAttType.scf60Fd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scf(60F)/d', tag=u'scf60Fd')
quantityUnitOfMeasureAttType.scf60Fft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scf(60F)/ft2', tag=u'scf60Fft2')
quantityUnitOfMeasureAttType.scf60Fft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scf(60F)/ft3', tag=u'scf60Fft3')
quantityUnitOfMeasureAttType.scm15Cd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm(15C)/d', tag=u'scm15Cd')
quantityUnitOfMeasureAttType.scm15stb60 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'scm15/stb60', tag=u'scm15stb60')
quantityUnitOfMeasureAttType.seca = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'seca', tag=u'seca')
quantityUnitOfMeasureAttType.sigma = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sigma', tag=u'sigma')
quantityUnitOfMeasureAttType.sm3ksm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sm3/ksm3', tag=u'sm3ksm3')
quantityUnitOfMeasureAttType.sm3sm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sm3/sm3', tag=u'sm3sm3')
quantityUnitOfMeasureAttType.sq_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sq ft', tag=u'sq_ft')
quantityUnitOfMeasureAttType.sq_in = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sq in', tag=u'sq_in')
quantityUnitOfMeasureAttType.sq_mi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sq mi', tag=u'sq_mi')
quantityUnitOfMeasureAttType.sq_yd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'sq yd', tag=u'sq_yd')
quantityUnitOfMeasureAttType.stb60F = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb(60F)', tag=u'stb60F')
quantityUnitOfMeasureAttType.stb60Facre = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb(60F)/acre', tag=u'stb60Facre')
quantityUnitOfMeasureAttType.stb60Fbbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb(60F)/bbl', tag=u'stb60Fbbl')
quantityUnitOfMeasureAttType.stb60Fd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb(60F)/d', tag=u'stb60Fd')
quantityUnitOfMeasureAttType.stb60MMscf60 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb60/MMscf60', tag=u'stb60MMscf60')
quantityUnitOfMeasureAttType.stb60MMscm15 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb60/MMscm15', tag=u'stb60MMscm15')
quantityUnitOfMeasureAttType.stb60Mscf60 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb60/Mscf60', tag=u'stb60Mscf60')
quantityUnitOfMeasureAttType.stb60Mscm15 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb60/Mscm15', tag=u'stb60Mscm15')
quantityUnitOfMeasureAttType.stb60scm15 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'stb60/scm15', tag=u'stb60scm15')
quantityUnitOfMeasureAttType.Svh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Sv/h', tag=u'Svh')
quantityUnitOfMeasureAttType.t = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u't', tag=u't')
quantityUnitOfMeasureAttType.ta = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u't/a', tag=u'ta')
quantityUnitOfMeasureAttType.td = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u't/d', tag=u'td')
quantityUnitOfMeasureAttType.th = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u't/h', tag=u'th')
quantityUnitOfMeasureAttType.tmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u't/min', tag=u'tmin')
quantityUnitOfMeasureAttType.talbot = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'talbot', tag=u'talbot')
quantityUnitOfMeasureAttType.TBq = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'TBq', tag=u'TBq')
quantityUnitOfMeasureAttType.tcf = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tcf', tag=u'tcf')
quantityUnitOfMeasureAttType.TeV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'TeV', tag=u'TeV')
quantityUnitOfMeasureAttType.therm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'therm', tag=u'therm')
quantityUnitOfMeasureAttType.thermft3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'therm/ft3', tag=u'thermft3')
quantityUnitOfMeasureAttType.thermgalUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'therm/galUK', tag=u'thermgalUK')
quantityUnitOfMeasureAttType.thermlbm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'therm/lbm', tag=u'thermlbm')
quantityUnitOfMeasureAttType.TJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'TJ', tag=u'TJ')
quantityUnitOfMeasureAttType.TJa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'TJ/a', tag=u'TJa')
quantityUnitOfMeasureAttType.Tohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Tohm', tag=u'Tohm')
quantityUnitOfMeasureAttType.ton_of_refrig = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ton of refrig', tag=u'ton_of_refrig')
quantityUnitOfMeasureAttType.tonfUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUK', tag=u'tonfUK')
quantityUnitOfMeasureAttType.tonfUK_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUK.ft2', tag=u'tonfUK_ft2')
quantityUnitOfMeasureAttType.tonfUKft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUK/ft', tag=u'tonfUKft')
quantityUnitOfMeasureAttType.tonfUKft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUK/ft2', tag=u'tonfUKft2')
quantityUnitOfMeasureAttType.tonfUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS', tag=u'tonfUS')
quantityUnitOfMeasureAttType.tonfUS_ft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS.ft', tag=u'tonfUS_ft')
quantityUnitOfMeasureAttType.tonfUS_ft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS.ft2', tag=u'tonfUS_ft2')
quantityUnitOfMeasureAttType.tonfUS_mi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS.mi', tag=u'tonfUS_mi')
quantityUnitOfMeasureAttType.tonfUS_mibbl = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS.mi/bbl', tag=u'tonfUS_mibbl')
quantityUnitOfMeasureAttType.tonfUS_mift = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS.mi/ft', tag=u'tonfUS_mift')
quantityUnitOfMeasureAttType.tonfUSft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS/ft', tag=u'tonfUSft')
quantityUnitOfMeasureAttType.tonfUSft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS/ft2', tag=u'tonfUSft2')
quantityUnitOfMeasureAttType.tonfUSin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonfUS/in2', tag=u'tonfUSin2')
quantityUnitOfMeasureAttType.tonUK = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUK', tag=u'tonUK')
quantityUnitOfMeasureAttType.tonUKa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUK/a', tag=u'tonUKa')
quantityUnitOfMeasureAttType.tonUKd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUK/d', tag=u'tonUKd')
quantityUnitOfMeasureAttType.tonUKh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUK/h', tag=u'tonUKh')
quantityUnitOfMeasureAttType.tonUKmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUK/min', tag=u'tonUKmin')
quantityUnitOfMeasureAttType.tonUS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUS', tag=u'tonUS')
quantityUnitOfMeasureAttType.tonUSa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUS/a', tag=u'tonUSa')
quantityUnitOfMeasureAttType.tonUSd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUS/d', tag=u'tonUSd')
quantityUnitOfMeasureAttType.tonUSft2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUS/ft2', tag=u'tonUSft2')
quantityUnitOfMeasureAttType.tonUSh = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUS/h', tag=u'tonUSh')
quantityUnitOfMeasureAttType.tonUSmin = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'tonUS/min', tag=u'tonUSmin')
quantityUnitOfMeasureAttType.torr = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'torr', tag=u'torr')
quantityUnitOfMeasureAttType.TW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'TW', tag=u'TW')
quantityUnitOfMeasureAttType.TW_h = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'TW.h', tag=u'TW_h')
quantityUnitOfMeasureAttType.uA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uA', tag=u'uA')
quantityUnitOfMeasureAttType.uAcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uA/cm2', tag=u'uAcm2')
quantityUnitOfMeasureAttType.uAin2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uA/in2', tag=u'uAin2')
quantityUnitOfMeasureAttType.ubar = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ubar', tag=u'ubar')
quantityUnitOfMeasureAttType.uC = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uC', tag=u'uC')
quantityUnitOfMeasureAttType.ucals_cm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ucal/s.cm2', tag=u'ucals_cm2')
quantityUnitOfMeasureAttType.uCi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uCi', tag=u'uCi')
quantityUnitOfMeasureAttType.ucurie = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ucurie', tag=u'ucurie')
quantityUnitOfMeasureAttType.uEuc = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uEuc', tag=u'uEuc')
quantityUnitOfMeasureAttType.uF = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uF', tag=u'uF')
quantityUnitOfMeasureAttType.uFm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uF/m', tag=u'uFm')
quantityUnitOfMeasureAttType.ug = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ug', tag=u'ug')
quantityUnitOfMeasureAttType.ugcm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ug/cm3', tag=u'ugcm3')
quantityUnitOfMeasureAttType.uH = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uH', tag=u'uH')
quantityUnitOfMeasureAttType.uHm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uH/m', tag=u'uHm')
quantityUnitOfMeasureAttType.uHz = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uHz', tag=u'uHz')
quantityUnitOfMeasureAttType.uJ = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uJ', tag=u'uJ')
quantityUnitOfMeasureAttType.um = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um', tag=u'um')
quantityUnitOfMeasureAttType.ums = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um/s', tag=u'ums')
quantityUnitOfMeasureAttType.um2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um2', tag=u'um2')
quantityUnitOfMeasureAttType.um2_m = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um2.m', tag=u'um2_m')
quantityUnitOfMeasureAttType.umHg0C = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'umHg(0C)', tag=u'umHg0C')
quantityUnitOfMeasureAttType.umol = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'umol', tag=u'umol')
quantityUnitOfMeasureAttType.uN = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uN', tag=u'uN')
quantityUnitOfMeasureAttType.unitless = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'unitless', tag=u'unitless')
quantityUnitOfMeasureAttType.uohm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uohm', tag=u'uohm')
quantityUnitOfMeasureAttType.uohmft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uohm/ft', tag=u'uohmft')
quantityUnitOfMeasureAttType.uohmm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uohm/m', tag=u'uohmm')
quantityUnitOfMeasureAttType.uPa = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uPa', tag=u'uPa')
quantityUnitOfMeasureAttType.upsi = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'upsi', tag=u'upsi')
quantityUnitOfMeasureAttType.urad = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'urad', tag=u'urad')
quantityUnitOfMeasureAttType.uS = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uS', tag=u'uS')
quantityUnitOfMeasureAttType.us = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'us', tag=u'us')
quantityUnitOfMeasureAttType.usft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'us/ft', tag=u'usft')
quantityUnitOfMeasureAttType.usm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'us/m', tag=u'usm')
quantityUnitOfMeasureAttType.uT = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uT', tag=u'uT')
quantityUnitOfMeasureAttType.uV = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uV', tag=u'uV')
quantityUnitOfMeasureAttType.uVft = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uV/ft', tag=u'uVft')
quantityUnitOfMeasureAttType.uVm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uV/m', tag=u'uVm')
quantityUnitOfMeasureAttType.uW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uW', tag=u'uW')
quantityUnitOfMeasureAttType.uWm3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uW/m3', tag=u'uWm3')
quantityUnitOfMeasureAttType.uWb = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'uWb', tag=u'uWb')
quantityUnitOfMeasureAttType.VdB = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'V/dB', tag=u'VdB')
quantityUnitOfMeasureAttType.volpercent = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'volpercent', tag=u'volpercent')
quantityUnitOfMeasureAttType.volppm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'volppm', tag=u'volppm')
quantityUnitOfMeasureAttType.Wcm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/cm2', tag=u'Wcm2')
quantityUnitOfMeasureAttType.WkW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/kW', tag=u'WkW')
quantityUnitOfMeasureAttType.Wmm2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/mm2', tag=u'Wmm2')
quantityUnitOfMeasureAttType.WW = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'W/W', tag=u'WW')
quantityUnitOfMeasureAttType.Wbmm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'Wb/mm', tag=u'Wbmm')
quantityUnitOfMeasureAttType.wk = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'wk', tag=u'wk')
quantityUnitOfMeasureAttType.wtpercent = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'wtpercent', tag=u'wtpercent')
quantityUnitOfMeasureAttType.wtppm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'wtppm', tag=u'wtppm')
quantityUnitOfMeasureAttType.yd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'yd', tag=u'yd')
quantityUnitOfMeasureAttType.yd2 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'yd2', tag=u'yd2')
quantityUnitOfMeasureAttType.yd3 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'yd3', tag=u'yd3')
quantityUnitOfMeasureAttType.ydBnA = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydBnA', tag=u'ydBnA')
quantityUnitOfMeasureAttType.ydBnB = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydBnB', tag=u'ydBnB')
quantityUnitOfMeasureAttType.ydCla = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydCla', tag=u'ydCla')
quantityUnitOfMeasureAttType.ydIm = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydIm', tag=u'ydIm')
quantityUnitOfMeasureAttType.ydInd = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydInd', tag=u'ydInd')
quantityUnitOfMeasureAttType.ydInd37 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydInd(37)', tag=u'ydInd37')
quantityUnitOfMeasureAttType.ydInd62 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydInd(62)', tag=u'ydInd62')
quantityUnitOfMeasureAttType.ydInd75 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydInd(75)', tag=u'ydInd75')
quantityUnitOfMeasureAttType.ydSe = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'ydSe', tag=u'ydSe')
quantityUnitOfMeasureAttType.yr100k = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'yr(100k)', tag=u'yr100k')
quantityUnitOfMeasureAttType.um01 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um01', tag=u'um01')
quantityUnitOfMeasureAttType.um02 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um02', tag=u'um02')
quantityUnitOfMeasureAttType.um03 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um03', tag=u'um03')
quantityUnitOfMeasureAttType.um04 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um04', tag=u'um04')
quantityUnitOfMeasureAttType.um05 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um05', tag=u'um05')
quantityUnitOfMeasureAttType.um06 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um06', tag=u'um06')
quantityUnitOfMeasureAttType.um07 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um07', tag=u'um07')
quantityUnitOfMeasureAttType.um08 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um08', tag=u'um08')
quantityUnitOfMeasureAttType.um09 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um09', tag=u'um09')
quantityUnitOfMeasureAttType.um10 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um10', tag=u'um10')
quantityUnitOfMeasureAttType.um11 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um11', tag=u'um11')
quantityUnitOfMeasureAttType.um12 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um12', tag=u'um12')
quantityUnitOfMeasureAttType.um13 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um13', tag=u'um13')
quantityUnitOfMeasureAttType.um14 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um14', tag=u'um14')
quantityUnitOfMeasureAttType.um15 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um15', tag=u'um15')
quantityUnitOfMeasureAttType.um16 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um16', tag=u'um16')
quantityUnitOfMeasureAttType.um17 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um17', tag=u'um17')
quantityUnitOfMeasureAttType.um18 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um18', tag=u'um18')
quantityUnitOfMeasureAttType.um19 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um19', tag=u'um19')
quantityUnitOfMeasureAttType.um20 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um20', tag=u'um20')
quantityUnitOfMeasureAttType.um21 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um21', tag=u'um21')
quantityUnitOfMeasureAttType.um22 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um22', tag=u'um22')
quantityUnitOfMeasureAttType.um23 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um23', tag=u'um23')
quantityUnitOfMeasureAttType.um24 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um24', tag=u'um24')
quantityUnitOfMeasureAttType.um25 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um25', tag=u'um25')
quantityUnitOfMeasureAttType.um26 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um26', tag=u'um26')
quantityUnitOfMeasureAttType.um27 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um27', tag=u'um27')
quantityUnitOfMeasureAttType.um28 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um28', tag=u'um28')
quantityUnitOfMeasureAttType.um29 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um29', tag=u'um29')
quantityUnitOfMeasureAttType.um30 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um30', tag=u'um30')
quantityUnitOfMeasureAttType.um31 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um31', tag=u'um31')
quantityUnitOfMeasureAttType.um32 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um32', tag=u'um32')
quantityUnitOfMeasureAttType.um33 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um33', tag=u'um33')
quantityUnitOfMeasureAttType.um34 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um34', tag=u'um34')
quantityUnitOfMeasureAttType.um35 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um35', tag=u'um35')
quantityUnitOfMeasureAttType.um36 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um36', tag=u'um36')
quantityUnitOfMeasureAttType.um37 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um37', tag=u'um37')
quantityUnitOfMeasureAttType.um38 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um38', tag=u'um38')
quantityUnitOfMeasureAttType.um39 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um39', tag=u'um39')
quantityUnitOfMeasureAttType.um40 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um40', tag=u'um40')
quantityUnitOfMeasureAttType.um41 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um41', tag=u'um41')
quantityUnitOfMeasureAttType.um42 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um42', tag=u'um42')
quantityUnitOfMeasureAttType.um43 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um43', tag=u'um43')
quantityUnitOfMeasureAttType.um44 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um44', tag=u'um44')
quantityUnitOfMeasureAttType.um45 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um45', tag=u'um45')
quantityUnitOfMeasureAttType.um46 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um46', tag=u'um46')
quantityUnitOfMeasureAttType.um47 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um47', tag=u'um47')
quantityUnitOfMeasureAttType.um48 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um48', tag=u'um48')
quantityUnitOfMeasureAttType.um49 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um49', tag=u'um49')
quantityUnitOfMeasureAttType.um50 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um50', tag=u'um50')
quantityUnitOfMeasureAttType.um51 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um51', tag=u'um51')
quantityUnitOfMeasureAttType.um52 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um52', tag=u'um52')
quantityUnitOfMeasureAttType.um53 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um53', tag=u'um53')
quantityUnitOfMeasureAttType.um54 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um54', tag=u'um54')
quantityUnitOfMeasureAttType.um55 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um55', tag=u'um55')
quantityUnitOfMeasureAttType.um56 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um56', tag=u'um56')
quantityUnitOfMeasureAttType.um57 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um57', tag=u'um57')
quantityUnitOfMeasureAttType.um58 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um58', tag=u'um58')
quantityUnitOfMeasureAttType.um59 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um59', tag=u'um59')
quantityUnitOfMeasureAttType.um60 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um60', tag=u'um60')
quantityUnitOfMeasureAttType.um61 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um61', tag=u'um61')
quantityUnitOfMeasureAttType.um62 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um62', tag=u'um62')
quantityUnitOfMeasureAttType.um63 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um63', tag=u'um63')
quantityUnitOfMeasureAttType.um64 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um64', tag=u'um64')
quantityUnitOfMeasureAttType.um65 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um65', tag=u'um65')
quantityUnitOfMeasureAttType.um66 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um66', tag=u'um66')
quantityUnitOfMeasureAttType.um67 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um67', tag=u'um67')
quantityUnitOfMeasureAttType.um68 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um68', tag=u'um68')
quantityUnitOfMeasureAttType.um69 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um69', tag=u'um69')
quantityUnitOfMeasureAttType.um70 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um70', tag=u'um70')
quantityUnitOfMeasureAttType.um71 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um71', tag=u'um71')
quantityUnitOfMeasureAttType.um72 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um72', tag=u'um72')
quantityUnitOfMeasureAttType.um73 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um73', tag=u'um73')
quantityUnitOfMeasureAttType.um74 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um74', tag=u'um74')
quantityUnitOfMeasureAttType.um75 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um75', tag=u'um75')
quantityUnitOfMeasureAttType.um76 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um76', tag=u'um76')
quantityUnitOfMeasureAttType.um77 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um77', tag=u'um77')
quantityUnitOfMeasureAttType.um78 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um78', tag=u'um78')
quantityUnitOfMeasureAttType.um79 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um79', tag=u'um79')
quantityUnitOfMeasureAttType.um80 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um80', tag=u'um80')
quantityUnitOfMeasureAttType.um81 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um81', tag=u'um81')
quantityUnitOfMeasureAttType.um82 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um82', tag=u'um82')
quantityUnitOfMeasureAttType.um83 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um83', tag=u'um83')
quantityUnitOfMeasureAttType.um84 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um84', tag=u'um84')
quantityUnitOfMeasureAttType.um85 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um85', tag=u'um85')
quantityUnitOfMeasureAttType.um86 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um86', tag=u'um86')
quantityUnitOfMeasureAttType.um87 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um87', tag=u'um87')
quantityUnitOfMeasureAttType.um88 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um88', tag=u'um88')
quantityUnitOfMeasureAttType.um89 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um89', tag=u'um89')
quantityUnitOfMeasureAttType.um90 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um90', tag=u'um90')
quantityUnitOfMeasureAttType.um91 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um91', tag=u'um91')
quantityUnitOfMeasureAttType.um92 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um92', tag=u'um92')
quantityUnitOfMeasureAttType.um93 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um93', tag=u'um93')
quantityUnitOfMeasureAttType.um94 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um94', tag=u'um94')
quantityUnitOfMeasureAttType.um95 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um95', tag=u'um95')
quantityUnitOfMeasureAttType.um96 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um96', tag=u'um96')
quantityUnitOfMeasureAttType.um97 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um97', tag=u'um97')
quantityUnitOfMeasureAttType.um98 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um98', tag=u'um98')
quantityUnitOfMeasureAttType.um99 = quantityUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'um99', tag=u'um99')
quantityUnitOfMeasureAttType._InitializeFacetMap(quantityUnitOfMeasureAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'quantityUnitOfMeasureAttType', quantityUnitOfMeasureAttType)

# Atomic simple type: quantityToleranceTypeAttType
class quantityToleranceTypeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityToleranceTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2880, 4)
    _Documentation = None
quantityToleranceTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=quantityToleranceTypeAttType, enum_prefix=None)
quantityToleranceTypeAttType.plus = quantityToleranceTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'plus', tag=u'plus')
quantityToleranceTypeAttType.minus = quantityToleranceTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'minus', tag=u'minus')
quantityToleranceTypeAttType.plusorminus = quantityToleranceTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'plusorminus', tag=u'plusorminus')
quantityToleranceTypeAttType._InitializeFacetMap(quantityToleranceTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'quantityToleranceTypeAttType', quantityToleranceTypeAttType)

# Atomic simple type: quantityGroupTypeAttType
class quantityGroupTypeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityGroupTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2888, 4)
    _Documentation = None
quantityGroupTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=quantityGroupTypeAttType, enum_prefix=None)
quantityGroupTypeAttType.nominal = quantityGroupTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'nominal', tag=u'nominal')
quantityGroupTypeAttType.minimum = quantityGroupTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'minimum', tag=u'minimum')
quantityGroupTypeAttType.maximum = quantityGroupTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'maximum', tag=u'maximum')
quantityGroupTypeAttType._InitializeFacetMap(quantityGroupTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'quantityGroupTypeAttType', quantityGroupTypeAttType)

# Atomic simple type: quantityTypeAttType
class quantityTypeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2896, 4)
    _Documentation = None
quantityTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=quantityTypeAttType, enum_prefix=None)
quantityTypeAttType.qty01 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty01', tag=u'qty01')
quantityTypeAttType.qty02 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty02', tag=u'qty02')
quantityTypeAttType.qty03 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty03', tag=u'qty03')
quantityTypeAttType.qty04 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty04', tag=u'qty04')
quantityTypeAttType.qty05 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty05', tag=u'qty05')
quantityTypeAttType.qty06 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty06', tag=u'qty06')
quantityTypeAttType.qty07 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty07', tag=u'qty07')
quantityTypeAttType.qty08 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty08', tag=u'qty08')
quantityTypeAttType.qty09 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty09', tag=u'qty09')
quantityTypeAttType.qty10 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty10', tag=u'qty10')
quantityTypeAttType.qty11 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty11', tag=u'qty11')
quantityTypeAttType.qty12 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty12', tag=u'qty12')
quantityTypeAttType.qty13 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty13', tag=u'qty13')
quantityTypeAttType.qty14 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty14', tag=u'qty14')
quantityTypeAttType.qty15 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty15', tag=u'qty15')
quantityTypeAttType.qty16 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty16', tag=u'qty16')
quantityTypeAttType.qty17 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty17', tag=u'qty17')
quantityTypeAttType.qty18 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty18', tag=u'qty18')
quantityTypeAttType.qty19 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty19', tag=u'qty19')
quantityTypeAttType.qty20 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty20', tag=u'qty20')
quantityTypeAttType.qty21 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty21', tag=u'qty21')
quantityTypeAttType.qty22 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty22', tag=u'qty22')
quantityTypeAttType.qty23 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty23', tag=u'qty23')
quantityTypeAttType.qty24 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty24', tag=u'qty24')
quantityTypeAttType.qty25 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty25', tag=u'qty25')
quantityTypeAttType.qty26 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty26', tag=u'qty26')
quantityTypeAttType.qty27 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty27', tag=u'qty27')
quantityTypeAttType.qty28 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty28', tag=u'qty28')
quantityTypeAttType.qty29 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty29', tag=u'qty29')
quantityTypeAttType.qty30 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty30', tag=u'qty30')
quantityTypeAttType.qty31 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty31', tag=u'qty31')
quantityTypeAttType.qty32 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty32', tag=u'qty32')
quantityTypeAttType.qty33 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty33', tag=u'qty33')
quantityTypeAttType.qty34 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty34', tag=u'qty34')
quantityTypeAttType.qty35 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty35', tag=u'qty35')
quantityTypeAttType.qty36 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty36', tag=u'qty36')
quantityTypeAttType.qty37 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty37', tag=u'qty37')
quantityTypeAttType.qty38 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty38', tag=u'qty38')
quantityTypeAttType.qty39 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty39', tag=u'qty39')
quantityTypeAttType.qty40 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty40', tag=u'qty40')
quantityTypeAttType.qty41 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty41', tag=u'qty41')
quantityTypeAttType.qty42 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty42', tag=u'qty42')
quantityTypeAttType.qty43 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty43', tag=u'qty43')
quantityTypeAttType.qty44 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty44', tag=u'qty44')
quantityTypeAttType.qty45 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty45', tag=u'qty45')
quantityTypeAttType.qty46 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty46', tag=u'qty46')
quantityTypeAttType.qty47 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty47', tag=u'qty47')
quantityTypeAttType.qty48 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty48', tag=u'qty48')
quantityTypeAttType.qty49 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty49', tag=u'qty49')
quantityTypeAttType.qty50 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty50', tag=u'qty50')
quantityTypeAttType.qty51 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty51', tag=u'qty51')
quantityTypeAttType.qty52 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty52', tag=u'qty52')
quantityTypeAttType.qty53 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty53', tag=u'qty53')
quantityTypeAttType.qty54 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty54', tag=u'qty54')
quantityTypeAttType.qty55 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty55', tag=u'qty55')
quantityTypeAttType.qty56 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty56', tag=u'qty56')
quantityTypeAttType.qty57 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty57', tag=u'qty57')
quantityTypeAttType.qty58 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty58', tag=u'qty58')
quantityTypeAttType.qty59 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty59', tag=u'qty59')
quantityTypeAttType.qty60 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty60', tag=u'qty60')
quantityTypeAttType.qty61 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty61', tag=u'qty61')
quantityTypeAttType.qty62 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty62', tag=u'qty62')
quantityTypeAttType.qty63 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty63', tag=u'qty63')
quantityTypeAttType.qty64 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty64', tag=u'qty64')
quantityTypeAttType.qty65 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty65', tag=u'qty65')
quantityTypeAttType.qty66 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty66', tag=u'qty66')
quantityTypeAttType.qty67 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty67', tag=u'qty67')
quantityTypeAttType.qty68 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty68', tag=u'qty68')
quantityTypeAttType.qty69 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty69', tag=u'qty69')
quantityTypeAttType.qty70 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty70', tag=u'qty70')
quantityTypeAttType.qty71 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty71', tag=u'qty71')
quantityTypeAttType.qty72 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty72', tag=u'qty72')
quantityTypeAttType.qty73 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty73', tag=u'qty73')
quantityTypeAttType.qty74 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty74', tag=u'qty74')
quantityTypeAttType.qty75 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty75', tag=u'qty75')
quantityTypeAttType.qty76 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty76', tag=u'qty76')
quantityTypeAttType.qty77 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty77', tag=u'qty77')
quantityTypeAttType.qty78 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty78', tag=u'qty78')
quantityTypeAttType.qty79 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty79', tag=u'qty79')
quantityTypeAttType.qty80 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty80', tag=u'qty80')
quantityTypeAttType.qty81 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty81', tag=u'qty81')
quantityTypeAttType.qty82 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty82', tag=u'qty82')
quantityTypeAttType.qty83 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty83', tag=u'qty83')
quantityTypeAttType.qty84 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty84', tag=u'qty84')
quantityTypeAttType.qty85 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty85', tag=u'qty85')
quantityTypeAttType.qty86 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty86', tag=u'qty86')
quantityTypeAttType.qty87 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty87', tag=u'qty87')
quantityTypeAttType.qty88 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty88', tag=u'qty88')
quantityTypeAttType.qty89 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty89', tag=u'qty89')
quantityTypeAttType.qty90 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty90', tag=u'qty90')
quantityTypeAttType.qty91 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty91', tag=u'qty91')
quantityTypeAttType.qty92 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty92', tag=u'qty92')
quantityTypeAttType.qty93 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty93', tag=u'qty93')
quantityTypeAttType.qty94 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty94', tag=u'qty94')
quantityTypeAttType.qty95 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty95', tag=u'qty95')
quantityTypeAttType.qty96 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty96', tag=u'qty96')
quantityTypeAttType.qty97 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty97', tag=u'qty97')
quantityTypeAttType.qty98 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty98', tag=u'qty98')
quantityTypeAttType.qty99 = quantityTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'qty99', tag=u'qty99')
quantityTypeAttType._InitializeFacetMap(quantityTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'quantityTypeAttType', quantityTypeAttType)

# Atomic simple type: internalRefTargetTypeAttType
class internalRefTargetTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'internalRefTargetTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3013, 4)
    _Documentation = None
internalRefTargetTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=internalRefTargetTypeAttType, enum_prefix=None)
internalRefTargetTypeAttType.figure = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'figure', tag=u'figure')
internalRefTargetTypeAttType.table = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'table', tag=u'table')
internalRefTargetTypeAttType.multimedia = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'multimedia', tag=u'multimedia')
internalRefTargetTypeAttType.supply = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'supply', tag=u'supply')
internalRefTargetTypeAttType.supequip = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'supequip', tag=u'supequip')
internalRefTargetTypeAttType.spares = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'spares', tag=u'spares')
internalRefTargetTypeAttType.para = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'para', tag=u'para')
internalRefTargetTypeAttType.step = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'step', tag=u'step')
internalRefTargetTypeAttType.graphic = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'graphic', tag=u'graphic')
internalRefTargetTypeAttType.multimediaobject = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'multimediaobject', tag=u'multimediaobject')
internalRefTargetTypeAttType.hotspot = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'hotspot', tag=u'hotspot')
internalRefTargetTypeAttType.param = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'param', tag=u'param')
internalRefTargetTypeAttType.other = internalRefTargetTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'other', tag=u'other')
internalRefTargetTypeAttType._InitializeFacetMap(internalRefTargetTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'internalRefTargetTypeAttType', internalRefTargetTypeAttType)

# Atomic simple type: listItemPrefixAttType
class listItemPrefixAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listItemPrefixAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3227, 4)
    _Documentation = None
listItemPrefixAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=listItemPrefixAttType, enum_prefix=None)
listItemPrefixAttType.pf01 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf01', tag=u'pf01')
listItemPrefixAttType.pf02 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf02', tag=u'pf02')
listItemPrefixAttType.pf03 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf03', tag=u'pf03')
listItemPrefixAttType.pf04 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf04', tag=u'pf04')
listItemPrefixAttType.pf05 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf05', tag=u'pf05')
listItemPrefixAttType.pf06 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf06', tag=u'pf06')
listItemPrefixAttType.pf07 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf07', tag=u'pf07')
listItemPrefixAttType.pf08 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf08', tag=u'pf08')
listItemPrefixAttType.pf09 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf09', tag=u'pf09')
listItemPrefixAttType.pf10 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf10', tag=u'pf10')
listItemPrefixAttType.pf11 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf11', tag=u'pf11')
listItemPrefixAttType.pf12 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf12', tag=u'pf12')
listItemPrefixAttType.pf13 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf13', tag=u'pf13')
listItemPrefixAttType.pf14 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf14', tag=u'pf14')
listItemPrefixAttType.pf15 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf15', tag=u'pf15')
listItemPrefixAttType.pf16 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf16', tag=u'pf16')
listItemPrefixAttType.pf17 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf17', tag=u'pf17')
listItemPrefixAttType.pf18 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf18', tag=u'pf18')
listItemPrefixAttType.pf19 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf19', tag=u'pf19')
listItemPrefixAttType.pf20 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf20', tag=u'pf20')
listItemPrefixAttType.pf21 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf21', tag=u'pf21')
listItemPrefixAttType.pf22 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf22', tag=u'pf22')
listItemPrefixAttType.pf23 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf23', tag=u'pf23')
listItemPrefixAttType.pf24 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf24', tag=u'pf24')
listItemPrefixAttType.pf25 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf25', tag=u'pf25')
listItemPrefixAttType.pf26 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf26', tag=u'pf26')
listItemPrefixAttType.pf27 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf27', tag=u'pf27')
listItemPrefixAttType.pf28 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf28', tag=u'pf28')
listItemPrefixAttType.pf29 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf29', tag=u'pf29')
listItemPrefixAttType.pf30 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf30', tag=u'pf30')
listItemPrefixAttType.pf31 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf31', tag=u'pf31')
listItemPrefixAttType.pf32 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf32', tag=u'pf32')
listItemPrefixAttType.pf33 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf33', tag=u'pf33')
listItemPrefixAttType.pf34 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf34', tag=u'pf34')
listItemPrefixAttType.pf35 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf35', tag=u'pf35')
listItemPrefixAttType.pf36 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf36', tag=u'pf36')
listItemPrefixAttType.pf37 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf37', tag=u'pf37')
listItemPrefixAttType.pf38 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf38', tag=u'pf38')
listItemPrefixAttType.pf39 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf39', tag=u'pf39')
listItemPrefixAttType.pf40 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf40', tag=u'pf40')
listItemPrefixAttType.pf41 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf41', tag=u'pf41')
listItemPrefixAttType.pf42 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf42', tag=u'pf42')
listItemPrefixAttType.pf43 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf43', tag=u'pf43')
listItemPrefixAttType.pf44 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf44', tag=u'pf44')
listItemPrefixAttType.pf45 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf45', tag=u'pf45')
listItemPrefixAttType.pf46 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf46', tag=u'pf46')
listItemPrefixAttType.pf47 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf47', tag=u'pf47')
listItemPrefixAttType.pf48 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf48', tag=u'pf48')
listItemPrefixAttType.pf49 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf49', tag=u'pf49')
listItemPrefixAttType.pf50 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf50', tag=u'pf50')
listItemPrefixAttType.pf51 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf51', tag=u'pf51')
listItemPrefixAttType.pf52 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf52', tag=u'pf52')
listItemPrefixAttType.pf53 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf53', tag=u'pf53')
listItemPrefixAttType.pf54 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf54', tag=u'pf54')
listItemPrefixAttType.pf55 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf55', tag=u'pf55')
listItemPrefixAttType.pf56 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf56', tag=u'pf56')
listItemPrefixAttType.pf57 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf57', tag=u'pf57')
listItemPrefixAttType.pf58 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf58', tag=u'pf58')
listItemPrefixAttType.pf59 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf59', tag=u'pf59')
listItemPrefixAttType.pf60 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf60', tag=u'pf60')
listItemPrefixAttType.pf61 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf61', tag=u'pf61')
listItemPrefixAttType.pf62 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf62', tag=u'pf62')
listItemPrefixAttType.pf63 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf63', tag=u'pf63')
listItemPrefixAttType.pf64 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf64', tag=u'pf64')
listItemPrefixAttType.pf65 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf65', tag=u'pf65')
listItemPrefixAttType.pf66 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf66', tag=u'pf66')
listItemPrefixAttType.pf67 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf67', tag=u'pf67')
listItemPrefixAttType.pf68 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf68', tag=u'pf68')
listItemPrefixAttType.pf69 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf69', tag=u'pf69')
listItemPrefixAttType.pf70 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf70', tag=u'pf70')
listItemPrefixAttType.pf71 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf71', tag=u'pf71')
listItemPrefixAttType.pf72 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf72', tag=u'pf72')
listItemPrefixAttType.pf73 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf73', tag=u'pf73')
listItemPrefixAttType.pf74 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf74', tag=u'pf74')
listItemPrefixAttType.pf75 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf75', tag=u'pf75')
listItemPrefixAttType.pf76 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf76', tag=u'pf76')
listItemPrefixAttType.pf77 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf77', tag=u'pf77')
listItemPrefixAttType.pf78 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf78', tag=u'pf78')
listItemPrefixAttType.pf79 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf79', tag=u'pf79')
listItemPrefixAttType.pf80 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf80', tag=u'pf80')
listItemPrefixAttType.pf81 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf81', tag=u'pf81')
listItemPrefixAttType.pf82 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf82', tag=u'pf82')
listItemPrefixAttType.pf83 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf83', tag=u'pf83')
listItemPrefixAttType.pf84 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf84', tag=u'pf84')
listItemPrefixAttType.pf85 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf85', tag=u'pf85')
listItemPrefixAttType.pf86 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf86', tag=u'pf86')
listItemPrefixAttType.pf87 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf87', tag=u'pf87')
listItemPrefixAttType.pf88 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf88', tag=u'pf88')
listItemPrefixAttType.pf89 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf89', tag=u'pf89')
listItemPrefixAttType.pf90 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf90', tag=u'pf90')
listItemPrefixAttType.pf91 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf91', tag=u'pf91')
listItemPrefixAttType.pf92 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf92', tag=u'pf92')
listItemPrefixAttType.pf93 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf93', tag=u'pf93')
listItemPrefixAttType.pf94 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf94', tag=u'pf94')
listItemPrefixAttType.pf95 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf95', tag=u'pf95')
listItemPrefixAttType.pf96 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf96', tag=u'pf96')
listItemPrefixAttType.pf97 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf97', tag=u'pf97')
listItemPrefixAttType.pf98 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf98', tag=u'pf98')
listItemPrefixAttType.pf99 = listItemPrefixAttType._CF_enumeration.addEnumeration(unicode_value=u'pf99', tag=u'pf99')
listItemPrefixAttType._InitializeFacetMap(listItemPrefixAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'listItemPrefixAttType', listItemPrefixAttType)

# Atomic simple type: footnoteMarkAttType
class footnoteMarkAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'footnoteMarkAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3400, 4)
    _Documentation = None
footnoteMarkAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=footnoteMarkAttType, enum_prefix=None)
footnoteMarkAttType.num = footnoteMarkAttType._CF_enumeration.addEnumeration(unicode_value=u'num', tag=u'num')
footnoteMarkAttType.sym = footnoteMarkAttType._CF_enumeration.addEnumeration(unicode_value=u'sym', tag=u'sym')
footnoteMarkAttType.alpha = footnoteMarkAttType._CF_enumeration.addEnumeration(unicode_value=u'alpha', tag=u'alpha')
footnoteMarkAttType._InitializeFacetMap(footnoteMarkAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'footnoteMarkAttType', footnoteMarkAttType)

# Atomic simple type: emphasisTypeAttType
class emphasisTypeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'emphasisTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3412, 4)
    _Documentation = None
emphasisTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=emphasisTypeAttType, enum_prefix=None)
emphasisTypeAttType.em01 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em01', tag=u'em01')
emphasisTypeAttType.em02 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em02', tag=u'em02')
emphasisTypeAttType.em03 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em03', tag=u'em03')
emphasisTypeAttType.em04 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em04', tag=u'em04')
emphasisTypeAttType.em05 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em05', tag=u'em05')
emphasisTypeAttType.em06 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em06', tag=u'em06')
emphasisTypeAttType.em07 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em07', tag=u'em07')
emphasisTypeAttType.em08 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em08', tag=u'em08')
emphasisTypeAttType.em09 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em09', tag=u'em09')
emphasisTypeAttType.em10 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em10', tag=u'em10')
emphasisTypeAttType.em11 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em11', tag=u'em11')
emphasisTypeAttType.em12 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em12', tag=u'em12')
emphasisTypeAttType.em13 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em13', tag=u'em13')
emphasisTypeAttType.em14 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em14', tag=u'em14')
emphasisTypeAttType.em15 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em15', tag=u'em15')
emphasisTypeAttType.em16 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em16', tag=u'em16')
emphasisTypeAttType.em17 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em17', tag=u'em17')
emphasisTypeAttType.em18 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em18', tag=u'em18')
emphasisTypeAttType.em19 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em19', tag=u'em19')
emphasisTypeAttType.em20 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em20', tag=u'em20')
emphasisTypeAttType.em21 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em21', tag=u'em21')
emphasisTypeAttType.em22 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em22', tag=u'em22')
emphasisTypeAttType.em23 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em23', tag=u'em23')
emphasisTypeAttType.em24 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em24', tag=u'em24')
emphasisTypeAttType.em25 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em25', tag=u'em25')
emphasisTypeAttType.em26 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em26', tag=u'em26')
emphasisTypeAttType.em27 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em27', tag=u'em27')
emphasisTypeAttType.em28 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em28', tag=u'em28')
emphasisTypeAttType.em29 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em29', tag=u'em29')
emphasisTypeAttType.em30 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em30', tag=u'em30')
emphasisTypeAttType.em31 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em31', tag=u'em31')
emphasisTypeAttType.em32 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em32', tag=u'em32')
emphasisTypeAttType.em33 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em33', tag=u'em33')
emphasisTypeAttType.em34 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em34', tag=u'em34')
emphasisTypeAttType.em35 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em35', tag=u'em35')
emphasisTypeAttType.em36 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em36', tag=u'em36')
emphasisTypeAttType.em37 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em37', tag=u'em37')
emphasisTypeAttType.em38 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em38', tag=u'em38')
emphasisTypeAttType.em39 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em39', tag=u'em39')
emphasisTypeAttType.em40 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em40', tag=u'em40')
emphasisTypeAttType.em41 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em41', tag=u'em41')
emphasisTypeAttType.em42 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em42', tag=u'em42')
emphasisTypeAttType.em43 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em43', tag=u'em43')
emphasisTypeAttType.em44 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em44', tag=u'em44')
emphasisTypeAttType.em45 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em45', tag=u'em45')
emphasisTypeAttType.em46 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em46', tag=u'em46')
emphasisTypeAttType.em47 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em47', tag=u'em47')
emphasisTypeAttType.em48 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em48', tag=u'em48')
emphasisTypeAttType.em49 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em49', tag=u'em49')
emphasisTypeAttType.em50 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em50', tag=u'em50')
emphasisTypeAttType.em51 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em51', tag=u'em51')
emphasisTypeAttType.em52 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em52', tag=u'em52')
emphasisTypeAttType.em53 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em53', tag=u'em53')
emphasisTypeAttType.em54 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em54', tag=u'em54')
emphasisTypeAttType.em55 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em55', tag=u'em55')
emphasisTypeAttType.em56 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em56', tag=u'em56')
emphasisTypeAttType.em57 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em57', tag=u'em57')
emphasisTypeAttType.em58 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em58', tag=u'em58')
emphasisTypeAttType.em59 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em59', tag=u'em59')
emphasisTypeAttType.em60 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em60', tag=u'em60')
emphasisTypeAttType.em61 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em61', tag=u'em61')
emphasisTypeAttType.em62 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em62', tag=u'em62')
emphasisTypeAttType.em63 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em63', tag=u'em63')
emphasisTypeAttType.em64 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em64', tag=u'em64')
emphasisTypeAttType.em65 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em65', tag=u'em65')
emphasisTypeAttType.em66 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em66', tag=u'em66')
emphasisTypeAttType.em67 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em67', tag=u'em67')
emphasisTypeAttType.em68 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em68', tag=u'em68')
emphasisTypeAttType.em69 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em69', tag=u'em69')
emphasisTypeAttType.em70 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em70', tag=u'em70')
emphasisTypeAttType.em71 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em71', tag=u'em71')
emphasisTypeAttType.em72 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em72', tag=u'em72')
emphasisTypeAttType.em73 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em73', tag=u'em73')
emphasisTypeAttType.em74 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em74', tag=u'em74')
emphasisTypeAttType.em75 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em75', tag=u'em75')
emphasisTypeAttType.em76 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em76', tag=u'em76')
emphasisTypeAttType.em77 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em77', tag=u'em77')
emphasisTypeAttType.em78 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em78', tag=u'em78')
emphasisTypeAttType.em79 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em79', tag=u'em79')
emphasisTypeAttType.em80 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em80', tag=u'em80')
emphasisTypeAttType.em81 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em81', tag=u'em81')
emphasisTypeAttType.em82 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em82', tag=u'em82')
emphasisTypeAttType.em83 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em83', tag=u'em83')
emphasisTypeAttType.em84 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em84', tag=u'em84')
emphasisTypeAttType.em85 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em85', tag=u'em85')
emphasisTypeAttType.em86 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em86', tag=u'em86')
emphasisTypeAttType.em87 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em87', tag=u'em87')
emphasisTypeAttType.em88 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em88', tag=u'em88')
emphasisTypeAttType.em89 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em89', tag=u'em89')
emphasisTypeAttType.em90 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em90', tag=u'em90')
emphasisTypeAttType.em91 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em91', tag=u'em91')
emphasisTypeAttType.em92 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em92', tag=u'em92')
emphasisTypeAttType.em93 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em93', tag=u'em93')
emphasisTypeAttType.em94 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em94', tag=u'em94')
emphasisTypeAttType.em95 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em95', tag=u'em95')
emphasisTypeAttType.em96 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em96', tag=u'em96')
emphasisTypeAttType.em97 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em97', tag=u'em97')
emphasisTypeAttType.em98 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em98', tag=u'em98')
emphasisTypeAttType.em99 = emphasisTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'em99', tag=u'em99')
emphasisTypeAttType._InitializeFacetMap(emphasisTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'emphasisTypeAttType', emphasisTypeAttType)

# Atomic simple type: applicPropertyTypeAttType
class applicPropertyTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'applicPropertyTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3582, 4)
    _Documentation = None
applicPropertyTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=applicPropertyTypeAttType, enum_prefix=None)
applicPropertyTypeAttType.condition = applicPropertyTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'condition', tag=u'condition')
applicPropertyTypeAttType.prodattr = applicPropertyTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'prodattr', tag=u'prodattr')
applicPropertyTypeAttType._InitializeFacetMap(applicPropertyTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'applicPropertyTypeAttType', applicPropertyTypeAttType)

# Atomic simple type: applicPropertyValuesAttType
class applicPropertyValuesAttType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'applicPropertyValuesAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3589, 4)
    _Documentation = None
applicPropertyValuesAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
applicPropertyValuesAttType._CF_pattern.addPattern(pattern=u'[^~|\\t\\n\\r]+(~[^~|\\t\\n\\r]+)?(\\|[^~|\\t\\n\\r]+(~[^~|\\t\\n\\r]+)?)*')
applicPropertyValuesAttType._InitializeFacetMap(applicPropertyValuesAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'applicPropertyValuesAttType', applicPropertyValuesAttType)

# Atomic simple type: andOrAttType
class andOrAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'andOrAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3605, 4)
    _Documentation = None
andOrAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=andOrAttType, enum_prefix=None)
andOrAttType.and_ = andOrAttType._CF_enumeration.addEnumeration(unicode_value=u'and', tag=u'and_')
andOrAttType.or_ = andOrAttType._CF_enumeration.addEnumeration(unicode_value=u'or', tag=u'or_')
andOrAttType._InitializeFacetMap(andOrAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'andOrAttType', andOrAttType)

# Atomic simple type: applicConfigurationAttType
class applicConfigurationAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'applicConfigurationAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3612, 4)
    _Documentation = None
applicConfigurationAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=applicConfigurationAttType, enum_prefix=None)
applicConfigurationAttType.allowed = applicConfigurationAttType._CF_enumeration.addEnumeration(unicode_value=u'allowed', tag=u'allowed')
applicConfigurationAttType.built = applicConfigurationAttType._CF_enumeration.addEnumeration(unicode_value=u'built', tag=u'built')
applicConfigurationAttType.designed = applicConfigurationAttType._CF_enumeration.addEnumeration(unicode_value=u'designed', tag=u'designed')
applicConfigurationAttType.installed = applicConfigurationAttType._CF_enumeration.addEnumeration(unicode_value=u'installed', tag=u'installed')
applicConfigurationAttType.manufactured = applicConfigurationAttType._CF_enumeration.addEnumeration(unicode_value=u'manufactured', tag=u'manufactured')
applicConfigurationAttType.supported = applicConfigurationAttType._CF_enumeration.addEnumeration(unicode_value=u'supported', tag=u'supported')
applicConfigurationAttType._InitializeFacetMap(applicConfigurationAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'applicConfigurationAttType', applicConfigurationAttType)

# Atomic simple type: modificationTypeAttType
class modificationTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'modificationTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3685, 4)
    _Documentation = None
modificationTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=modificationTypeAttType, enum_prefix=None)
modificationTypeAttType.pre = modificationTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'pre', tag=u'pre')
modificationTypeAttType.post = modificationTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'post', tag=u'post')
modificationTypeAttType.prandpo = modificationTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'prandpo', tag=u'prandpo')
modificationTypeAttType._InitializeFacetMap(modificationTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'modificationTypeAttType', modificationTypeAttType)

# Atomic simple type: verificationTypeAttType
class verificationTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'verificationTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3717, 4)
    _Documentation = None
verificationTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=verificationTypeAttType, enum_prefix=None)
verificationTypeAttType.tabtop = verificationTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'tabtop', tag=u'tabtop')
verificationTypeAttType.onobject = verificationTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'onobject', tag=u'onobject')
verificationTypeAttType.ttandoo = verificationTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'ttandoo', tag=u'ttandoo')
verificationTypeAttType._InitializeFacetMap(verificationTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'verificationTypeAttType', verificationTypeAttType)

# Atomic simple type: skillLevelCodeAttType
class skillLevelCodeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'skillLevelCodeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3738, 4)
    _Documentation = None
skillLevelCodeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=skillLevelCodeAttType, enum_prefix=None)
skillLevelCodeAttType.sk01 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk01', tag=u'sk01')
skillLevelCodeAttType.sk02 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk02', tag=u'sk02')
skillLevelCodeAttType.sk03 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk03', tag=u'sk03')
skillLevelCodeAttType.sk04 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk04', tag=u'sk04')
skillLevelCodeAttType.sk05 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk05', tag=u'sk05')
skillLevelCodeAttType.sk06 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk06', tag=u'sk06')
skillLevelCodeAttType.sk07 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk07', tag=u'sk07')
skillLevelCodeAttType.sk08 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk08', tag=u'sk08')
skillLevelCodeAttType.sk09 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk09', tag=u'sk09')
skillLevelCodeAttType.sk10 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk10', tag=u'sk10')
skillLevelCodeAttType.sk11 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk11', tag=u'sk11')
skillLevelCodeAttType.sk12 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk12', tag=u'sk12')
skillLevelCodeAttType.sk13 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk13', tag=u'sk13')
skillLevelCodeAttType.sk14 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk14', tag=u'sk14')
skillLevelCodeAttType.sk15 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk15', tag=u'sk15')
skillLevelCodeAttType.sk16 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk16', tag=u'sk16')
skillLevelCodeAttType.sk17 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk17', tag=u'sk17')
skillLevelCodeAttType.sk18 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk18', tag=u'sk18')
skillLevelCodeAttType.sk19 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk19', tag=u'sk19')
skillLevelCodeAttType.sk20 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk20', tag=u'sk20')
skillLevelCodeAttType.sk21 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk21', tag=u'sk21')
skillLevelCodeAttType.sk22 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk22', tag=u'sk22')
skillLevelCodeAttType.sk23 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk23', tag=u'sk23')
skillLevelCodeAttType.sk24 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk24', tag=u'sk24')
skillLevelCodeAttType.sk25 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk25', tag=u'sk25')
skillLevelCodeAttType.sk26 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk26', tag=u'sk26')
skillLevelCodeAttType.sk27 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk27', tag=u'sk27')
skillLevelCodeAttType.sk28 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk28', tag=u'sk28')
skillLevelCodeAttType.sk29 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk29', tag=u'sk29')
skillLevelCodeAttType.sk30 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk30', tag=u'sk30')
skillLevelCodeAttType.sk31 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk31', tag=u'sk31')
skillLevelCodeAttType.sk32 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk32', tag=u'sk32')
skillLevelCodeAttType.sk33 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk33', tag=u'sk33')
skillLevelCodeAttType.sk34 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk34', tag=u'sk34')
skillLevelCodeAttType.sk35 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk35', tag=u'sk35')
skillLevelCodeAttType.sk36 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk36', tag=u'sk36')
skillLevelCodeAttType.sk37 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk37', tag=u'sk37')
skillLevelCodeAttType.sk38 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk38', tag=u'sk38')
skillLevelCodeAttType.sk39 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk39', tag=u'sk39')
skillLevelCodeAttType.sk40 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk40', tag=u'sk40')
skillLevelCodeAttType.sk41 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk41', tag=u'sk41')
skillLevelCodeAttType.sk42 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk42', tag=u'sk42')
skillLevelCodeAttType.sk43 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk43', tag=u'sk43')
skillLevelCodeAttType.sk44 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk44', tag=u'sk44')
skillLevelCodeAttType.sk45 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk45', tag=u'sk45')
skillLevelCodeAttType.sk46 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk46', tag=u'sk46')
skillLevelCodeAttType.sk47 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk47', tag=u'sk47')
skillLevelCodeAttType.sk48 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk48', tag=u'sk48')
skillLevelCodeAttType.sk49 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk49', tag=u'sk49')
skillLevelCodeAttType.sk50 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk50', tag=u'sk50')
skillLevelCodeAttType.sk51 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk51', tag=u'sk51')
skillLevelCodeAttType.sk52 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk52', tag=u'sk52')
skillLevelCodeAttType.sk53 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk53', tag=u'sk53')
skillLevelCodeAttType.sk54 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk54', tag=u'sk54')
skillLevelCodeAttType.sk55 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk55', tag=u'sk55')
skillLevelCodeAttType.sk56 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk56', tag=u'sk56')
skillLevelCodeAttType.sk57 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk57', tag=u'sk57')
skillLevelCodeAttType.sk58 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk58', tag=u'sk58')
skillLevelCodeAttType.sk59 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk59', tag=u'sk59')
skillLevelCodeAttType.sk60 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk60', tag=u'sk60')
skillLevelCodeAttType.sk61 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk61', tag=u'sk61')
skillLevelCodeAttType.sk62 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk62', tag=u'sk62')
skillLevelCodeAttType.sk63 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk63', tag=u'sk63')
skillLevelCodeAttType.sk64 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk64', tag=u'sk64')
skillLevelCodeAttType.sk65 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk65', tag=u'sk65')
skillLevelCodeAttType.sk66 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk66', tag=u'sk66')
skillLevelCodeAttType.sk67 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk67', tag=u'sk67')
skillLevelCodeAttType.sk68 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk68', tag=u'sk68')
skillLevelCodeAttType.sk69 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk69', tag=u'sk69')
skillLevelCodeAttType.sk70 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk70', tag=u'sk70')
skillLevelCodeAttType.sk71 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk71', tag=u'sk71')
skillLevelCodeAttType.sk72 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk72', tag=u'sk72')
skillLevelCodeAttType.sk73 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk73', tag=u'sk73')
skillLevelCodeAttType.sk74 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk74', tag=u'sk74')
skillLevelCodeAttType.sk75 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk75', tag=u'sk75')
skillLevelCodeAttType.sk76 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk76', tag=u'sk76')
skillLevelCodeAttType.sk77 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk77', tag=u'sk77')
skillLevelCodeAttType.sk78 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk78', tag=u'sk78')
skillLevelCodeAttType.sk79 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk79', tag=u'sk79')
skillLevelCodeAttType.sk80 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk80', tag=u'sk80')
skillLevelCodeAttType.sk81 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk81', tag=u'sk81')
skillLevelCodeAttType.sk82 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk82', tag=u'sk82')
skillLevelCodeAttType.sk83 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk83', tag=u'sk83')
skillLevelCodeAttType.sk84 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk84', tag=u'sk84')
skillLevelCodeAttType.sk85 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk85', tag=u'sk85')
skillLevelCodeAttType.sk86 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk86', tag=u'sk86')
skillLevelCodeAttType.sk87 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk87', tag=u'sk87')
skillLevelCodeAttType.sk88 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk88', tag=u'sk88')
skillLevelCodeAttType.sk89 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk89', tag=u'sk89')
skillLevelCodeAttType.sk90 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk90', tag=u'sk90')
skillLevelCodeAttType.sk91 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk91', tag=u'sk91')
skillLevelCodeAttType.sk92 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk92', tag=u'sk92')
skillLevelCodeAttType.sk93 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk93', tag=u'sk93')
skillLevelCodeAttType.sk94 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk94', tag=u'sk94')
skillLevelCodeAttType.sk95 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk95', tag=u'sk95')
skillLevelCodeAttType.sk96 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk96', tag=u'sk96')
skillLevelCodeAttType.sk97 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk97', tag=u'sk97')
skillLevelCodeAttType.sk98 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk98', tag=u'sk98')
skillLevelCodeAttType.sk99 = skillLevelCodeAttType._CF_enumeration.addEnumeration(unicode_value=u'sk99', tag=u'sk99')
skillLevelCodeAttType._InitializeFacetMap(skillLevelCodeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'skillLevelCodeAttType', skillLevelCodeAttType)

# Atomic simple type: updateReasonTypeAttType
class updateReasonTypeAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'updateReasonTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3852, 4)
    _Documentation = None
updateReasonTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=updateReasonTypeAttType, enum_prefix=None)
updateReasonTypeAttType.urt01 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt01', tag=u'urt01')
updateReasonTypeAttType.urt02 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt02', tag=u'urt02')
updateReasonTypeAttType.urt03 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt03', tag=u'urt03')
updateReasonTypeAttType.urt04 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt04', tag=u'urt04')
updateReasonTypeAttType.urt05 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt05', tag=u'urt05')
updateReasonTypeAttType.urt06 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt06', tag=u'urt06')
updateReasonTypeAttType.urt07 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt07', tag=u'urt07')
updateReasonTypeAttType.urt08 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt08', tag=u'urt08')
updateReasonTypeAttType.urt09 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt09', tag=u'urt09')
updateReasonTypeAttType.urt10 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt10', tag=u'urt10')
updateReasonTypeAttType.urt11 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt11', tag=u'urt11')
updateReasonTypeAttType.urt12 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt12', tag=u'urt12')
updateReasonTypeAttType.urt13 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt13', tag=u'urt13')
updateReasonTypeAttType.urt14 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt14', tag=u'urt14')
updateReasonTypeAttType.urt15 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt15', tag=u'urt15')
updateReasonTypeAttType.urt16 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt16', tag=u'urt16')
updateReasonTypeAttType.urt17 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt17', tag=u'urt17')
updateReasonTypeAttType.urt18 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt18', tag=u'urt18')
updateReasonTypeAttType.urt19 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt19', tag=u'urt19')
updateReasonTypeAttType.urt20 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt20', tag=u'urt20')
updateReasonTypeAttType.urt21 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt21', tag=u'urt21')
updateReasonTypeAttType.urt22 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt22', tag=u'urt22')
updateReasonTypeAttType.urt23 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt23', tag=u'urt23')
updateReasonTypeAttType.urt24 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt24', tag=u'urt24')
updateReasonTypeAttType.urt25 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt25', tag=u'urt25')
updateReasonTypeAttType.urt26 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt26', tag=u'urt26')
updateReasonTypeAttType.urt27 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt27', tag=u'urt27')
updateReasonTypeAttType.urt28 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt28', tag=u'urt28')
updateReasonTypeAttType.urt29 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt29', tag=u'urt29')
updateReasonTypeAttType.urt30 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt30', tag=u'urt30')
updateReasonTypeAttType.urt31 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt31', tag=u'urt31')
updateReasonTypeAttType.urt32 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt32', tag=u'urt32')
updateReasonTypeAttType.urt33 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt33', tag=u'urt33')
updateReasonTypeAttType.urt34 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt34', tag=u'urt34')
updateReasonTypeAttType.urt35 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt35', tag=u'urt35')
updateReasonTypeAttType.urt36 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt36', tag=u'urt36')
updateReasonTypeAttType.urt37 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt37', tag=u'urt37')
updateReasonTypeAttType.urt38 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt38', tag=u'urt38')
updateReasonTypeAttType.urt39 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt39', tag=u'urt39')
updateReasonTypeAttType.urt40 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt40', tag=u'urt40')
updateReasonTypeAttType.urt41 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt41', tag=u'urt41')
updateReasonTypeAttType.urt42 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt42', tag=u'urt42')
updateReasonTypeAttType.urt43 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt43', tag=u'urt43')
updateReasonTypeAttType.urt44 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt44', tag=u'urt44')
updateReasonTypeAttType.urt45 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt45', tag=u'urt45')
updateReasonTypeAttType.urt46 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt46', tag=u'urt46')
updateReasonTypeAttType.urt47 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt47', tag=u'urt47')
updateReasonTypeAttType.urt48 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt48', tag=u'urt48')
updateReasonTypeAttType.urt49 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt49', tag=u'urt49')
updateReasonTypeAttType.urt50 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt50', tag=u'urt50')
updateReasonTypeAttType.urt51 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt51', tag=u'urt51')
updateReasonTypeAttType.urt52 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt52', tag=u'urt52')
updateReasonTypeAttType.urt53 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt53', tag=u'urt53')
updateReasonTypeAttType.urt54 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt54', tag=u'urt54')
updateReasonTypeAttType.urt55 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt55', tag=u'urt55')
updateReasonTypeAttType.urt56 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt56', tag=u'urt56')
updateReasonTypeAttType.urt57 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt57', tag=u'urt57')
updateReasonTypeAttType.urt58 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt58', tag=u'urt58')
updateReasonTypeAttType.urt59 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt59', tag=u'urt59')
updateReasonTypeAttType.urt60 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt60', tag=u'urt60')
updateReasonTypeAttType.urt61 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt61', tag=u'urt61')
updateReasonTypeAttType.urt62 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt62', tag=u'urt62')
updateReasonTypeAttType.urt63 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt63', tag=u'urt63')
updateReasonTypeAttType.urt64 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt64', tag=u'urt64')
updateReasonTypeAttType.urt65 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt65', tag=u'urt65')
updateReasonTypeAttType.urt66 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt66', tag=u'urt66')
updateReasonTypeAttType.urt67 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt67', tag=u'urt67')
updateReasonTypeAttType.urt68 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt68', tag=u'urt68')
updateReasonTypeAttType.urt69 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt69', tag=u'urt69')
updateReasonTypeAttType.urt70 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt70', tag=u'urt70')
updateReasonTypeAttType.urt71 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt71', tag=u'urt71')
updateReasonTypeAttType.urt72 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt72', tag=u'urt72')
updateReasonTypeAttType.urt73 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt73', tag=u'urt73')
updateReasonTypeAttType.urt74 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt74', tag=u'urt74')
updateReasonTypeAttType.urt75 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt75', tag=u'urt75')
updateReasonTypeAttType.urt76 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt76', tag=u'urt76')
updateReasonTypeAttType.urt77 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt77', tag=u'urt77')
updateReasonTypeAttType.urt78 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt78', tag=u'urt78')
updateReasonTypeAttType.urt79 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt79', tag=u'urt79')
updateReasonTypeAttType.urt80 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt80', tag=u'urt80')
updateReasonTypeAttType.urt81 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt81', tag=u'urt81')
updateReasonTypeAttType.urt82 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt82', tag=u'urt82')
updateReasonTypeAttType.urt83 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt83', tag=u'urt83')
updateReasonTypeAttType.urt84 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt84', tag=u'urt84')
updateReasonTypeAttType.urt85 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt85', tag=u'urt85')
updateReasonTypeAttType.urt86 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt86', tag=u'urt86')
updateReasonTypeAttType.urt87 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt87', tag=u'urt87')
updateReasonTypeAttType.urt88 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt88', tag=u'urt88')
updateReasonTypeAttType.urt89 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt89', tag=u'urt89')
updateReasonTypeAttType.urt90 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt90', tag=u'urt90')
updateReasonTypeAttType.urt91 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt91', tag=u'urt91')
updateReasonTypeAttType.urt92 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt92', tag=u'urt92')
updateReasonTypeAttType.urt93 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt93', tag=u'urt93')
updateReasonTypeAttType.urt94 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt94', tag=u'urt94')
updateReasonTypeAttType.urt95 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt95', tag=u'urt95')
updateReasonTypeAttType.urt96 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt96', tag=u'urt96')
updateReasonTypeAttType.urt97 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt97', tag=u'urt97')
updateReasonTypeAttType.urt98 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt98', tag=u'urt98')
updateReasonTypeAttType.urt99 = updateReasonTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'urt99', tag=u'urt99')
updateReasonTypeAttType._InitializeFacetMap(updateReasonTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'updateReasonTypeAttType', updateReasonTypeAttType)

# Atomic simple type: issueTypeAttType
class issueTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'issueTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3969, 4)
    _Documentation = None
issueTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=issueTypeAttType, enum_prefix=None)
issueTypeAttType.new = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'new', tag=u'new')
issueTypeAttType.changed = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'changed', tag=u'changed')
issueTypeAttType.deleted = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'deleted', tag=u'deleted')
issueTypeAttType.revised = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'revised', tag=u'revised')
issueTypeAttType.status = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'status', tag=u'status')
issueTypeAttType.rinstate_changed = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'rinstate-changed', tag=u'rinstate_changed')
issueTypeAttType.rinstate_revised = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'rinstate-revised', tag=u'rinstate_revised')
issueTypeAttType.rinstate_status = issueTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'rinstate-status', tag=u'rinstate_status')
issueTypeAttType._InitializeFacetMap(issueTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'issueTypeAttType', issueTypeAttType)

# Atomic simple type: visibilityAttType
class visibilityAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'visibilityAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4149, 4)
    _Documentation = None
visibilityAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=visibilityAttType, enum_prefix=None)
visibilityAttType.visible = visibilityAttType._CF_enumeration.addEnumeration(unicode_value=u'visible', tag=u'visible')
visibilityAttType.hidden = visibilityAttType._CF_enumeration.addEnumeration(unicode_value=u'hidden', tag=u'hidden')
visibilityAttType._InitializeFacetMap(visibilityAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'visibilityAttType', visibilityAttType)

# Atomic simple type: accessPointTypeValueAttType
class accessPointTypeValueAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accessPointTypeValueAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4267, 4)
    _Documentation = None
accessPointTypeValueAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=accessPointTypeValueAttType, enum_prefix=None)
accessPointTypeValueAttType.accpnl01 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl01', tag=u'accpnl01')
accessPointTypeValueAttType.accpnl02 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl02', tag=u'accpnl02')
accessPointTypeValueAttType.accpnl03 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl03', tag=u'accpnl03')
accessPointTypeValueAttType.accpnl04 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl04', tag=u'accpnl04')
accessPointTypeValueAttType.accpnl05 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl05', tag=u'accpnl05')
accessPointTypeValueAttType.accpnl06 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl06', tag=u'accpnl06')
accessPointTypeValueAttType.accpnl07 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl07', tag=u'accpnl07')
accessPointTypeValueAttType.accpnl08 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl08', tag=u'accpnl08')
accessPointTypeValueAttType.accpnl09 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl09', tag=u'accpnl09')
accessPointTypeValueAttType.accpnl10 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl10', tag=u'accpnl10')
accessPointTypeValueAttType.accpnl11 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl11', tag=u'accpnl11')
accessPointTypeValueAttType.accpnl12 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl12', tag=u'accpnl12')
accessPointTypeValueAttType.accpnl13 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl13', tag=u'accpnl13')
accessPointTypeValueAttType.accpnl14 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl14', tag=u'accpnl14')
accessPointTypeValueAttType.accpnl15 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl15', tag=u'accpnl15')
accessPointTypeValueAttType.accpnl16 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl16', tag=u'accpnl16')
accessPointTypeValueAttType.accpnl17 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl17', tag=u'accpnl17')
accessPointTypeValueAttType.accpnl18 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl18', tag=u'accpnl18')
accessPointTypeValueAttType.accpnl19 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl19', tag=u'accpnl19')
accessPointTypeValueAttType.accpnl20 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl20', tag=u'accpnl20')
accessPointTypeValueAttType.accpnl21 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl21', tag=u'accpnl21')
accessPointTypeValueAttType.accpnl22 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl22', tag=u'accpnl22')
accessPointTypeValueAttType.accpnl23 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl23', tag=u'accpnl23')
accessPointTypeValueAttType.accpnl24 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl24', tag=u'accpnl24')
accessPointTypeValueAttType.accpnl25 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl25', tag=u'accpnl25')
accessPointTypeValueAttType.accpnl26 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl26', tag=u'accpnl26')
accessPointTypeValueAttType.accpnl27 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl27', tag=u'accpnl27')
accessPointTypeValueAttType.accpnl28 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl28', tag=u'accpnl28')
accessPointTypeValueAttType.accpnl29 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl29', tag=u'accpnl29')
accessPointTypeValueAttType.accpnl30 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl30', tag=u'accpnl30')
accessPointTypeValueAttType.accpnl31 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl31', tag=u'accpnl31')
accessPointTypeValueAttType.accpnl32 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl32', tag=u'accpnl32')
accessPointTypeValueAttType.accpnl33 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl33', tag=u'accpnl33')
accessPointTypeValueAttType.accpnl34 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl34', tag=u'accpnl34')
accessPointTypeValueAttType.accpnl35 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl35', tag=u'accpnl35')
accessPointTypeValueAttType.accpnl36 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl36', tag=u'accpnl36')
accessPointTypeValueAttType.accpnl37 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl37', tag=u'accpnl37')
accessPointTypeValueAttType.accpnl38 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl38', tag=u'accpnl38')
accessPointTypeValueAttType.accpnl39 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl39', tag=u'accpnl39')
accessPointTypeValueAttType.accpnl40 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl40', tag=u'accpnl40')
accessPointTypeValueAttType.accpnl41 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl41', tag=u'accpnl41')
accessPointTypeValueAttType.accpnl42 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl42', tag=u'accpnl42')
accessPointTypeValueAttType.accpnl43 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl43', tag=u'accpnl43')
accessPointTypeValueAttType.accpnl44 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl44', tag=u'accpnl44')
accessPointTypeValueAttType.accpnl45 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl45', tag=u'accpnl45')
accessPointTypeValueAttType.accpnl46 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl46', tag=u'accpnl46')
accessPointTypeValueAttType.accpnl47 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl47', tag=u'accpnl47')
accessPointTypeValueAttType.accpnl48 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl48', tag=u'accpnl48')
accessPointTypeValueAttType.accpnl49 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl49', tag=u'accpnl49')
accessPointTypeValueAttType.accpnl50 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl50', tag=u'accpnl50')
accessPointTypeValueAttType.accpnl51 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl51', tag=u'accpnl51')
accessPointTypeValueAttType.accpnl52 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl52', tag=u'accpnl52')
accessPointTypeValueAttType.accpnl53 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl53', tag=u'accpnl53')
accessPointTypeValueAttType.accpnl54 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl54', tag=u'accpnl54')
accessPointTypeValueAttType.accpnl55 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl55', tag=u'accpnl55')
accessPointTypeValueAttType.accpnl56 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl56', tag=u'accpnl56')
accessPointTypeValueAttType.accpnl57 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl57', tag=u'accpnl57')
accessPointTypeValueAttType.accpnl58 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl58', tag=u'accpnl58')
accessPointTypeValueAttType.accpnl59 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl59', tag=u'accpnl59')
accessPointTypeValueAttType.accpnl60 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl60', tag=u'accpnl60')
accessPointTypeValueAttType.accpnl61 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl61', tag=u'accpnl61')
accessPointTypeValueAttType.accpnl62 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl62', tag=u'accpnl62')
accessPointTypeValueAttType.accpnl63 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl63', tag=u'accpnl63')
accessPointTypeValueAttType.accpnl64 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl64', tag=u'accpnl64')
accessPointTypeValueAttType.accpnl65 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl65', tag=u'accpnl65')
accessPointTypeValueAttType.accpnl66 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl66', tag=u'accpnl66')
accessPointTypeValueAttType.accpnl67 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl67', tag=u'accpnl67')
accessPointTypeValueAttType.accpnl68 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl68', tag=u'accpnl68')
accessPointTypeValueAttType.accpnl69 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl69', tag=u'accpnl69')
accessPointTypeValueAttType.accpnl70 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl70', tag=u'accpnl70')
accessPointTypeValueAttType.accpnl71 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl71', tag=u'accpnl71')
accessPointTypeValueAttType.accpnl72 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl72', tag=u'accpnl72')
accessPointTypeValueAttType.accpnl73 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl73', tag=u'accpnl73')
accessPointTypeValueAttType.accpnl74 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl74', tag=u'accpnl74')
accessPointTypeValueAttType.accpnl75 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl75', tag=u'accpnl75')
accessPointTypeValueAttType.accpnl76 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl76', tag=u'accpnl76')
accessPointTypeValueAttType.accpnl77 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl77', tag=u'accpnl77')
accessPointTypeValueAttType.accpnl78 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl78', tag=u'accpnl78')
accessPointTypeValueAttType.accpnl79 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl79', tag=u'accpnl79')
accessPointTypeValueAttType.accpnl80 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl80', tag=u'accpnl80')
accessPointTypeValueAttType.accpnl81 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl81', tag=u'accpnl81')
accessPointTypeValueAttType.accpnl82 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl82', tag=u'accpnl82')
accessPointTypeValueAttType.accpnl83 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl83', tag=u'accpnl83')
accessPointTypeValueAttType.accpnl84 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl84', tag=u'accpnl84')
accessPointTypeValueAttType.accpnl85 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl85', tag=u'accpnl85')
accessPointTypeValueAttType.accpnl86 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl86', tag=u'accpnl86')
accessPointTypeValueAttType.accpnl87 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl87', tag=u'accpnl87')
accessPointTypeValueAttType.accpnl88 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl88', tag=u'accpnl88')
accessPointTypeValueAttType.accpnl89 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl89', tag=u'accpnl89')
accessPointTypeValueAttType.accpnl90 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl90', tag=u'accpnl90')
accessPointTypeValueAttType.accpnl91 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl91', tag=u'accpnl91')
accessPointTypeValueAttType.accpnl92 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl92', tag=u'accpnl92')
accessPointTypeValueAttType.accpnl93 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl93', tag=u'accpnl93')
accessPointTypeValueAttType.accpnl94 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl94', tag=u'accpnl94')
accessPointTypeValueAttType.accpnl95 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl95', tag=u'accpnl95')
accessPointTypeValueAttType.accpnl96 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl96', tag=u'accpnl96')
accessPointTypeValueAttType.accpnl97 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl97', tag=u'accpnl97')
accessPointTypeValueAttType.accpnl98 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl98', tag=u'accpnl98')
accessPointTypeValueAttType.accpnl99 = accessPointTypeValueAttType._CF_enumeration.addEnumeration(unicode_value=u'accpnl99', tag=u'accpnl99')
accessPointTypeValueAttType._InitializeFacetMap(accessPointTypeValueAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'accessPointTypeValueAttType', accessPointTypeValueAttType)

# Atomic simple type: multimediaTypeAttType
class multimediaTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'multimediaTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4433, 4)
    _Documentation = None
multimediaTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=multimediaTypeAttType, enum_prefix=None)
multimediaTypeAttType.n3D = multimediaTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'3D', tag=u'n3D')
multimediaTypeAttType.audio = multimediaTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'audio', tag=u'audio')
multimediaTypeAttType.video = multimediaTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'video', tag=u'video')
multimediaTypeAttType.other = multimediaTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'other', tag=u'other')
multimediaTypeAttType._InitializeFacetMap(multimediaTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'multimediaTypeAttType', multimediaTypeAttType)

# Atomic simple type: showPluginControlsAttType
class showPluginControlsAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'showPluginControlsAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4443, 4)
    _Documentation = None
showPluginControlsAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=showPluginControlsAttType, enum_prefix=None)
showPluginControlsAttType.hide = showPluginControlsAttType._CF_enumeration.addEnumeration(unicode_value=u'hide', tag=u'hide')
showPluginControlsAttType.show = showPluginControlsAttType._CF_enumeration.addEnumeration(unicode_value=u'show', tag=u'show')
showPluginControlsAttType._InitializeFacetMap(showPluginControlsAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'showPluginControlsAttType', showPluginControlsAttType)

# Atomic simple type: alignAttType
class alignAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'alignAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4510, 4)
    _Documentation = None
alignAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=alignAttType, enum_prefix=None)
alignAttType.left = alignAttType._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
alignAttType.right = alignAttType._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
alignAttType.center = alignAttType._CF_enumeration.addEnumeration(unicode_value=u'center', tag=u'center')
alignAttType.justify = alignAttType._CF_enumeration.addEnumeration(unicode_value=u'justify', tag=u'justify')
alignAttType.char = alignAttType._CF_enumeration.addEnumeration(unicode_value=u'char', tag=u'char')
alignAttType._InitializeFacetMap(alignAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'alignAttType', alignAttType)

# Atomic simple type: valignAttType
class valignAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'valignAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4588, 4)
    _Documentation = None
valignAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=valignAttType, enum_prefix=None)
valignAttType.top = valignAttType._CF_enumeration.addEnumeration(unicode_value=u'top', tag=u'top')
valignAttType.bottom = valignAttType._CF_enumeration.addEnumeration(unicode_value=u'bottom', tag=u'bottom')
valignAttType.middle = valignAttType._CF_enumeration.addEnumeration(unicode_value=u'middle', tag=u'middle')
valignAttType._InitializeFacetMap(valignAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'valignAttType', valignAttType)

# Atomic simple type: frameAttType
class frameAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'frameAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4617, 4)
    _Documentation = None
frameAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=frameAttType, enum_prefix=None)
frameAttType.top = frameAttType._CF_enumeration.addEnumeration(unicode_value=u'top', tag=u'top')
frameAttType.bottom = frameAttType._CF_enumeration.addEnumeration(unicode_value=u'bottom', tag=u'bottom')
frameAttType.topbot = frameAttType._CF_enumeration.addEnumeration(unicode_value=u'topbot', tag=u'topbot')
frameAttType.all = frameAttType._CF_enumeration.addEnumeration(unicode_value=u'all', tag=u'all')
frameAttType.sides = frameAttType._CF_enumeration.addEnumeration(unicode_value=u'sides', tag=u'sides')
frameAttType.none = frameAttType._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
frameAttType._InitializeFacetMap(frameAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'frameAttType', frameAttType)

# Atomic simple type: orientAttType
class orientAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'orientAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4628, 4)
    _Documentation = None
orientAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=orientAttType, enum_prefix=None)
orientAttType.port = orientAttType._CF_enumeration.addEnumeration(unicode_value=u'port', tag=u'port')
orientAttType.land = orientAttType._CF_enumeration.addEnumeration(unicode_value=u'land', tag=u'land')
orientAttType._InitializeFacetMap(orientAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'orientAttType', orientAttType)

# Atomic simple type: thresholdUnitOfMeasureAttType
class thresholdUnitOfMeasureAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'thresholdUnitOfMeasureAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4665, 4)
    _Documentation = None
thresholdUnitOfMeasureAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=thresholdUnitOfMeasureAttType, enum_prefix=None)
thresholdUnitOfMeasureAttType.th01 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th01', tag=u'th01')
thresholdUnitOfMeasureAttType.th02 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th02', tag=u'th02')
thresholdUnitOfMeasureAttType.th03 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th03', tag=u'th03')
thresholdUnitOfMeasureAttType.th04 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th04', tag=u'th04')
thresholdUnitOfMeasureAttType.th05 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th05', tag=u'th05')
thresholdUnitOfMeasureAttType.th06 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th06', tag=u'th06')
thresholdUnitOfMeasureAttType.th07 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th07', tag=u'th07')
thresholdUnitOfMeasureAttType.th08 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th08', tag=u'th08')
thresholdUnitOfMeasureAttType.th09 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th09', tag=u'th09')
thresholdUnitOfMeasureAttType.th10 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th10', tag=u'th10')
thresholdUnitOfMeasureAttType.th11 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th11', tag=u'th11')
thresholdUnitOfMeasureAttType.th12 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th12', tag=u'th12')
thresholdUnitOfMeasureAttType.th13 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th13', tag=u'th13')
thresholdUnitOfMeasureAttType.th14 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th14', tag=u'th14')
thresholdUnitOfMeasureAttType.th15 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th15', tag=u'th15')
thresholdUnitOfMeasureAttType.th16 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th16', tag=u'th16')
thresholdUnitOfMeasureAttType.th17 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th17', tag=u'th17')
thresholdUnitOfMeasureAttType.th18 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th18', tag=u'th18')
thresholdUnitOfMeasureAttType.th19 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th19', tag=u'th19')
thresholdUnitOfMeasureAttType.th20 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th20', tag=u'th20')
thresholdUnitOfMeasureAttType.th21 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th21', tag=u'th21')
thresholdUnitOfMeasureAttType.th22 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th22', tag=u'th22')
thresholdUnitOfMeasureAttType.th23 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th23', tag=u'th23')
thresholdUnitOfMeasureAttType.th24 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th24', tag=u'th24')
thresholdUnitOfMeasureAttType.th25 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th25', tag=u'th25')
thresholdUnitOfMeasureAttType.th26 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th26', tag=u'th26')
thresholdUnitOfMeasureAttType.th27 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th27', tag=u'th27')
thresholdUnitOfMeasureAttType.th28 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th28', tag=u'th28')
thresholdUnitOfMeasureAttType.th29 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th29', tag=u'th29')
thresholdUnitOfMeasureAttType.th30 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th30', tag=u'th30')
thresholdUnitOfMeasureAttType.th31 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th31', tag=u'th31')
thresholdUnitOfMeasureAttType.th32 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th32', tag=u'th32')
thresholdUnitOfMeasureAttType.th33 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th33', tag=u'th33')
thresholdUnitOfMeasureAttType.th34 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th34', tag=u'th34')
thresholdUnitOfMeasureAttType.th35 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th35', tag=u'th35')
thresholdUnitOfMeasureAttType.th36 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th36', tag=u'th36')
thresholdUnitOfMeasureAttType.th37 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th37', tag=u'th37')
thresholdUnitOfMeasureAttType.th38 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th38', tag=u'th38')
thresholdUnitOfMeasureAttType.th39 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th39', tag=u'th39')
thresholdUnitOfMeasureAttType.th40 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th40', tag=u'th40')
thresholdUnitOfMeasureAttType.th41 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th41', tag=u'th41')
thresholdUnitOfMeasureAttType.th42 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th42', tag=u'th42')
thresholdUnitOfMeasureAttType.th43 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th43', tag=u'th43')
thresholdUnitOfMeasureAttType.th44 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th44', tag=u'th44')
thresholdUnitOfMeasureAttType.th45 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th45', tag=u'th45')
thresholdUnitOfMeasureAttType.th46 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th46', tag=u'th46')
thresholdUnitOfMeasureAttType.th47 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th47', tag=u'th47')
thresholdUnitOfMeasureAttType.th48 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th48', tag=u'th48')
thresholdUnitOfMeasureAttType.th49 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th49', tag=u'th49')
thresholdUnitOfMeasureAttType.th50 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th50', tag=u'th50')
thresholdUnitOfMeasureAttType.th51 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th51', tag=u'th51')
thresholdUnitOfMeasureAttType.th52 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th52', tag=u'th52')
thresholdUnitOfMeasureAttType.th53 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th53', tag=u'th53')
thresholdUnitOfMeasureAttType.th54 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th54', tag=u'th54')
thresholdUnitOfMeasureAttType.th55 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th55', tag=u'th55')
thresholdUnitOfMeasureAttType.th56 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th56', tag=u'th56')
thresholdUnitOfMeasureAttType.th57 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th57', tag=u'th57')
thresholdUnitOfMeasureAttType.th58 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th58', tag=u'th58')
thresholdUnitOfMeasureAttType.th59 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th59', tag=u'th59')
thresholdUnitOfMeasureAttType.th60 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th60', tag=u'th60')
thresholdUnitOfMeasureAttType.th61 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th61', tag=u'th61')
thresholdUnitOfMeasureAttType.th62 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th62', tag=u'th62')
thresholdUnitOfMeasureAttType.th63 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th63', tag=u'th63')
thresholdUnitOfMeasureAttType.th64 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th64', tag=u'th64')
thresholdUnitOfMeasureAttType.th65 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th65', tag=u'th65')
thresholdUnitOfMeasureAttType.th66 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th66', tag=u'th66')
thresholdUnitOfMeasureAttType.th67 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th67', tag=u'th67')
thresholdUnitOfMeasureAttType.th68 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th68', tag=u'th68')
thresholdUnitOfMeasureAttType.th69 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th69', tag=u'th69')
thresholdUnitOfMeasureAttType.th70 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th70', tag=u'th70')
thresholdUnitOfMeasureAttType.th71 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th71', tag=u'th71')
thresholdUnitOfMeasureAttType.th72 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th72', tag=u'th72')
thresholdUnitOfMeasureAttType.th73 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th73', tag=u'th73')
thresholdUnitOfMeasureAttType.th74 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th74', tag=u'th74')
thresholdUnitOfMeasureAttType.th75 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th75', tag=u'th75')
thresholdUnitOfMeasureAttType.th76 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th76', tag=u'th76')
thresholdUnitOfMeasureAttType.th77 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th77', tag=u'th77')
thresholdUnitOfMeasureAttType.th78 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th78', tag=u'th78')
thresholdUnitOfMeasureAttType.th79 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th79', tag=u'th79')
thresholdUnitOfMeasureAttType.th80 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th80', tag=u'th80')
thresholdUnitOfMeasureAttType.th81 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th81', tag=u'th81')
thresholdUnitOfMeasureAttType.th82 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th82', tag=u'th82')
thresholdUnitOfMeasureAttType.th83 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th83', tag=u'th83')
thresholdUnitOfMeasureAttType.th84 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th84', tag=u'th84')
thresholdUnitOfMeasureAttType.th85 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th85', tag=u'th85')
thresholdUnitOfMeasureAttType.th86 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th86', tag=u'th86')
thresholdUnitOfMeasureAttType.th87 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th87', tag=u'th87')
thresholdUnitOfMeasureAttType.th88 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th88', tag=u'th88')
thresholdUnitOfMeasureAttType.th89 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th89', tag=u'th89')
thresholdUnitOfMeasureAttType.th90 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th90', tag=u'th90')
thresholdUnitOfMeasureAttType.th91 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th91', tag=u'th91')
thresholdUnitOfMeasureAttType.th92 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th92', tag=u'th92')
thresholdUnitOfMeasureAttType.th93 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th93', tag=u'th93')
thresholdUnitOfMeasureAttType.th94 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th94', tag=u'th94')
thresholdUnitOfMeasureAttType.th95 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th95', tag=u'th95')
thresholdUnitOfMeasureAttType.th96 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th96', tag=u'th96')
thresholdUnitOfMeasureAttType.th97 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th97', tag=u'th97')
thresholdUnitOfMeasureAttType.th98 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th98', tag=u'th98')
thresholdUnitOfMeasureAttType.th99 = thresholdUnitOfMeasureAttType._CF_enumeration.addEnumeration(unicode_value=u'th99', tag=u'th99')
thresholdUnitOfMeasureAttType._InitializeFacetMap(thresholdUnitOfMeasureAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'thresholdUnitOfMeasureAttType', thresholdUnitOfMeasureAttType)

# Atomic simple type: reqCondCategoryAttType
class reqCondCategoryAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondCategoryAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4841, 4)
    _Documentation = None
reqCondCategoryAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=reqCondCategoryAttType, enum_prefix=None)
reqCondCategoryAttType.rcc01 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc01', tag=u'rcc01')
reqCondCategoryAttType.rcc02 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc02', tag=u'rcc02')
reqCondCategoryAttType.rcc03 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc03', tag=u'rcc03')
reqCondCategoryAttType.rcc04 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc04', tag=u'rcc04')
reqCondCategoryAttType.rcc05 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc05', tag=u'rcc05')
reqCondCategoryAttType.rcc06 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc06', tag=u'rcc06')
reqCondCategoryAttType.rcc07 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc07', tag=u'rcc07')
reqCondCategoryAttType.rcc08 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc08', tag=u'rcc08')
reqCondCategoryAttType.rcc09 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc09', tag=u'rcc09')
reqCondCategoryAttType.rcc10 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc10', tag=u'rcc10')
reqCondCategoryAttType.rcc11 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc11', tag=u'rcc11')
reqCondCategoryAttType.rcc12 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc12', tag=u'rcc12')
reqCondCategoryAttType.rcc13 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc13', tag=u'rcc13')
reqCondCategoryAttType.rcc14 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc14', tag=u'rcc14')
reqCondCategoryAttType.rcc15 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc15', tag=u'rcc15')
reqCondCategoryAttType.rcc16 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc16', tag=u'rcc16')
reqCondCategoryAttType.rcc17 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc17', tag=u'rcc17')
reqCondCategoryAttType.rcc18 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc18', tag=u'rcc18')
reqCondCategoryAttType.rcc19 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc19', tag=u'rcc19')
reqCondCategoryAttType.rcc20 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc20', tag=u'rcc20')
reqCondCategoryAttType.rcc21 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc21', tag=u'rcc21')
reqCondCategoryAttType.rcc22 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc22', tag=u'rcc22')
reqCondCategoryAttType.rcc23 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc23', tag=u'rcc23')
reqCondCategoryAttType.rcc24 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc24', tag=u'rcc24')
reqCondCategoryAttType.rcc25 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc25', tag=u'rcc25')
reqCondCategoryAttType.rcc26 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc26', tag=u'rcc26')
reqCondCategoryAttType.rcc27 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc27', tag=u'rcc27')
reqCondCategoryAttType.rcc28 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc28', tag=u'rcc28')
reqCondCategoryAttType.rcc29 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc29', tag=u'rcc29')
reqCondCategoryAttType.rcc30 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc30', tag=u'rcc30')
reqCondCategoryAttType.rcc31 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc31', tag=u'rcc31')
reqCondCategoryAttType.rcc32 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc32', tag=u'rcc32')
reqCondCategoryAttType.rcc33 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc33', tag=u'rcc33')
reqCondCategoryAttType.rcc34 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc34', tag=u'rcc34')
reqCondCategoryAttType.rcc35 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc35', tag=u'rcc35')
reqCondCategoryAttType.rcc36 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc36', tag=u'rcc36')
reqCondCategoryAttType.rcc37 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc37', tag=u'rcc37')
reqCondCategoryAttType.rcc38 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc38', tag=u'rcc38')
reqCondCategoryAttType.rcc39 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc39', tag=u'rcc39')
reqCondCategoryAttType.rcc40 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc40', tag=u'rcc40')
reqCondCategoryAttType.rcc41 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc41', tag=u'rcc41')
reqCondCategoryAttType.rcc42 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc42', tag=u'rcc42')
reqCondCategoryAttType.rcc43 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc43', tag=u'rcc43')
reqCondCategoryAttType.rcc44 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc44', tag=u'rcc44')
reqCondCategoryAttType.rcc45 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc45', tag=u'rcc45')
reqCondCategoryAttType.rcc46 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc46', tag=u'rcc46')
reqCondCategoryAttType.rcc47 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc47', tag=u'rcc47')
reqCondCategoryAttType.rcc48 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc48', tag=u'rcc48')
reqCondCategoryAttType.rcc49 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc49', tag=u'rcc49')
reqCondCategoryAttType.rcc50 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc50', tag=u'rcc50')
reqCondCategoryAttType.rcc51 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc51', tag=u'rcc51')
reqCondCategoryAttType.rcc52 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc52', tag=u'rcc52')
reqCondCategoryAttType.rcc53 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc53', tag=u'rcc53')
reqCondCategoryAttType.rcc54 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc54', tag=u'rcc54')
reqCondCategoryAttType.rcc55 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc55', tag=u'rcc55')
reqCondCategoryAttType.rcc56 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc56', tag=u'rcc56')
reqCondCategoryAttType.rcc57 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc57', tag=u'rcc57')
reqCondCategoryAttType.rcc58 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc58', tag=u'rcc58')
reqCondCategoryAttType.rcc59 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc59', tag=u'rcc59')
reqCondCategoryAttType.rcc60 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc60', tag=u'rcc60')
reqCondCategoryAttType.rcc61 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc61', tag=u'rcc61')
reqCondCategoryAttType.rcc62 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc62', tag=u'rcc62')
reqCondCategoryAttType.rcc63 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc63', tag=u'rcc63')
reqCondCategoryAttType.rcc64 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc64', tag=u'rcc64')
reqCondCategoryAttType.rcc65 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc65', tag=u'rcc65')
reqCondCategoryAttType.rcc66 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc66', tag=u'rcc66')
reqCondCategoryAttType.rcc67 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc67', tag=u'rcc67')
reqCondCategoryAttType.rcc68 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc68', tag=u'rcc68')
reqCondCategoryAttType.rcc69 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc69', tag=u'rcc69')
reqCondCategoryAttType.rcc70 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc70', tag=u'rcc70')
reqCondCategoryAttType.rcc71 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc71', tag=u'rcc71')
reqCondCategoryAttType.rcc72 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc72', tag=u'rcc72')
reqCondCategoryAttType.rcc73 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc73', tag=u'rcc73')
reqCondCategoryAttType.rcc74 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc74', tag=u'rcc74')
reqCondCategoryAttType.rcc75 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc75', tag=u'rcc75')
reqCondCategoryAttType.rcc76 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc76', tag=u'rcc76')
reqCondCategoryAttType.rcc77 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc77', tag=u'rcc77')
reqCondCategoryAttType.rcc78 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc78', tag=u'rcc78')
reqCondCategoryAttType.rcc79 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc79', tag=u'rcc79')
reqCondCategoryAttType.rcc80 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc80', tag=u'rcc80')
reqCondCategoryAttType.rcc81 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc81', tag=u'rcc81')
reqCondCategoryAttType.rcc82 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc82', tag=u'rcc82')
reqCondCategoryAttType.rcc83 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc83', tag=u'rcc83')
reqCondCategoryAttType.rcc84 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc84', tag=u'rcc84')
reqCondCategoryAttType.rcc85 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc85', tag=u'rcc85')
reqCondCategoryAttType.rcc86 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc86', tag=u'rcc86')
reqCondCategoryAttType.rcc87 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc87', tag=u'rcc87')
reqCondCategoryAttType.rcc88 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc88', tag=u'rcc88')
reqCondCategoryAttType.rcc89 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc89', tag=u'rcc89')
reqCondCategoryAttType.rcc90 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc90', tag=u'rcc90')
reqCondCategoryAttType.rcc91 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc91', tag=u'rcc91')
reqCondCategoryAttType.rcc92 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc92', tag=u'rcc92')
reqCondCategoryAttType.rcc93 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc93', tag=u'rcc93')
reqCondCategoryAttType.rcc94 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc94', tag=u'rcc94')
reqCondCategoryAttType.rcc95 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc95', tag=u'rcc95')
reqCondCategoryAttType.rcc96 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc96', tag=u'rcc96')
reqCondCategoryAttType.rcc97 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc97', tag=u'rcc97')
reqCondCategoryAttType.rcc98 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc98', tag=u'rcc98')
reqCondCategoryAttType.rcc99 = reqCondCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'rcc99', tag=u'rcc99')
reqCondCategoryAttType._InitializeFacetMap(reqCondCategoryAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'reqCondCategoryAttType', reqCondCategoryAttType)

# Atomic simple type: reqTechInfoCategoryAttType
class reqTechInfoCategoryAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoCategoryAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5072, 4)
    _Documentation = None
reqTechInfoCategoryAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=reqTechInfoCategoryAttType, enum_prefix=None)
reqTechInfoCategoryAttType.ti01 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti01', tag=u'ti01')
reqTechInfoCategoryAttType.ti02 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti02', tag=u'ti02')
reqTechInfoCategoryAttType.ti03 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti03', tag=u'ti03')
reqTechInfoCategoryAttType.ti04 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti04', tag=u'ti04')
reqTechInfoCategoryAttType.ti05 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti05', tag=u'ti05')
reqTechInfoCategoryAttType.ti06 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti06', tag=u'ti06')
reqTechInfoCategoryAttType.ti07 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti07', tag=u'ti07')
reqTechInfoCategoryAttType.ti08 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti08', tag=u'ti08')
reqTechInfoCategoryAttType.ti09 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti09', tag=u'ti09')
reqTechInfoCategoryAttType.ti10 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti10', tag=u'ti10')
reqTechInfoCategoryAttType.ti11 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti11', tag=u'ti11')
reqTechInfoCategoryAttType.ti12 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti12', tag=u'ti12')
reqTechInfoCategoryAttType.ti13 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti13', tag=u'ti13')
reqTechInfoCategoryAttType.ti14 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti14', tag=u'ti14')
reqTechInfoCategoryAttType.ti15 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti15', tag=u'ti15')
reqTechInfoCategoryAttType.ti16 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti16', tag=u'ti16')
reqTechInfoCategoryAttType.ti17 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti17', tag=u'ti17')
reqTechInfoCategoryAttType.ti18 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti18', tag=u'ti18')
reqTechInfoCategoryAttType.ti19 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti19', tag=u'ti19')
reqTechInfoCategoryAttType.ti20 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti20', tag=u'ti20')
reqTechInfoCategoryAttType.ti21 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti21', tag=u'ti21')
reqTechInfoCategoryAttType.ti22 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti22', tag=u'ti22')
reqTechInfoCategoryAttType.ti23 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti23', tag=u'ti23')
reqTechInfoCategoryAttType.ti24 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti24', tag=u'ti24')
reqTechInfoCategoryAttType.ti25 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti25', tag=u'ti25')
reqTechInfoCategoryAttType.ti26 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti26', tag=u'ti26')
reqTechInfoCategoryAttType.ti27 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti27', tag=u'ti27')
reqTechInfoCategoryAttType.ti28 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti28', tag=u'ti28')
reqTechInfoCategoryAttType.ti29 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti29', tag=u'ti29')
reqTechInfoCategoryAttType.ti30 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti30', tag=u'ti30')
reqTechInfoCategoryAttType.ti31 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti31', tag=u'ti31')
reqTechInfoCategoryAttType.ti32 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti32', tag=u'ti32')
reqTechInfoCategoryAttType.ti33 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti33', tag=u'ti33')
reqTechInfoCategoryAttType.ti34 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti34', tag=u'ti34')
reqTechInfoCategoryAttType.ti35 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti35', tag=u'ti35')
reqTechInfoCategoryAttType.ti36 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti36', tag=u'ti36')
reqTechInfoCategoryAttType.ti37 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti37', tag=u'ti37')
reqTechInfoCategoryAttType.ti38 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti38', tag=u'ti38')
reqTechInfoCategoryAttType.ti39 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti39', tag=u'ti39')
reqTechInfoCategoryAttType.ti40 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti40', tag=u'ti40')
reqTechInfoCategoryAttType.ti41 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti41', tag=u'ti41')
reqTechInfoCategoryAttType.ti42 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti42', tag=u'ti42')
reqTechInfoCategoryAttType.ti43 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti43', tag=u'ti43')
reqTechInfoCategoryAttType.ti44 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti44', tag=u'ti44')
reqTechInfoCategoryAttType.ti45 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti45', tag=u'ti45')
reqTechInfoCategoryAttType.ti46 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti46', tag=u'ti46')
reqTechInfoCategoryAttType.ti47 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti47', tag=u'ti47')
reqTechInfoCategoryAttType.ti48 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti48', tag=u'ti48')
reqTechInfoCategoryAttType.ti49 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti49', tag=u'ti49')
reqTechInfoCategoryAttType.ti50 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti50', tag=u'ti50')
reqTechInfoCategoryAttType.ti51 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti51', tag=u'ti51')
reqTechInfoCategoryAttType.ti52 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti52', tag=u'ti52')
reqTechInfoCategoryAttType.ti53 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti53', tag=u'ti53')
reqTechInfoCategoryAttType.ti54 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti54', tag=u'ti54')
reqTechInfoCategoryAttType.ti55 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti55', tag=u'ti55')
reqTechInfoCategoryAttType.ti56 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti56', tag=u'ti56')
reqTechInfoCategoryAttType.ti57 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti57', tag=u'ti57')
reqTechInfoCategoryAttType.ti58 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti58', tag=u'ti58')
reqTechInfoCategoryAttType.ti59 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti59', tag=u'ti59')
reqTechInfoCategoryAttType.ti60 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti60', tag=u'ti60')
reqTechInfoCategoryAttType.ti61 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti61', tag=u'ti61')
reqTechInfoCategoryAttType.ti62 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti62', tag=u'ti62')
reqTechInfoCategoryAttType.ti63 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti63', tag=u'ti63')
reqTechInfoCategoryAttType.ti64 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti64', tag=u'ti64')
reqTechInfoCategoryAttType.ti65 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti65', tag=u'ti65')
reqTechInfoCategoryAttType.ti66 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti66', tag=u'ti66')
reqTechInfoCategoryAttType.ti67 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti67', tag=u'ti67')
reqTechInfoCategoryAttType.ti68 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti68', tag=u'ti68')
reqTechInfoCategoryAttType.ti69 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti69', tag=u'ti69')
reqTechInfoCategoryAttType.ti70 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti70', tag=u'ti70')
reqTechInfoCategoryAttType.ti71 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti71', tag=u'ti71')
reqTechInfoCategoryAttType.ti72 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti72', tag=u'ti72')
reqTechInfoCategoryAttType.ti73 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti73', tag=u'ti73')
reqTechInfoCategoryAttType.ti74 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti74', tag=u'ti74')
reqTechInfoCategoryAttType.ti75 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti75', tag=u'ti75')
reqTechInfoCategoryAttType.ti76 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti76', tag=u'ti76')
reqTechInfoCategoryAttType.ti77 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti77', tag=u'ti77')
reqTechInfoCategoryAttType.ti78 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti78', tag=u'ti78')
reqTechInfoCategoryAttType.ti79 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti79', tag=u'ti79')
reqTechInfoCategoryAttType.ti80 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti80', tag=u'ti80')
reqTechInfoCategoryAttType.ti81 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti81', tag=u'ti81')
reqTechInfoCategoryAttType.ti82 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti82', tag=u'ti82')
reqTechInfoCategoryAttType.ti83 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti83', tag=u'ti83')
reqTechInfoCategoryAttType.ti84 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti84', tag=u'ti84')
reqTechInfoCategoryAttType.ti85 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti85', tag=u'ti85')
reqTechInfoCategoryAttType.ti86 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti86', tag=u'ti86')
reqTechInfoCategoryAttType.ti87 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti87', tag=u'ti87')
reqTechInfoCategoryAttType.ti88 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti88', tag=u'ti88')
reqTechInfoCategoryAttType.ti89 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti89', tag=u'ti89')
reqTechInfoCategoryAttType.ti90 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti90', tag=u'ti90')
reqTechInfoCategoryAttType.ti91 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti91', tag=u'ti91')
reqTechInfoCategoryAttType.ti92 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti92', tag=u'ti92')
reqTechInfoCategoryAttType.ti93 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti93', tag=u'ti93')
reqTechInfoCategoryAttType.ti94 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti94', tag=u'ti94')
reqTechInfoCategoryAttType.ti95 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti95', tag=u'ti95')
reqTechInfoCategoryAttType.ti96 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti96', tag=u'ti96')
reqTechInfoCategoryAttType.ti97 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti97', tag=u'ti97')
reqTechInfoCategoryAttType.ti98 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti98', tag=u'ti98')
reqTechInfoCategoryAttType.ti99 = reqTechInfoCategoryAttType._CF_enumeration.addEnumeration(unicode_value=u'ti99', tag=u'ti99')
reqTechInfoCategoryAttType._InitializeFacetMap(reqTechInfoCategoryAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'reqTechInfoCategoryAttType', reqTechInfoCategoryAttType)

# Atomic simple type: serialNumberFormAttType
class serialNumberFormAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'serialNumberFormAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5262, 4)
    _Documentation = None
serialNumberFormAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=serialNumberFormAttType, enum_prefix=None)
serialNumberFormAttType.single = serialNumberFormAttType._CF_enumeration.addEnumeration(unicode_value=u'single', tag=u'single')
serialNumberFormAttType.range = serialNumberFormAttType._CF_enumeration.addEnumeration(unicode_value=u'range', tag=u'range')
serialNumberFormAttType._InitializeFacetMap(serialNumberFormAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'serialNumberFormAttType', serialNumberFormAttType)

# Atomic simple type: colorAttType
class colorAttType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'colorAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5467, 4)
    _Documentation = None
colorAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=colorAttType, enum_prefix=None)
colorAttType.co00 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co00', tag=u'co00')
colorAttType.co01 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co01', tag=u'co01')
colorAttType.co02 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co02', tag=u'co02')
colorAttType.co03 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co03', tag=u'co03')
colorAttType.co04 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co04', tag=u'co04')
colorAttType.co05 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co05', tag=u'co05')
colorAttType.co06 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co06', tag=u'co06')
colorAttType.co07 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co07', tag=u'co07')
colorAttType.co08 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co08', tag=u'co08')
colorAttType.co09 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co09', tag=u'co09')
colorAttType.co10 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co10', tag=u'co10')
colorAttType.co11 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co11', tag=u'co11')
colorAttType.co12 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co12', tag=u'co12')
colorAttType.co13 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co13', tag=u'co13')
colorAttType.co14 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co14', tag=u'co14')
colorAttType.co15 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co15', tag=u'co15')
colorAttType.co16 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co16', tag=u'co16')
colorAttType.co17 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co17', tag=u'co17')
colorAttType.co18 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co18', tag=u'co18')
colorAttType.co19 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co19', tag=u'co19')
colorAttType.co20 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co20', tag=u'co20')
colorAttType.co21 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co21', tag=u'co21')
colorAttType.co22 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co22', tag=u'co22')
colorAttType.co23 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co23', tag=u'co23')
colorAttType.co24 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co24', tag=u'co24')
colorAttType.co25 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co25', tag=u'co25')
colorAttType.co26 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co26', tag=u'co26')
colorAttType.co27 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co27', tag=u'co27')
colorAttType.co28 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co28', tag=u'co28')
colorAttType.co29 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co29', tag=u'co29')
colorAttType.co30 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co30', tag=u'co30')
colorAttType.co31 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co31', tag=u'co31')
colorAttType.co32 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co32', tag=u'co32')
colorAttType.co33 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co33', tag=u'co33')
colorAttType.co34 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co34', tag=u'co34')
colorAttType.co35 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co35', tag=u'co35')
colorAttType.co36 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co36', tag=u'co36')
colorAttType.co37 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co37', tag=u'co37')
colorAttType.co38 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co38', tag=u'co38')
colorAttType.co39 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co39', tag=u'co39')
colorAttType.co40 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co40', tag=u'co40')
colorAttType.co41 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co41', tag=u'co41')
colorAttType.co42 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co42', tag=u'co42')
colorAttType.co43 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co43', tag=u'co43')
colorAttType.co44 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co44', tag=u'co44')
colorAttType.co45 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co45', tag=u'co45')
colorAttType.co46 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co46', tag=u'co46')
colorAttType.co47 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co47', tag=u'co47')
colorAttType.co48 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co48', tag=u'co48')
colorAttType.co49 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co49', tag=u'co49')
colorAttType.co50 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co50', tag=u'co50')
colorAttType.co51 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co51', tag=u'co51')
colorAttType.co52 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co52', tag=u'co52')
colorAttType.co53 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co53', tag=u'co53')
colorAttType.co54 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co54', tag=u'co54')
colorAttType.co55 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co55', tag=u'co55')
colorAttType.co56 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co56', tag=u'co56')
colorAttType.co57 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co57', tag=u'co57')
colorAttType.co58 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co58', tag=u'co58')
colorAttType.co59 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co59', tag=u'co59')
colorAttType.co60 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co60', tag=u'co60')
colorAttType.co61 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co61', tag=u'co61')
colorAttType.co62 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co62', tag=u'co62')
colorAttType.co63 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co63', tag=u'co63')
colorAttType.co64 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co64', tag=u'co64')
colorAttType.co65 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co65', tag=u'co65')
colorAttType.co66 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co66', tag=u'co66')
colorAttType.co67 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co67', tag=u'co67')
colorAttType.co68 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co68', tag=u'co68')
colorAttType.co69 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co69', tag=u'co69')
colorAttType.co70 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co70', tag=u'co70')
colorAttType.co71 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co71', tag=u'co71')
colorAttType.co72 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co72', tag=u'co72')
colorAttType.co73 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co73', tag=u'co73')
colorAttType.co74 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co74', tag=u'co74')
colorAttType.co75 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co75', tag=u'co75')
colorAttType.co76 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co76', tag=u'co76')
colorAttType.co77 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co77', tag=u'co77')
colorAttType.co78 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co78', tag=u'co78')
colorAttType.co79 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co79', tag=u'co79')
colorAttType.co80 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co80', tag=u'co80')
colorAttType.co81 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co81', tag=u'co81')
colorAttType.co82 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co82', tag=u'co82')
colorAttType.co83 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co83', tag=u'co83')
colorAttType.co84 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co84', tag=u'co84')
colorAttType.co85 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co85', tag=u'co85')
colorAttType.co86 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co86', tag=u'co86')
colorAttType.co87 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co87', tag=u'co87')
colorAttType.co88 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co88', tag=u'co88')
colorAttType.co89 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co89', tag=u'co89')
colorAttType.co90 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co90', tag=u'co90')
colorAttType.co91 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co91', tag=u'co91')
colorAttType.co92 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co92', tag=u'co92')
colorAttType.co93 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co93', tag=u'co93')
colorAttType.co94 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co94', tag=u'co94')
colorAttType.co95 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co95', tag=u'co95')
colorAttType.co96 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co96', tag=u'co96')
colorAttType.co97 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co97', tag=u'co97')
colorAttType.co98 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co98', tag=u'co98')
colorAttType.co99 = colorAttType._CF_enumeration.addEnumeration(unicode_value=u'co99', tag=u'co99')
colorAttType._InitializeFacetMap(colorAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'colorAttType', colorAttType)

# Atomic simple type: alignCaptionAttType
class alignCaptionAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'alignCaptionAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5575, 4)
    _Documentation = None
alignCaptionAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=alignCaptionAttType, enum_prefix=None)
alignCaptionAttType.left = alignCaptionAttType._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
alignCaptionAttType.right = alignCaptionAttType._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
alignCaptionAttType.center = alignCaptionAttType._CF_enumeration.addEnumeration(unicode_value=u'center', tag=u'center')
alignCaptionAttType._InitializeFacetMap(alignCaptionAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'alignCaptionAttType', alignCaptionAttType)

# Atomic simple type: tableOfContentTypeAttType
class tableOfContentTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tableOfContentTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5583, 4)
    _Documentation = None
tableOfContentTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=tableOfContentTypeAttType, enum_prefix=None)
tableOfContentTypeAttType.none = tableOfContentTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
tableOfContentTypeAttType.redtoc = tableOfContentTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'redtoc', tag=u'redtoc')
tableOfContentTypeAttType.comdtoc = tableOfContentTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'comdtoc', tag=u'comdtoc')
tableOfContentTypeAttType.ambertoc = tableOfContentTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'ambertoc', tag=u'ambertoc')
tableOfContentTypeAttType.greentoc = tableOfContentTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'greentoc', tag=u'greentoc')
tableOfContentTypeAttType.yelowtoc = tableOfContentTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'yelowtoc', tag=u'yelowtoc')
tableOfContentTypeAttType._InitializeFacetMap(tableOfContentTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'tableOfContentTypeAttType', tableOfContentTypeAttType)

# Atomic simple type: captionTypeAttType
class captionTypeAttType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'captionTypeAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5594, 4)
    _Documentation = None
captionTypeAttType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=captionTypeAttType, enum_prefix=None)
captionTypeAttType.primary = captionTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'primary', tag=u'primary')
captionTypeAttType.secondary = captionTypeAttType._CF_enumeration.addEnumeration(unicode_value=u'secondary', tag=u'secondary')
captionTypeAttType._InitializeFacetMap(captionTypeAttType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'captionTypeAttType', captionTypeAttType)

# List simple type: itemCharacteristicAttType
# superclasses pyxb.binding.datatypes.NMTOKENS
class itemCharacteristicAttType (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.NMTOKEN."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'itemCharacteristicAttType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5601, 4)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.NMTOKEN
itemCharacteristicAttType._CF_pattern = pyxb.binding.facets.CF_pattern()
itemCharacteristicAttType._CF_pattern.addPattern(pattern=u'ic\\d{2}( ic\\d{2})*')
itemCharacteristicAttType._InitializeFacetMap(itemCharacteristicAttType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'itemCharacteristicAttType', itemCharacteristicAttType)

# Complex type dmoduleElemType with content type ELEMENT_ONLY
class dmoduleElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmoduleElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmoduleElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 29, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identAndStatusSection uses Python identifier identAndStatusSection
    __identAndStatusSection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identAndStatusSection'), 'identAndStatusSection', '__AbsentNamespace0_dmoduleElemType_identAndStatusSection', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 37, 4), )

    
    identAndStatusSection = property(__identAndStatusSection.value, __identAndStatusSection.set, None, None)

    
    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'content'), 'content_', '__AbsentNamespace0_dmoduleElemType_content', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3981, 4), )

    
    content_ = property(__content.value, __content.set, None, None)

    
    # Element {http://www.w3.org/1999/02/22-rdf-syntax-ns#}Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_rdf, u'Description'), 'Description', '__AbsentNamespace0_dmoduleElemType_httpwww_w3_org19990222_rdf_syntax_nsDescription', False, pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\rdf.xsd', 23, 1), )

    
    Description = property(__Description.value, __Description.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dmoduleElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 35, 8)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __identAndStatusSection.name() : __identAndStatusSection,
        __content.name() : __content,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'dmoduleElemType', dmoduleElemType)


# Complex type identAndStatusSectionElemType with content type ELEMENT_ONLY
class identAndStatusSectionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type identAndStatusSectionElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'identAndStatusSectionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 38, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmAddress uses Python identifier dmAddress
    __dmAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmAddress'), 'dmAddress', '__AbsentNamespace0_identAndStatusSectionElemType_dmAddress', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 44, 4), )

    
    dmAddress = property(__dmAddress.value, __dmAddress.set, None, None)

    
    # Element dmStatus uses Python identifier dmStatus
    __dmStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmStatus'), 'dmStatus', '__AbsentNamespace0_identAndStatusSectionElemType_dmStatus', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 240, 4), )

    
    dmStatus = property(__dmStatus.value, __dmStatus.set, None, None)

    _ElementMap.update({
        __dmAddress.name() : __dmAddress,
        __dmStatus.name() : __dmStatus
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'identAndStatusSectionElemType', identAndStatusSectionElemType)


# Complex type dmAddressElemType with content type ELEMENT_ONLY
class dmAddressElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmAddressElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmAddressElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 45, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmIdent uses Python identifier dmIdent
    __dmIdent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmIdent'), 'dmIdent', '__AbsentNamespace0_dmAddressElemType_dmIdent', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 51, 4), )

    
    dmIdent = property(__dmIdent.value, __dmIdent.set, None, None)

    
    # Element dmAddressItems uses Python identifier dmAddressItems
    __dmAddressItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmAddressItems'), 'dmAddressItems', '__AbsentNamespace0_dmAddressElemType_dmAddressItems', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 195, 4), )

    
    dmAddressItems = property(__dmAddressItems.value, __dmAddressItems.set, None, None)

    _ElementMap.update({
        __dmIdent.name() : __dmIdent,
        __dmAddressItems.name() : __dmAddressItems
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'dmAddressElemType', dmAddressElemType)


# Complex type dmIdentElemType with content type ELEMENT_ONLY
class dmIdentElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmIdentElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmIdentElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 52, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identExtension uses Python identifier identExtension
    __identExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), 'identExtension', '__AbsentNamespace0_dmIdentElemType_identExtension', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4), )

    
    identExtension = property(__identExtension.value, __identExtension.set, None, None)

    
    # Element dmCode uses Python identifier dmCode
    __dmCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmCode'), 'dmCode', '__AbsentNamespace0_dmIdentElemType_dmCode', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 67, 4), )

    
    dmCode = property(__dmCode.value, __dmCode.set, None, None)

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'language'), 'language', '__AbsentNamespace0_dmIdentElemType_language', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4), )

    
    language = property(__language.value, __language.set, None, None)

    
    # Element issueInfo uses Python identifier issueInfo
    __issueInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), 'issueInfo', '__AbsentNamespace0_dmIdentElemType_issueInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4), )

    
    issueInfo = property(__issueInfo.value, __issueInfo.set, None, None)

    _ElementMap.update({
        __identExtension.name() : __identExtension,
        __dmCode.name() : __dmCode,
        __language.name() : __language,
        __issueInfo.name() : __issueInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'dmIdentElemType', dmIdentElemType)


# Complex type identExtensionElemType with content type EMPTY
class identExtensionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type identExtensionElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'identExtensionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 61, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute extensionProducer uses Python identifier extensionProducer
    __extensionProducer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'extensionProducer'), 'extensionProducer', '__AbsentNamespace0_identExtensionElemType_extensionProducer', pyxb.binding.datatypes.string, required=True)
    __extensionProducer._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 65, 4)
    __extensionProducer._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 62, 8)
    
    extensionProducer = property(__extensionProducer.value, __extensionProducer.set, None, None)

    
    # Attribute extensionCode uses Python identifier extensionCode
    __extensionCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'extensionCode'), 'extensionCode', '__AbsentNamespace0_identExtensionElemType_extensionCode', pyxb.binding.datatypes.string, required=True)
    __extensionCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 66, 4)
    __extensionCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 63, 8)
    
    extensionCode = property(__extensionCode.value, __extensionCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __extensionProducer.name() : __extensionProducer,
        __extensionCode.name() : __extensionCode
    })
Namespace.addCategoryObject('typeBinding', u'identExtensionElemType', identExtensionElemType)


# Complex type dmAddressItemsElemType with content type ELEMENT_ONLY
class dmAddressItemsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmAddressItemsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmAddressItemsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 196, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element issueDate uses Python identifier issueDate
    __issueDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), 'issueDate', '__AbsentNamespace0_dmAddressItemsElemType_issueDate', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4), )

    
    issueDate = property(__issueDate.value, __issueDate.set, None, None)

    
    # Element dmTitle uses Python identifier dmTitle
    __dmTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmTitle'), 'dmTitle', '__AbsentNamespace0_dmAddressItemsElemType_dmTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 231, 4), )

    
    dmTitle = property(__dmTitle.value, __dmTitle.set, None, None)

    _ElementMap.update({
        __issueDate.name() : __issueDate,
        __dmTitle.name() : __dmTitle
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'dmAddressItemsElemType', dmAddressItemsElemType)


# Complex type dmTitleElemType with content type ELEMENT_ONLY
class dmTitleElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmTitleElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmTitleElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 232, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element techName uses Python identifier techName
    __techName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'techName'), 'techName', '__AbsentNamespace0_dmTitleElemType_techName', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 238, 4), )

    
    techName = property(__techName.value, __techName.set, None, None)

    
    # Element infoName uses Python identifier infoName
    __infoName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'infoName'), 'infoName', '__AbsentNamespace0_dmTitleElemType_infoName', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 239, 4), )

    
    infoName = property(__infoName.value, __infoName.set, None, None)

    _ElementMap.update({
        __techName.name() : __techName,
        __infoName.name() : __infoName
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'dmTitleElemType', dmTitleElemType)


# Complex type sourceDmIdentElemType with content type ELEMENT_ONLY
class sourceDmIdentElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type sourceDmIdentElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'sourceDmIdentElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 269, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identExtension uses Python identifier identExtension
    __identExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), 'identExtension', '__AbsentNamespace0_sourceDmIdentElemType_identExtension', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4), )

    
    identExtension = property(__identExtension.value, __identExtension.set, None, None)

    
    # Element dmCode uses Python identifier dmCode
    __dmCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmCode'), 'dmCode', '__AbsentNamespace0_sourceDmIdentElemType_dmCode', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 67, 4), )

    
    dmCode = property(__dmCode.value, __dmCode.set, None, None)

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'language'), 'language', '__AbsentNamespace0_sourceDmIdentElemType_language', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4), )

    
    language = property(__language.value, __language.set, None, None)

    
    # Element issueInfo uses Python identifier issueInfo
    __issueInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), 'issueInfo', '__AbsentNamespace0_sourceDmIdentElemType_issueInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4), )

    
    issueInfo = property(__issueInfo.value, __issueInfo.set, None, None)

    _ElementMap.update({
        __identExtension.name() : __identExtension,
        __dmCode.name() : __dmCode,
        __language.name() : __language,
        __issueInfo.name() : __issueInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'sourceDmIdentElemType', sourceDmIdentElemType)


# Complex type dmRefIdentElemType with content type ELEMENT_ONLY
class dmRefIdentElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmRefIdentElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmRefIdentElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 713, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identExtension uses Python identifier identExtension
    __identExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), 'identExtension', '__AbsentNamespace0_dmRefIdentElemType_identExtension', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4), )

    
    identExtension = property(__identExtension.value, __identExtension.set, None, None)

    
    # Element dmCode uses Python identifier dmCode
    __dmCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmCode'), 'dmCode', '__AbsentNamespace0_dmRefIdentElemType_dmCode', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 67, 4), )

    
    dmCode = property(__dmCode.value, __dmCode.set, None, None)

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'language'), 'language', '__AbsentNamespace0_dmRefIdentElemType_language', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4), )

    
    language = property(__language.value, __language.set, None, None)

    
    # Element issueInfo uses Python identifier issueInfo
    __issueInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), 'issueInfo', '__AbsentNamespace0_dmRefIdentElemType_issueInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4), )

    
    issueInfo = property(__issueInfo.value, __issueInfo.set, None, None)

    _ElementMap.update({
        __identExtension.name() : __identExtension,
        __dmCode.name() : __dmCode,
        __language.name() : __language,
        __issueInfo.name() : __issueInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'dmRefIdentElemType', dmRefIdentElemType)


# Complex type dmRefAddressItemsElemType with content type ELEMENT_ONLY
class dmRefAddressItemsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmRefAddressItemsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmRefAddressItemsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 722, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element issueDate uses Python identifier issueDate
    __issueDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), 'issueDate', '__AbsentNamespace0_dmRefAddressItemsElemType_issueDate', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4), )

    
    issueDate = property(__issueDate.value, __issueDate.set, None, None)

    
    # Element dmTitle uses Python identifier dmTitle
    __dmTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmTitle'), 'dmTitle', '__AbsentNamespace0_dmRefAddressItemsElemType_dmTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 231, 4), )

    
    dmTitle = property(__dmTitle.value, __dmTitle.set, None, None)

    _ElementMap.update({
        __issueDate.name() : __issueDate,
        __dmTitle.name() : __dmTitle
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'dmRefAddressItemsElemType', dmRefAddressItemsElemType)


# Complex type exportRegistrationCodeElemType with content type EMPTY
class exportRegistrationCodeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type exportRegistrationCodeElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationCodeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 759, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute exportRegulationCodeType uses Python identifier exportRegulationCodeType
    __exportRegulationCodeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'exportRegulationCodeType'), 'exportRegulationCodeType', '__AbsentNamespace0_exportRegistrationCodeElemType_exportRegulationCodeType', pyxb.binding.datatypes.string)
    __exportRegulationCodeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 762, 4)
    __exportRegulationCodeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 760, 8)
    
    exportRegulationCodeType = property(__exportRegulationCodeType.value, __exportRegulationCodeType.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __exportRegulationCodeType.name() : __exportRegulationCodeType
    })
Namespace.addCategoryObject('typeBinding', u'exportRegistrationCodeElemType', exportRegistrationCodeElemType)


# Complex type refsElemType with content type ELEMENT_ONLY
class refsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type refsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'refsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 872, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_refsElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_refsElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_refsElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    _ElementMap.update({
        __dmRef.name() : __dmRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'refsElemType', refsElemType)


# Complex type pmRefIdentElemType with content type ELEMENT_ONLY
class pmRefIdentElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type pmRefIdentElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pmRefIdentElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 896, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identExtension uses Python identifier identExtension
    __identExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), 'identExtension', '__AbsentNamespace0_pmRefIdentElemType_identExtension', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4), )

    
    identExtension = property(__identExtension.value, __identExtension.set, None, None)

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'language'), 'language', '__AbsentNamespace0_pmRefIdentElemType_language', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4), )

    
    language = property(__language.value, __language.set, None, None)

    
    # Element issueInfo uses Python identifier issueInfo
    __issueInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), 'issueInfo', '__AbsentNamespace0_pmRefIdentElemType_issueInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4), )

    
    issueInfo = property(__issueInfo.value, __issueInfo.set, None, None)

    
    # Element pmCode uses Python identifier pmCode
    __pmCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmCode'), 'pmCode', '__AbsentNamespace0_pmRefIdentElemType_pmCode', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 904, 4), )

    
    pmCode = property(__pmCode.value, __pmCode.set, None, None)

    _ElementMap.update({
        __identExtension.name() : __identExtension,
        __language.name() : __language,
        __issueInfo.name() : __issueInfo,
        __pmCode.name() : __pmCode
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'pmRefIdentElemType', pmRefIdentElemType)


# Complex type responsiblePartnerCompanyElemType with content type ELEMENT_ONLY
class responsiblePartnerCompanyElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type responsiblePartnerCompanyElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompanyElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 943, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element enterpriseName uses Python identifier enterpriseName
    __enterpriseName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enterpriseName'), 'enterpriseName', '__AbsentNamespace0_responsiblePartnerCompanyElemType_enterpriseName', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 950, 4), )

    
    enterpriseName = property(__enterpriseName.value, __enterpriseName.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_responsiblePartnerCompanyElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 948, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute enterpriseCode uses Python identifier enterpriseCode
    __enterpriseCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'enterpriseCode'), 'enterpriseCode', '__AbsentNamespace0_responsiblePartnerCompanyElemType_enterpriseCode', pyxb.binding.datatypes.string)
    __enterpriseCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 951, 4)
    __enterpriseCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 947, 8)
    
    enterpriseCode = property(__enterpriseCode.value, __enterpriseCode.set, None, None)

    _ElementMap.update({
        __enterpriseName.name() : __enterpriseName
    })
    _AttributeMap.update({
        __id.name() : __id,
        __enterpriseCode.name() : __enterpriseCode
    })
Namespace.addCategoryObject('typeBinding', u'responsiblePartnerCompanyElemType', responsiblePartnerCompanyElemType)


# Complex type pubMediaElemType with content type EMPTY
class pubMediaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type pubMediaElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pubMediaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 953, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute pubMediaType uses Python identifier pubMediaType
    __pubMediaType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'pubMediaType'), 'pubMediaType', '__AbsentNamespace0_pubMediaElemType_pubMediaType', pyxb.binding.datatypes.string, required=True)
    __pubMediaType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 959, 4)
    __pubMediaType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 954, 8)
    
    pubMediaType = property(__pubMediaType.value, __pubMediaType.set, None, None)

    
    # Attribute pubMediaCode uses Python identifier pubMediaCode
    __pubMediaCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'pubMediaCode'), 'pubMediaCode', '__AbsentNamespace0_pubMediaElemType_pubMediaCode', pyxb.binding.datatypes.string, required=True)
    __pubMediaCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 960, 4)
    __pubMediaCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 955, 8)
    
    pubMediaCode = property(__pubMediaCode.value, __pubMediaCode.set, None, None)

    
    # Attribute volumeNumber uses Python identifier volumeNumber
    __volumeNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'volumeNumber'), 'volumeNumber', '__AbsentNamespace0_pubMediaElemType_volumeNumber', pyxb.binding.datatypes.string)
    __volumeNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 961, 4)
    __volumeNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 956, 8)
    
    volumeNumber = property(__volumeNumber.value, __volumeNumber.set, None, None)

    
    # Attribute mediaLocation uses Python identifier mediaLocation
    __mediaLocation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'mediaLocation'), 'mediaLocation', '__AbsentNamespace0_pubMediaElemType_mediaLocation', pyxb.binding.datatypes.string)
    __mediaLocation._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 962, 4)
    __mediaLocation._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 957, 8)
    
    mediaLocation = property(__mediaLocation.value, __mediaLocation.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __pubMediaType.name() : __pubMediaType,
        __pubMediaCode.name() : __pubMediaCode,
        __volumeNumber.name() : __volumeNumber,
        __mediaLocation.name() : __mediaLocation
    })
Namespace.addCategoryObject('typeBinding', u'pubMediaElemType', pubMediaElemType)


# Complex type externalPubRefIdentElemType with content type ELEMENT_ONLY
class externalPubRefIdentElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type externalPubRefIdentElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalPubRefIdentElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 979, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element externalPubCode uses Python identifier externalPubCode
    __externalPubCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubCode'), 'externalPubCode', '__AbsentNamespace0_externalPubRefIdentElemType_externalPubCode', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 986, 4), )

    
    externalPubCode = property(__externalPubCode.value, __externalPubCode.set, None, None)

    
    # Element externalPubTitle uses Python identifier externalPubTitle
    __externalPubTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubTitle'), 'externalPubTitle', '__AbsentNamespace0_externalPubRefIdentElemType_externalPubTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1251, 4), )

    
    externalPubTitle = property(__externalPubTitle.value, __externalPubTitle.set, None, None)

    
    # Element externalPubIssueInfo uses Python identifier externalPubIssueInfo
    __externalPubIssueInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssueInfo'), 'externalPubIssueInfo', '__AbsentNamespace0_externalPubRefIdentElemType_externalPubIssueInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1262, 4), )

    
    externalPubIssueInfo = property(__externalPubIssueInfo.value, __externalPubIssueInfo.set, None, None)

    _ElementMap.update({
        __externalPubCode.name() : __externalPubCode,
        __externalPubTitle.name() : __externalPubTitle,
        __externalPubIssueInfo.name() : __externalPubIssueInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'externalPubRefIdentElemType', externalPubRefIdentElemType)


# Complex type externalPubCodeElemType with content type MIXED
class externalPubCodeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type externalPubCodeElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalPubCodeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 987, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_externalPubCodeElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_externalPubCodeElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element indexFlag uses Python identifier indexFlag
    __indexFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), 'indexFlag', '__AbsentNamespace0_externalPubCodeElemType_indexFlag', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4), )

    
    indexFlag = property(__indexFlag.value, __indexFlag.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_externalPubCodeElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_externalPubCodeElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_externalPubCodeElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Attribute pubCodingScheme uses Python identifier pubCodingScheme
    __pubCodingScheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'pubCodingScheme'), 'pubCodingScheme', '__AbsentNamespace0_externalPubCodeElemType_pubCodingScheme', pyxb.binding.datatypes.string)
    __pubCodingScheme._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1250, 4)
    __pubCodingScheme._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 996, 8)
    
    pubCodingScheme = property(__pubCodingScheme.value, __pubCodingScheme.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __indexFlag.name() : __indexFlag,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText
    })
    _AttributeMap.update({
        __pubCodingScheme.name() : __pubCodingScheme
    })
Namespace.addCategoryObject('typeBinding', u'externalPubCodeElemType', externalPubCodeElemType)


# Complex type indexFlagElemType with content type EMPTY
class indexFlagElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type indexFlagElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'indexFlagElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 999, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute indexLevelOne uses Python identifier indexLevelOne
    __indexLevelOne = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'indexLevelOne'), 'indexLevelOne', '__AbsentNamespace0_indexFlagElemType_indexLevelOne', pyxb.binding.datatypes.string)
    __indexLevelOne._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1005, 4)
    __indexLevelOne._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1000, 8)
    
    indexLevelOne = property(__indexLevelOne.value, __indexLevelOne.set, None, None)

    
    # Attribute indexLevelTwo uses Python identifier indexLevelTwo
    __indexLevelTwo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'indexLevelTwo'), 'indexLevelTwo', '__AbsentNamespace0_indexFlagElemType_indexLevelTwo', pyxb.binding.datatypes.string)
    __indexLevelTwo._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1006, 4)
    __indexLevelTwo._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1001, 8)
    
    indexLevelTwo = property(__indexLevelTwo.value, __indexLevelTwo.set, None, None)

    
    # Attribute indexLevelThree uses Python identifier indexLevelThree
    __indexLevelThree = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'indexLevelThree'), 'indexLevelThree', '__AbsentNamespace0_indexFlagElemType_indexLevelThree', pyxb.binding.datatypes.string)
    __indexLevelThree._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1007, 4)
    __indexLevelThree._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1002, 8)
    
    indexLevelThree = property(__indexLevelThree.value, __indexLevelThree.set, None, None)

    
    # Attribute indexLevelFour uses Python identifier indexLevelFour
    __indexLevelFour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'indexLevelFour'), 'indexLevelFour', '__AbsentNamespace0_indexFlagElemType_indexLevelFour', pyxb.binding.datatypes.string)
    __indexLevelFour._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1008, 4)
    __indexLevelFour._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1003, 8)
    
    indexLevelFour = property(__indexLevelFour.value, __indexLevelFour.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __indexLevelOne.name() : __indexLevelOne,
        __indexLevelTwo.name() : __indexLevelTwo,
        __indexLevelThree.name() : __indexLevelThree,
        __indexLevelFour.name() : __indexLevelFour
    })
Namespace.addCategoryObject('typeBinding', u'indexFlagElemType', indexFlagElemType)


# Complex type acronymTermElemType with content type MIXED
class acronymTermElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type acronymTermElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'acronymTermElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1022, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_acronymTermElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_acronymTermElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Attribute internalRefId uses Python identifier internalRefId
    __internalRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'internalRefId'), 'internalRefId', '__AbsentNamespace0_acronymTermElemType_internalRefId', pyxb.binding.datatypes.IDREF)
    __internalRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1026, 4)
    __internalRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1024, 8)
    
    internalRefId = property(__internalRefId.value, __internalRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript
    })
    _AttributeMap.update({
        __internalRefId.name() : __internalRefId
    })
Namespace.addCategoryObject('typeBinding', u'acronymTermElemType', acronymTermElemType)


# Complex type externalPubTitleElemType with content type MIXED
class externalPubTitleElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type externalPubTitleElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalPubTitleElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1252, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_externalPubTitleElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_externalPubTitleElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element indexFlag uses Python identifier indexFlag
    __indexFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), 'indexFlag', '__AbsentNamespace0_externalPubTitleElemType_indexFlag', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4), )

    
    indexFlag = property(__indexFlag.value, __indexFlag.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_externalPubTitleElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_externalPubTitleElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_externalPubTitleElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __indexFlag.name() : __indexFlag,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'externalPubTitleElemType', externalPubTitleElemType)


# Complex type externalPubIssueInfoElemType with content type MIXED
class externalPubIssueInfoElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type externalPubIssueInfoElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalPubIssueInfoElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1263, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element externalPubIssue uses Python identifier externalPubIssue
    __externalPubIssue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssue'), 'externalPubIssue', '__AbsentNamespace0_externalPubIssueInfoElemType_externalPubIssue', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1268, 4), )

    
    externalPubIssue = property(__externalPubIssue.value, __externalPubIssue.set, None, None)

    _ElementMap.update({
        __externalPubIssue.name() : __externalPubIssue
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'externalPubIssueInfoElemType', externalPubIssueInfoElemType)


# Complex type externalPubIssueElemType with content type MIXED
class externalPubIssueElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type externalPubIssueElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalPubIssueElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1269, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_externalPubIssueElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_externalPubIssueElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element indexFlag uses Python identifier indexFlag
    __indexFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), 'indexFlag', '__AbsentNamespace0_externalPubIssueElemType_indexFlag', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4), )

    
    indexFlag = property(__indexFlag.value, __indexFlag.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_externalPubIssueElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_externalPubIssueElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_externalPubIssueElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __indexFlag.name() : __indexFlag,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'externalPubIssueElemType', externalPubIssueElemType)


# Complex type externalPubRefAddressItemsElemType with content type ELEMENT_ONLY
class externalPubRefAddressItemsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type externalPubRefAddressItemsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalPubRefAddressItemsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1280, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element issueDate uses Python identifier issueDate
    __issueDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), 'issueDate', '__AbsentNamespace0_externalPubRefAddressItemsElemType_issueDate', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4), )

    
    issueDate = property(__issueDate.value, __issueDate.set, None, None)

    
    # Element security uses Python identifier security
    __security = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'security'), 'security', '__AbsentNamespace0_externalPubRefAddressItemsElemType_security', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 277, 4), )

    
    security = property(__security.value, __security.set, None, None)

    
    # Element responsiblePartnerCompany uses Python identifier responsiblePartnerCompany
    __responsiblePartnerCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany'), 'responsiblePartnerCompany', '__AbsentNamespace0_externalPubRefAddressItemsElemType_responsiblePartnerCompany', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 942, 4), )

    
    responsiblePartnerCompany = property(__responsiblePartnerCompany.value, __responsiblePartnerCompany.set, None, None)

    
    # Element pubMedia uses Python identifier pubMedia
    __pubMedia = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pubMedia'), 'pubMedia', '__AbsentNamespace0_externalPubRefAddressItemsElemType_pubMedia', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 952, 4), )

    
    pubMedia = property(__pubMedia.value, __pubMedia.set, None, None)

    
    # Element shortExternalPubTitle uses Python identifier shortExternalPubTitle
    __shortExternalPubTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shortExternalPubTitle'), 'shortExternalPubTitle', '__AbsentNamespace0_externalPubRefAddressItemsElemType_shortExternalPubTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1289, 4), )

    
    shortExternalPubTitle = property(__shortExternalPubTitle.value, __shortExternalPubTitle.set, None, None)

    _ElementMap.update({
        __issueDate.name() : __issueDate,
        __security.name() : __security,
        __responsiblePartnerCompany.name() : __responsiblePartnerCompany,
        __pubMedia.name() : __pubMedia,
        __shortExternalPubTitle.name() : __shortExternalPubTitle
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'externalPubRefAddressItemsElemType', externalPubRefAddressItemsElemType)


# Complex type shortExternalPubTitleElemType with content type MIXED
class shortExternalPubTitleElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type shortExternalPubTitleElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'shortExternalPubTitleElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1290, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_shortExternalPubTitleElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_shortExternalPubTitleElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element indexFlag uses Python identifier indexFlag
    __indexFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), 'indexFlag', '__AbsentNamespace0_shortExternalPubTitleElemType_indexFlag', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4), )

    
    indexFlag = property(__indexFlag.value, __indexFlag.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_shortExternalPubTitleElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_shortExternalPubTitleElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_shortExternalPubTitleElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __indexFlag.name() : __indexFlag,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'shortExternalPubTitleElemType', shortExternalPubTitleElemType)


# Complex type definitionListHeaderElemType with content type ELEMENT_ONLY
class definitionListHeaderElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type definitionListHeaderElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'definitionListHeaderElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3357, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element termTitle uses Python identifier termTitle
    __termTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'termTitle'), 'termTitle', '__AbsentNamespace0_definitionListHeaderElemType_termTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3363, 4), )

    
    termTitle = property(__termTitle.value, __termTitle.set, None, None)

    
    # Element definitionTitle uses Python identifier definitionTitle
    __definitionTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'definitionTitle'), 'definitionTitle', '__AbsentNamespace0_definitionListHeaderElemType_definitionTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3364, 4), )

    
    definitionTitle = property(__definitionTitle.value, __definitionTitle.set, None, None)

    _ElementMap.update({
        __termTitle.name() : __termTitle,
        __definitionTitle.name() : __definitionTitle
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'definitionListHeaderElemType', definitionListHeaderElemType)


# Complex type footnoteRefElemType with content type EMPTY
class footnoteRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type footnoteRefElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'footnoteRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3408, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute internalRefId uses Python identifier internalRefId
    __internalRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'internalRefId'), 'internalRefId', '__AbsentNamespace0_footnoteRefElemType_internalRefId', pyxb.binding.datatypes.IDREF)
    __internalRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1026, 4)
    __internalRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3409, 8)
    
    internalRefId = property(__internalRefId.value, __internalRefId.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __internalRefId.name() : __internalRefId
    })
Namespace.addCategoryObject('typeBinding', u'footnoteRefElemType', footnoteRefElemType)


# Complex type logoElemType with content type ELEMENT_ONLY
class logoElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type logoElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'logoElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3528, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_logoElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    _ElementMap.update({
        __symbol.name() : __symbol
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'logoElemType', logoElemType)


# Complex type originatorElemType with content type ELEMENT_ONLY
class originatorElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type originatorElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'originatorElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3534, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element enterpriseName uses Python identifier enterpriseName
    __enterpriseName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enterpriseName'), 'enterpriseName', '__AbsentNamespace0_originatorElemType_enterpriseName', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 950, 4), )

    
    enterpriseName = property(__enterpriseName.value, __enterpriseName.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_originatorElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3539, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute enterpriseCode uses Python identifier enterpriseCode
    __enterpriseCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'enterpriseCode'), 'enterpriseCode', '__AbsentNamespace0_originatorElemType_enterpriseCode', pyxb.binding.datatypes.string)
    __enterpriseCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 951, 4)
    __enterpriseCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3538, 8)
    
    enterpriseCode = property(__enterpriseCode.value, __enterpriseCode.set, None, None)

    _ElementMap.update({
        __enterpriseName.name() : __enterpriseName
    })
    _AttributeMap.update({
        __id.name() : __id,
        __enterpriseCode.name() : __enterpriseCode
    })
Namespace.addCategoryObject('typeBinding', u'originatorElemType', originatorElemType)


# Complex type applicCrossRefTableRefElemType with content type ELEMENT_ONLY
class applicCrossRefTableRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type applicCrossRefTableRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'applicCrossRefTableRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3542, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_applicCrossRefTableRefElemType_dmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    _ElementMap.update({
        __dmRef.name() : __dmRef
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'applicCrossRefTableRefElemType', applicCrossRefTableRefElemType)


# Complex type displayTextElemType with content type ELEMENT_ONLY
class displayTextElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type displayTextElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'displayTextElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3568, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element simplePara uses Python identifier simplePara
    __simplePara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), 'simplePara', '__AbsentNamespace0_displayTextElemType_simplePara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4), )

    
    simplePara = property(__simplePara.value, __simplePara.set, None, None)

    _ElementMap.update({
        __simplePara.name() : __simplePara
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'displayTextElemType', displayTextElemType)


# Complex type referencedApplicGroupElemType with content type ELEMENT_ONLY
class referencedApplicGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type referencedApplicGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'referencedApplicGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3623, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element applic uses Python identifier applic
    __applic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'applic'), 'applic', '__AbsentNamespace0_referencedApplicGroupElemType_applic', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3547, 4), )

    
    applic = property(__applic.value, __applic.set, None, None)

    _ElementMap.update({
        __applic.name() : __applic
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'referencedApplicGroupElemType', referencedApplicGroupElemType)


# Complex type techStandardElemType with content type ELEMENT_ONLY
class techStandardElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type techStandardElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'techStandardElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3629, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element authorityInfoAndTp uses Python identifier authorityInfoAndTp
    __authorityInfoAndTp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorityInfoAndTp'), 'authorityInfoAndTp', '__AbsentNamespace0_techStandardElemType_authorityInfoAndTp', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3640, 4), )

    
    authorityInfoAndTp = property(__authorityInfoAndTp.value, __authorityInfoAndTp.set, None, None)

    
    # Element authorityInfo uses Python identifier authorityInfo
    __authorityInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorityInfo'), 'authorityInfo', '__AbsentNamespace0_techStandardElemType_authorityInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3647, 4), )

    
    authorityInfo = property(__authorityInfo.value, __authorityInfo.set, None, None)

    
    # Element techPubBase uses Python identifier techPubBase
    __techPubBase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'techPubBase'), 'techPubBase', '__AbsentNamespace0_techStandardElemType_techPubBase', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3648, 4), )

    
    techPubBase = property(__techPubBase.value, __techPubBase.set, None, None)

    
    # Element authorityExceptions uses Python identifier authorityExceptions
    __authorityExceptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorityExceptions'), 'authorityExceptions', '__AbsentNamespace0_techStandardElemType_authorityExceptions', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3649, 4), )

    
    authorityExceptions = property(__authorityExceptions.value, __authorityExceptions.set, None, None)

    
    # Element authorityNotes uses Python identifier authorityNotes
    __authorityNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorityNotes'), 'authorityNotes', '__AbsentNamespace0_techStandardElemType_authorityNotes', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3692, 4), )

    
    authorityNotes = property(__authorityNotes.value, __authorityNotes.set, None, None)

    _ElementMap.update({
        __authorityInfoAndTp.name() : __authorityInfoAndTp,
        __authorityInfo.name() : __authorityInfo,
        __techPubBase.name() : __techPubBase,
        __authorityExceptions.name() : __authorityExceptions,
        __authorityNotes.name() : __authorityNotes
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'techStandardElemType', techStandardElemType)


# Complex type authorityInfoAndTpElemType with content type ELEMENT_ONLY
class authorityInfoAndTpElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type authorityInfoAndTpElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'authorityInfoAndTpElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3641, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element authorityInfo uses Python identifier authorityInfo
    __authorityInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorityInfo'), 'authorityInfo', '__AbsentNamespace0_authorityInfoAndTpElemType_authorityInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3647, 4), )

    
    authorityInfo = property(__authorityInfo.value, __authorityInfo.set, None, None)

    
    # Element techPubBase uses Python identifier techPubBase
    __techPubBase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'techPubBase'), 'techPubBase', '__AbsentNamespace0_authorityInfoAndTpElemType_techPubBase', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3648, 4), )

    
    techPubBase = property(__techPubBase.value, __techPubBase.set, None, None)

    _ElementMap.update({
        __authorityInfo.name() : __authorityInfo,
        __techPubBase.name() : __techPubBase
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'authorityInfoAndTpElemType', authorityInfoAndTpElemType)


# Complex type authorityExceptionsElemType with content type ELEMENT_ONLY
class authorityExceptionsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type authorityExceptionsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'authorityExceptionsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3650, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element productConfiguration uses Python identifier productConfiguration
    __productConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'productConfiguration'), 'productConfiguration', '__AbsentNamespace0_authorityExceptionsElemType_productConfiguration', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3656, 4), )

    
    productConfiguration = property(__productConfiguration.value, __productConfiguration.set, None, None)

    
    # Element retrofit uses Python identifier retrofit
    __retrofit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'retrofit'), 'retrofit', '__AbsentNamespace0_authorityExceptionsElemType_retrofit', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3665, 4), )

    
    retrofit = property(__retrofit.value, __retrofit.set, None, None)

    _ElementMap.update({
        __productConfiguration.name() : __productConfiguration,
        __retrofit.name() : __retrofit
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'authorityExceptionsElemType', authorityExceptionsElemType)


# Complex type productConfigurationElemType with content type ELEMENT_ONLY
class productConfigurationElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type productConfigurationElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'productConfigurationElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3657, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element excludedModification uses Python identifier excludedModification
    __excludedModification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'excludedModification'), 'excludedModification', '__AbsentNamespace0_productConfigurationElemType_excludedModification', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3663, 4), )

    
    excludedModification = property(__excludedModification.value, __excludedModification.set, None, None)

    
    # Element additionalModification uses Python identifier additionalModification
    __additionalModification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'additionalModification'), 'additionalModification', '__AbsentNamespace0_productConfigurationElemType_additionalModification', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3664, 4), )

    
    additionalModification = property(__additionalModification.value, __additionalModification.set, None, None)

    _ElementMap.update({
        __excludedModification.name() : __excludedModification,
        __additionalModification.name() : __additionalModification
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'productConfigurationElemType', productConfigurationElemType)


# Complex type retrofitElemType with content type ELEMENT_ONLY
class retrofitElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type retrofitElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'retrofitElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3666, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element modification uses Python identifier modification
    __modification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'modification'), 'modification', '__AbsentNamespace0_retrofitElemType_modification', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3671, 4), )

    
    modification = property(__modification.value, __modification.set, None, None)

    _ElementMap.update({
        __modification.name() : __modification
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'retrofitElemType', retrofitElemType)


# Complex type brexDmRefElemType with content type ELEMENT_ONLY
class brexDmRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type brexDmRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'brexDmRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3694, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_brexDmRefElemType_dmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    _ElementMap.update({
        __dmRef.name() : __dmRef
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'brexDmRefElemType', brexDmRefElemType)


# Complex type qualityAssuranceElemType with content type ELEMENT_ONLY
class qualityAssuranceElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type qualityAssuranceElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'qualityAssuranceElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3700, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element unverified uses Python identifier unverified
    __unverified = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'unverified'), 'unverified', '__AbsentNamespace0_qualityAssuranceElemType_unverified', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3710, 4), )

    
    unverified = property(__unverified.value, __unverified.set, None, None)

    
    # Element firstVerification uses Python identifier firstVerification
    __firstVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'firstVerification'), 'firstVerification', '__AbsentNamespace0_qualityAssuranceElemType_firstVerification', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3712, 4), )

    
    firstVerification = property(__firstVerification.value, __firstVerification.set, None, None)

    
    # Element secondVerification uses Python identifier secondVerification
    __secondVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'secondVerification'), 'secondVerification', '__AbsentNamespace0_qualityAssuranceElemType_secondVerification', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3724, 4), )

    
    secondVerification = property(__secondVerification.value, __secondVerification.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_qualityAssuranceElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3708, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __unverified.name() : __unverified,
        __firstVerification.name() : __firstVerification,
        __secondVerification.name() : __secondVerification
    })
    _AttributeMap.update({
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'qualityAssuranceElemType', qualityAssuranceElemType)


# Complex type unverifiedElemType with content type EMPTY
class unverifiedElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type unverifiedElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'unverifiedElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3711, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'unverifiedElemType', unverifiedElemType)


# Complex type systemBreakdownCodeElemType with content type MIXED
class systemBreakdownCodeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type systemBreakdownCodeElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'systemBreakdownCodeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3729, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_systemBreakdownCodeElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3730, 8)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'systemBreakdownCodeElemType', systemBreakdownCodeElemType)


# Complex type productSafetyElemType with content type MIXED
class productSafetyElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type productSafetyElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'productSafetyElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3957, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute safetyLabel uses Python identifier safetyLabel
    __safetyLabel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'safetyLabel'), 'safetyLabel', '__AbsentNamespace0_productSafetyElemType_safetyLabel', pyxb.binding.datatypes.string, required=True)
    __safetyLabel._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3960, 4)
    __safetyLabel._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3958, 8)
    
    safetyLabel = property(__safetyLabel.value, __safetyLabel.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __safetyLabel.name() : __safetyLabel
    })
Namespace.addCategoryObject('typeBinding', u'productSafetyElemType', productSafetyElemType)


# Complex type remarksElemType with content type ELEMENT_ONLY
class remarksElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type remarksElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'remarksElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3962, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element simplePara uses Python identifier simplePara
    __simplePara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), 'simplePara', '__AbsentNamespace0_remarksElemType_simplePara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4), )

    
    simplePara = property(__simplePara.value, __simplePara.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_remarksElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3966, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __simplePara.name() : __simplePara
    })
    _AttributeMap.update({
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'remarksElemType', remarksElemType)


# Complex type contentElemType with content type ELEMENT_ONLY
class contentElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type contentElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'contentElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3982, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_contentElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Element warningsAndCautions uses Python identifier warningsAndCautions
    __warningsAndCautions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warningsAndCautions'), 'warningsAndCautions', '__AbsentNamespace0_contentElemType_warningsAndCautions', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3990, 4), )

    
    warningsAndCautions = property(__warningsAndCautions.value, __warningsAndCautions.set, None, None)

    
    # Element procedure uses Python identifier procedure
    __procedure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'procedure'), 'procedure', '__AbsentNamespace0_contentElemType_procedure', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4047, 4), )

    
    procedure = property(__procedure.value, __procedure.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_contentElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3988, 8)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __refs.name() : __refs,
        __warningsAndCautions.name() : __warningsAndCautions,
        __procedure.name() : __procedure
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'contentElemType', contentElemType)


# Complex type procedureElemType with content type ELEMENT_ONLY
class procedureElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type procedureElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'procedureElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4048, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element commonInfo uses Python identifier commonInfo
    __commonInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'commonInfo'), 'commonInfo', '__AbsentNamespace0_procedureElemType_commonInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4056, 4), )

    
    commonInfo = property(__commonInfo.value, __commonInfo.set, None, None)

    
    # Element preliminaryRqmts uses Python identifier preliminaryRqmts
    __preliminaryRqmts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'preliminaryRqmts'), 'preliminaryRqmts', '__AbsentNamespace0_procedureElemType_preliminaryRqmts', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4635, 4), )

    
    preliminaryRqmts = property(__preliminaryRqmts.value, __preliminaryRqmts.set, None, None)

    
    # Element mainProcedure uses Python identifier mainProcedure
    __mainProcedure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'mainProcedure'), 'mainProcedure', '__AbsentNamespace0_procedureElemType_mainProcedure', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5395, 4), )

    
    mainProcedure = property(__mainProcedure.value, __mainProcedure.set, None, None)

    
    # Element closeRqmts uses Python identifier closeRqmts
    __closeRqmts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'closeRqmts'), 'closeRqmts', '__AbsentNamespace0_procedureElemType_closeRqmts', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5612, 4), )

    
    closeRqmts = property(__closeRqmts.value, __closeRqmts.set, None, None)

    _ElementMap.update({
        __commonInfo.name() : __commonInfo,
        __preliminaryRqmts.name() : __preliminaryRqmts,
        __mainProcedure.name() : __mainProcedure,
        __closeRqmts.name() : __closeRqmts
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'procedureElemType', procedureElemType)


# Complex type commonInfoElemType with content type ELEMENT_ONLY
class commonInfoElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type commonInfoElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'commonInfoElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4057, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'para'), 'para', '__AbsentNamespace0_commonInfoElemType_para', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4), )

    
    para = property(__para.value, __para.set, None, None)

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_commonInfoElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'note'), 'note', '__AbsentNamespace0_commonInfoElemType_note', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element figure uses Python identifier figure
    __figure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'figure'), 'figure', '__AbsentNamespace0_commonInfoElemType_figure', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4), )

    
    figure = property(__figure.value, __figure.set, None, None)

    
    # Element commonInfoDescrPara uses Python identifier commonInfoDescrPara
    __commonInfoDescrPara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara'), 'commonInfoDescrPara', '__AbsentNamespace0_commonInfoElemType_commonInfoDescrPara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4171, 4), )

    
    commonInfoDescrPara = property(__commonInfoDescrPara.value, __commonInfoDescrPara.set, None, None)

    _ElementMap.update({
        __para.name() : __para,
        __title.name() : __title,
        __note.name() : __note,
        __figure.name() : __figure,
        __commonInfoDescrPara.name() : __commonInfoDescrPara
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'commonInfoElemType', commonInfoElemType)


# Complex type reasonForAmendmentElemType with content type MIXED
class reasonForAmendmentElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reasonForAmendmentElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendmentElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4156, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_reasonForAmendmentElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_reasonForAmendmentElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_reasonForAmendmentElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_reasonForAmendmentElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_reasonForAmendmentElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_reasonForAmendmentElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_reasonForAmendmentElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_reasonForAmendmentElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_reasonForAmendmentElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_reasonForAmendmentElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_reasonForAmendmentElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_reasonForAmendmentElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_reasonForAmendmentElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_reasonForAmendmentElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_reasonForAmendmentElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_reasonForAmendmentElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_reasonForAmendmentElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_reasonForAmendmentElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_reasonForAmendmentElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reasonForAmendmentElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4160, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'reasonForAmendmentElemType', reasonForAmendmentElemType)


# Complex type parameterElemType with content type EMPTY
class parameterElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type parameterElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'parameterElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4419, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_parameterElemType_id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4420, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute parameterIdent uses Python identifier parameterIdent
    __parameterIdent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'parameterIdent'), 'parameterIdent', '__AbsentNamespace0_parameterElemType_parameterIdent', pyxb.binding.datatypes.string)
    __parameterIdent._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4425, 4)
    __parameterIdent._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4421, 8)
    
    parameterIdent = property(__parameterIdent.value, __parameterIdent.set, None, None)

    
    # Attribute parameterValue uses Python identifier parameterValue
    __parameterValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'parameterValue'), 'parameterValue', '__AbsentNamespace0_parameterElemType_parameterValue', pyxb.binding.datatypes.string)
    __parameterValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4426, 4)
    __parameterValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4422, 8)
    
    parameterValue = property(__parameterValue.value, __parameterValue.set, None, None)

    
    # Attribute parameterName uses Python identifier parameterName
    __parameterName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'parameterName'), 'parameterName', '__AbsentNamespace0_parameterElemType_parameterName', pyxb.binding.datatypes.string)
    __parameterName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4427, 4)
    __parameterName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4423, 8)
    
    parameterName = property(__parameterName.value, __parameterName.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id,
        __parameterIdent.name() : __parameterIdent,
        __parameterValue.name() : __parameterValue,
        __parameterName.name() : __parameterName
    })
Namespace.addCategoryObject('typeBinding', u'parameterElemType', parameterElemType)


# Complex type foldoutElemType with content type ELEMENT_ONLY
class foldoutElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type foldoutElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'foldoutElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4450, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element figure uses Python identifier figure
    __figure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'figure'), 'figure', '__AbsentNamespace0_foldoutElemType_figure', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4), )

    
    figure = property(__figure.value, __figure.set, None, None)

    
    # Element table uses Python identifier table
    __table = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__AbsentNamespace0_foldoutElemType_table', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4), )

    
    table = property(__table.value, __table.set, None, None)

    _ElementMap.update({
        __figure.name() : __figure,
        __table.name() : __table
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'foldoutElemType', foldoutElemType)


# Complex type preliminaryRqmtsElemType with content type ELEMENT_ONLY
class preliminaryRqmtsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type preliminaryRqmtsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'preliminaryRqmtsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4636, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element productionMaintData uses Python identifier productionMaintData
    __productionMaintData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'productionMaintData'), 'productionMaintData', '__AbsentNamespace0_preliminaryRqmtsElemType_productionMaintData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4648, 4), )

    
    productionMaintData = property(__productionMaintData.value, __productionMaintData.set, None, None)

    
    # Element reqCondGroup uses Python identifier reqCondGroup
    __reqCondGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCondGroup'), 'reqCondGroup', '__AbsentNamespace0_preliminaryRqmtsElemType_reqCondGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4795, 4), )

    
    reqCondGroup = property(__reqCondGroup.value, __reqCondGroup.set, None, None)

    
    # Element reqPersons uses Python identifier reqPersons
    __reqPersons = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqPersons'), 'reqPersons', '__AbsentNamespace0_preliminaryRqmtsElemType_reqPersons', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4988, 4), )

    
    reqPersons = property(__reqPersons.value, __reqPersons.set, None, None)

    
    # Element reqTechInfoGroup uses Python identifier reqTechInfoGroup
    __reqTechInfoGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoGroup'), 'reqTechInfoGroup', '__AbsentNamespace0_preliminaryRqmtsElemType_reqTechInfoGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5056, 4), )

    
    reqTechInfoGroup = property(__reqTechInfoGroup.value, __reqTechInfoGroup.set, None, None)

    
    # Element reqSupportEquips uses Python identifier reqSupportEquips
    __reqSupportEquips = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqSupportEquips'), 'reqSupportEquips', '__AbsentNamespace0_preliminaryRqmtsElemType_reqSupportEquips', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5175, 4), )

    
    reqSupportEquips = property(__reqSupportEquips.value, __reqSupportEquips.set, None, None)

    
    # Element reqSupplies uses Python identifier reqSupplies
    __reqSupplies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqSupplies'), 'reqSupplies', '__AbsentNamespace0_preliminaryRqmtsElemType_reqSupplies', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5291, 4), )

    
    reqSupplies = property(__reqSupplies.value, __reqSupplies.set, None, None)

    
    # Element reqSpares uses Python identifier reqSpares
    __reqSpares = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqSpares'), 'reqSpares', '__AbsentNamespace0_preliminaryRqmtsElemType_reqSpares', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5338, 4), )

    
    reqSpares = property(__reqSpares.value, __reqSpares.set, None, None)

    
    # Element reqSafety uses Python identifier reqSafety
    __reqSafety = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqSafety'), 'reqSafety', '__AbsentNamespace0_preliminaryRqmtsElemType_reqSafety', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5373, 4), )

    
    reqSafety = property(__reqSafety.value, __reqSafety.set, None, None)

    _ElementMap.update({
        __productionMaintData.name() : __productionMaintData,
        __reqCondGroup.name() : __reqCondGroup,
        __reqPersons.name() : __reqPersons,
        __reqTechInfoGroup.name() : __reqTechInfoGroup,
        __reqSupportEquips.name() : __reqSupportEquips,
        __reqSupplies.name() : __reqSupplies,
        __reqSpares.name() : __reqSpares,
        __reqSafety.name() : __reqSafety
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'preliminaryRqmtsElemType', preliminaryRqmtsElemType)


# Complex type productionMaintDataElemType with content type ELEMENT_ONLY
class productionMaintDataElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type productionMaintDataElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'productionMaintDataElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4649, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accessPointRef uses Python identifier accessPointRef
    __accessPointRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessPointRef'), 'accessPointRef', '__AbsentNamespace0_productionMaintDataElemType_accessPointRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4251, 4), )

    
    accessPointRef = property(__accessPointRef.value, __accessPointRef.set, None, None)

    
    # Element thresholdInterval uses Python identifier thresholdInterval
    __thresholdInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'thresholdInterval'), 'thresholdInterval', '__AbsentNamespace0_productionMaintDataElemType_thresholdInterval', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4660, 4), )

    
    thresholdInterval = property(__thresholdInterval.value, __thresholdInterval.set, None, None)

    
    # Element zoneRef uses Python identifier zoneRef
    __zoneRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'zoneRef'), 'zoneRef', '__AbsentNamespace0_productionMaintDataElemType_zoneRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4768, 4), )

    
    zoneRef = property(__zoneRef.value, __zoneRef.set, None, None)

    
    # Element workArea uses Python identifier workArea
    __workArea = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'workArea'), 'workArea', '__AbsentNamespace0_productionMaintDataElemType_workArea', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4782, 4), )

    
    workArea = property(__workArea.value, __workArea.set, None, None)

    
    # Element taskDuration uses Python identifier taskDuration
    __taskDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taskDuration'), 'taskDuration', '__AbsentNamespace0_productionMaintDataElemType_taskDuration', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4783, 4), )

    
    taskDuration = property(__taskDuration.value, __taskDuration.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_productionMaintDataElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_productionMaintDataElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_productionMaintDataElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4657, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __accessPointRef.name() : __accessPointRef,
        __thresholdInterval.name() : __thresholdInterval,
        __zoneRef.name() : __zoneRef,
        __workArea.name() : __workArea,
        __taskDuration.name() : __taskDuration
    })
    _AttributeMap.update({
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'productionMaintDataElemType', productionMaintDataElemType)


# Complex type taskDurationElemType with content type EMPTY
class taskDurationElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type taskDurationElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'taskDurationElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4784, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_taskDurationElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4789, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'unitOfMeasure'), 'unitOfMeasure', '__AbsentNamespace0_taskDurationElemType_unitOfMeasure', pyxb.binding.datatypes.string, required=True)
    __unitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4791, 4)
    __unitOfMeasure._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4785, 8)
    
    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, None)

    
    # Attribute startupDuration uses Python identifier startupDuration
    __startupDuration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'startupDuration'), 'startupDuration', '__AbsentNamespace0_taskDurationElemType_startupDuration', pyxb.binding.datatypes.string, required=True)
    __startupDuration._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4792, 4)
    __startupDuration._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4786, 8)
    
    startupDuration = property(__startupDuration.value, __startupDuration.set, None, None)

    
    # Attribute procedureDuration uses Python identifier procedureDuration
    __procedureDuration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'procedureDuration'), 'procedureDuration', '__AbsentNamespace0_taskDurationElemType_procedureDuration', pyxb.binding.datatypes.string, required=True)
    __procedureDuration._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4793, 4)
    __procedureDuration._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4787, 8)
    
    procedureDuration = property(__procedureDuration.value, __procedureDuration.set, None, None)

    
    # Attribute closeupDuration uses Python identifier closeupDuration
    __closeupDuration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'closeupDuration'), 'closeupDuration', '__AbsentNamespace0_taskDurationElemType_closeupDuration', pyxb.binding.datatypes.string, required=True)
    __closeupDuration._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4794, 4)
    __closeupDuration._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4788, 8)
    
    closeupDuration = property(__closeupDuration.value, __closeupDuration.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id,
        __unitOfMeasure.name() : __unitOfMeasure,
        __startupDuration.name() : __startupDuration,
        __procedureDuration.name() : __procedureDuration,
        __closeupDuration.name() : __closeupDuration
    })
Namespace.addCategoryObject('typeBinding', u'taskDurationElemType', taskDurationElemType)


# Complex type reqCondGroupElemType with content type ELEMENT_ONLY
class reqCondGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqCondGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4796, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element noConds uses Python identifier noConds
    __noConds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'noConds'), 'noConds', '__AbsentNamespace0_reqCondGroupElemType_noConds', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4808, 4), )

    
    noConds = property(__noConds.value, __noConds.set, None, None)

    
    # Element reqCondNoRef uses Python identifier reqCondNoRef
    __reqCondNoRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCondNoRef'), 'reqCondNoRef', '__AbsentNamespace0_reqCondGroupElemType_reqCondNoRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4810, 4), )

    
    reqCondNoRef = property(__reqCondNoRef.value, __reqCondNoRef.set, None, None)

    
    # Element reqCondDm uses Python identifier reqCondDm
    __reqCondDm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCondDm'), 'reqCondDm', '__AbsentNamespace0_reqCondGroupElemType_reqCondDm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4944, 4), )

    
    reqCondDm = property(__reqCondDm.value, __reqCondDm.set, None, None)

    
    # Element reqCondCircuitBreaker uses Python identifier reqCondCircuitBreaker
    __reqCondCircuitBreaker = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCondCircuitBreaker'), 'reqCondCircuitBreaker', '__AbsentNamespace0_reqCondGroupElemType_reqCondCircuitBreaker', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4955, 4), )

    
    reqCondCircuitBreaker = property(__reqCondCircuitBreaker.value, __reqCondCircuitBreaker.set, None, None)

    
    # Element reqCondPm uses Python identifier reqCondPm
    __reqCondPm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCondPm'), 'reqCondPm', '__AbsentNamespace0_reqCondGroupElemType_reqCondPm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4966, 4), )

    
    reqCondPm = property(__reqCondPm.value, __reqCondPm.set, None, None)

    
    # Element reqCondExternalPub uses Python identifier reqCondExternalPub
    __reqCondExternalPub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCondExternalPub'), 'reqCondExternalPub', '__AbsentNamespace0_reqCondGroupElemType_reqCondExternalPub', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4977, 4), )

    
    reqCondExternalPub = property(__reqCondExternalPub.value, __reqCondExternalPub.set, None, None)

    _ElementMap.update({
        __noConds.name() : __noConds,
        __reqCondNoRef.name() : __reqCondNoRef,
        __reqCondDm.name() : __reqCondDm,
        __reqCondCircuitBreaker.name() : __reqCondCircuitBreaker,
        __reqCondPm.name() : __reqCondPm,
        __reqCondExternalPub.name() : __reqCondExternalPub
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'reqCondGroupElemType', reqCondGroupElemType)


# Complex type noCondsElemType with content type EMPTY
class noCondsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type noCondsElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'noCondsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4809, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'noCondsElemType', noCondsElemType)


# Complex type reqTechInfoGroupElemType with content type ELEMENT_ONLY
class reqTechInfoGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqTechInfoGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5057, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element reqTechInfo uses Python identifier reqTechInfo
    __reqTechInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfo'), 'reqTechInfo', '__AbsentNamespace0_reqTechInfoGroupElemType_reqTechInfo', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5062, 4), )

    
    reqTechInfo = property(__reqTechInfo.value, __reqTechInfo.set, None, None)

    _ElementMap.update({
        __reqTechInfo.name() : __reqTechInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'reqTechInfoGroupElemType', reqTechInfoGroupElemType)


# Complex type reqSupportEquipsElemType with content type ELEMENT_ONLY
class reqSupportEquipsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqSupportEquipsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqSupportEquipsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5176, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element noSupportEquips uses Python identifier noSupportEquips
    __noSupportEquips = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'noSupportEquips'), 'noSupportEquips', '__AbsentNamespace0_reqSupportEquipsElemType_noSupportEquips', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5182, 4), )

    
    noSupportEquips = property(__noSupportEquips.value, __noSupportEquips.set, None, None)

    
    # Element supportEquipDescrGroup uses Python identifier supportEquipDescrGroup
    __supportEquipDescrGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescrGroup'), 'supportEquipDescrGroup', '__AbsentNamespace0_reqSupportEquipsElemType_supportEquipDescrGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5184, 4), )

    
    supportEquipDescrGroup = property(__supportEquipDescrGroup.value, __supportEquipDescrGroup.set, None, None)

    _ElementMap.update({
        __noSupportEquips.name() : __noSupportEquips,
        __supportEquipDescrGroup.name() : __supportEquipDescrGroup
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'reqSupportEquipsElemType', reqSupportEquipsElemType)


# Complex type noSupportEquipsElemType with content type EMPTY
class noSupportEquipsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type noSupportEquipsElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'noSupportEquipsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5183, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'noSupportEquipsElemType', noSupportEquipsElemType)


# Complex type supportEquipDescrGroupElemType with content type ELEMENT_ONLY
class supportEquipDescrGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type supportEquipDescrGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescrGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5185, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element supportEquipDescr uses Python identifier supportEquipDescr
    __supportEquipDescr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescr'), 'supportEquipDescr', '__AbsentNamespace0_supportEquipDescrGroupElemType_supportEquipDescr', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5190, 4), )

    
    supportEquipDescr = property(__supportEquipDescr.value, __supportEquipDescr.set, None, None)

    _ElementMap.update({
        __supportEquipDescr.name() : __supportEquipDescr
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'supportEquipDescrGroupElemType', supportEquipDescrGroupElemType)


# Complex type partAndSerialNumberElemType with content type ELEMENT_ONLY
class partAndSerialNumberElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type partAndSerialNumberElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'partAndSerialNumberElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5244, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element partNumber uses Python identifier partNumber
    __partNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'partNumber'), 'partNumber', '__AbsentNamespace0_partAndSerialNumberElemType_partNumber', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5250, 4), )

    
    partNumber = property(__partNumber.value, __partNumber.set, None, None)

    
    # Element serialNumber uses Python identifier serialNumber
    __serialNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'serialNumber'), 'serialNumber', '__AbsentNamespace0_partAndSerialNumberElemType_serialNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5256, 4), )

    
    serialNumber = property(__serialNumber.value, __serialNumber.set, None, None)

    _ElementMap.update({
        __partNumber.name() : __partNumber,
        __serialNumber.name() : __serialNumber
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'partAndSerialNumberElemType', partAndSerialNumberElemType)


# Complex type reqSuppliesElemType with content type ELEMENT_ONLY
class reqSuppliesElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqSuppliesElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqSuppliesElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5292, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element noSupplies uses Python identifier noSupplies
    __noSupplies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'noSupplies'), 'noSupplies', '__AbsentNamespace0_reqSuppliesElemType_noSupplies', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5298, 4), )

    
    noSupplies = property(__noSupplies.value, __noSupplies.set, None, None)

    
    # Element supplyDescrGroup uses Python identifier supplyDescrGroup
    __supplyDescrGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'supplyDescrGroup'), 'supplyDescrGroup', '__AbsentNamespace0_reqSuppliesElemType_supplyDescrGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5300, 4), )

    
    supplyDescrGroup = property(__supplyDescrGroup.value, __supplyDescrGroup.set, None, None)

    _ElementMap.update({
        __noSupplies.name() : __noSupplies,
        __supplyDescrGroup.name() : __supplyDescrGroup
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'reqSuppliesElemType', reqSuppliesElemType)


# Complex type noSuppliesElemType with content type EMPTY
class noSuppliesElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type noSuppliesElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'noSuppliesElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5299, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'noSuppliesElemType', noSuppliesElemType)


# Complex type supplyDescrGroupElemType with content type ELEMENT_ONLY
class supplyDescrGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type supplyDescrGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'supplyDescrGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5301, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element supplyDescr uses Python identifier supplyDescr
    __supplyDescr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'supplyDescr'), 'supplyDescr', '__AbsentNamespace0_supplyDescrGroupElemType_supplyDescr', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5306, 4), )

    
    supplyDescr = property(__supplyDescr.value, __supplyDescr.set, None, None)

    _ElementMap.update({
        __supplyDescr.name() : __supplyDescr
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'supplyDescrGroupElemType', supplyDescrGroupElemType)


# Complex type reqSparesElemType with content type ELEMENT_ONLY
class reqSparesElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqSparesElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqSparesElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5339, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element noSpares uses Python identifier noSpares
    __noSpares = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'noSpares'), 'noSpares', '__AbsentNamespace0_reqSparesElemType_noSpares', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5345, 4), )

    
    noSpares = property(__noSpares.value, __noSpares.set, None, None)

    
    # Element spareDescrGroup uses Python identifier spareDescrGroup
    __spareDescrGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'spareDescrGroup'), 'spareDescrGroup', '__AbsentNamespace0_reqSparesElemType_spareDescrGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5347, 4), )

    
    spareDescrGroup = property(__spareDescrGroup.value, __spareDescrGroup.set, None, None)

    _ElementMap.update({
        __noSpares.name() : __noSpares,
        __spareDescrGroup.name() : __spareDescrGroup
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'reqSparesElemType', reqSparesElemType)


# Complex type noSparesElemType with content type EMPTY
class noSparesElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type noSparesElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'noSparesElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5346, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'noSparesElemType', noSparesElemType)


# Complex type spareDescrGroupElemType with content type ELEMENT_ONLY
class spareDescrGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type spareDescrGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'spareDescrGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5348, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element spareDescr uses Python identifier spareDescr
    __spareDescr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'spareDescr'), 'spareDescr', '__AbsentNamespace0_spareDescrGroupElemType_spareDescr', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5353, 4), )

    
    spareDescr = property(__spareDescr.value, __spareDescr.set, None, None)

    _ElementMap.update({
        __spareDescr.name() : __spareDescr
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'spareDescrGroupElemType', spareDescrGroupElemType)


# Complex type reqSafetyElemType with content type ELEMENT_ONLY
class reqSafetyElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqSafetyElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqSafetyElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5374, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element noSafety uses Python identifier noSafety
    __noSafety = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'noSafety'), 'noSafety', '__AbsentNamespace0_reqSafetyElemType_noSafety', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5380, 4), )

    
    noSafety = property(__noSafety.value, __noSafety.set, None, None)

    
    # Element safetyRqmts uses Python identifier safetyRqmts
    __safetyRqmts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'safetyRqmts'), 'safetyRqmts', '__AbsentNamespace0_reqSafetyElemType_safetyRqmts', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5382, 4), )

    
    safetyRqmts = property(__safetyRqmts.value, __safetyRqmts.set, None, None)

    _ElementMap.update({
        __noSafety.name() : __noSafety,
        __safetyRqmts.name() : __safetyRqmts
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'reqSafetyElemType', reqSafetyElemType)


# Complex type noSafetyElemType with content type EMPTY
class noSafetyElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type noSafetyElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'noSafetyElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5381, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'noSafetyElemType', noSafetyElemType)


# Complex type safetyRqmtsElemType with content type ELEMENT_ONLY
class safetyRqmtsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type safetyRqmtsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'safetyRqmtsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5383, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'note'), 'note', '__AbsentNamespace0_safetyRqmtsElemType_note', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element warning uses Python identifier warning
    __warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warning'), 'warning', '__AbsentNamespace0_safetyRqmtsElemType_warning', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4), )

    
    warning = property(__warning.value, __warning.set, None, None)

    
    # Element caution uses Python identifier caution
    __caution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'caution'), 'caution', '__AbsentNamespace0_safetyRqmtsElemType_caution', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4), )

    
    caution = property(__caution.value, __caution.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_safetyRqmtsElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5385, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute warningRefs uses Python identifier warningRefs
    __warningRefs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'warningRefs'), 'warningRefs', '__AbsentNamespace0_safetyRqmtsElemType_warningRefs', pyxb.binding.datatypes.IDREFS)
    __warningRefs._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4595, 4)
    __warningRefs._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5386, 8)
    
    warningRefs = property(__warningRefs.value, __warningRefs.set, None, None)

    
    # Attribute cautionRefs uses Python identifier cautionRefs
    __cautionRefs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'cautionRefs'), 'cautionRefs', '__AbsentNamespace0_safetyRqmtsElemType_cautionRefs', pyxb.binding.datatypes.IDREFS)
    __cautionRefs._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4596, 4)
    __cautionRefs._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5387, 8)
    
    cautionRefs = property(__cautionRefs.value, __cautionRefs.set, None, None)

    _ElementMap.update({
        __note.name() : __note,
        __warning.name() : __warning,
        __caution.name() : __caution
    })
    _AttributeMap.update({
        __id.name() : __id,
        __warningRefs.name() : __warningRefs,
        __cautionRefs.name() : __cautionRefs
    })
Namespace.addCategoryObject('typeBinding', u'safetyRqmtsElemType', safetyRqmtsElemType)


# Complex type captionLineElemType with content type MIXED
class captionLineElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type captionLineElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'captionLineElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5461, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_captionLineElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    _ElementMap.update({
        __acronymTerm.name() : __acronymTerm
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'captionLineElemType', captionLineElemType)


# Complex type dmCodeElemType with content type EMPTY
class dmCodeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmCodeElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmCodeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 68, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute modelIdentCode uses Python identifier modelIdentCode
    __modelIdentCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'modelIdentCode'), 'modelIdentCode', '__AbsentNamespace0_dmCodeElemType_modelIdentCode', modelIdentCodeAttType, required=True)
    __modelIdentCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 83, 4)
    __modelIdentCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 69, 8)
    
    modelIdentCode = property(__modelIdentCode.value, __modelIdentCode.set, None, None)

    
    # Attribute systemDiffCode uses Python identifier systemDiffCode
    __systemDiffCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'systemDiffCode'), 'systemDiffCode', '__AbsentNamespace0_dmCodeElemType_systemDiffCode', systemDiffCodeAttType, required=True)
    __systemDiffCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 89, 4)
    __systemDiffCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 70, 8)
    
    systemDiffCode = property(__systemDiffCode.value, __systemDiffCode.set, None, None)

    
    # Attribute systemCode uses Python identifier systemCode
    __systemCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'systemCode'), 'systemCode', '__AbsentNamespace0_dmCodeElemType_systemCode', systemCodeAttType, required=True)
    __systemCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 95, 4)
    __systemCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 71, 8)
    
    systemCode = property(__systemCode.value, __systemCode.set, None, None)

    
    # Attribute subSystemCode uses Python identifier subSystemCode
    __subSystemCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'subSystemCode'), 'subSystemCode', '__AbsentNamespace0_dmCodeElemType_subSystemCode', subSystemCodeAttType, required=True)
    __subSystemCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 101, 4)
    __subSystemCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 72, 8)
    
    subSystemCode = property(__subSystemCode.value, __subSystemCode.set, None, None)

    
    # Attribute subSubSystemCode uses Python identifier subSubSystemCode
    __subSubSystemCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'subSubSystemCode'), 'subSubSystemCode', '__AbsentNamespace0_dmCodeElemType_subSubSystemCode', subSubSystemCodeAttType, required=True)
    __subSubSystemCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 107, 4)
    __subSubSystemCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 73, 8)
    
    subSubSystemCode = property(__subSubSystemCode.value, __subSubSystemCode.set, None, None)

    
    # Attribute assyCode uses Python identifier assyCode
    __assyCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'assyCode'), 'assyCode', '__AbsentNamespace0_dmCodeElemType_assyCode', assyCodeAttType, required=True)
    __assyCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 113, 4)
    __assyCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 74, 8)
    
    assyCode = property(__assyCode.value, __assyCode.set, None, None)

    
    # Attribute disassyCode uses Python identifier disassyCode
    __disassyCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'disassyCode'), 'disassyCode', '__AbsentNamespace0_dmCodeElemType_disassyCode', disassyCodeAttType, required=True)
    __disassyCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 119, 4)
    __disassyCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 75, 8)
    
    disassyCode = property(__disassyCode.value, __disassyCode.set, None, None)

    
    # Attribute disassyCodeVariant uses Python identifier disassyCodeVariant
    __disassyCodeVariant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'disassyCodeVariant'), 'disassyCodeVariant', '__AbsentNamespace0_dmCodeElemType_disassyCodeVariant', disassyCodeVariantAttType, required=True)
    __disassyCodeVariant._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 125, 4)
    __disassyCodeVariant._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 76, 8)
    
    disassyCodeVariant = property(__disassyCodeVariant.value, __disassyCodeVariant.set, None, None)

    
    # Attribute infoCode uses Python identifier infoCode
    __infoCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'infoCode'), 'infoCode', '__AbsentNamespace0_dmCodeElemType_infoCode', infoCodeAttType, required=True)
    __infoCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 131, 4)
    __infoCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 77, 8)
    
    infoCode = property(__infoCode.value, __infoCode.set, None, None)

    
    # Attribute infoCodeVariant uses Python identifier infoCodeVariant
    __infoCodeVariant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'infoCodeVariant'), 'infoCodeVariant', '__AbsentNamespace0_dmCodeElemType_infoCodeVariant', infoCodeVariantAttType, required=True)
    __infoCodeVariant._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 137, 4)
    __infoCodeVariant._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 78, 8)
    
    infoCodeVariant = property(__infoCodeVariant.value, __infoCodeVariant.set, None, None)

    
    # Attribute itemLocationCode uses Python identifier itemLocationCode
    __itemLocationCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'itemLocationCode'), 'itemLocationCode', '__AbsentNamespace0_dmCodeElemType_itemLocationCode', itemLocationCodeAttType, required=True)
    __itemLocationCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 143, 4)
    __itemLocationCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 79, 8)
    
    itemLocationCode = property(__itemLocationCode.value, __itemLocationCode.set, None, None)

    
    # Attribute learnCode uses Python identifier learnCode
    __learnCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'learnCode'), 'learnCode', '__AbsentNamespace0_dmCodeElemType_learnCode', learnCodeAttType)
    __learnCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 149, 4)
    __learnCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 80, 8)
    
    learnCode = property(__learnCode.value, __learnCode.set, None, None)

    
    # Attribute learnEventCode uses Python identifier learnEventCode
    __learnEventCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'learnEventCode'), 'learnEventCode', '__AbsentNamespace0_dmCodeElemType_learnEventCode', learnEventCodeAttType)
    __learnEventCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 155, 4)
    __learnEventCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 81, 8)
    
    learnEventCode = property(__learnEventCode.value, __learnEventCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __modelIdentCode.name() : __modelIdentCode,
        __systemDiffCode.name() : __systemDiffCode,
        __systemCode.name() : __systemCode,
        __subSystemCode.name() : __subSystemCode,
        __subSubSystemCode.name() : __subSubSystemCode,
        __assyCode.name() : __assyCode,
        __disassyCode.name() : __disassyCode,
        __disassyCodeVariant.name() : __disassyCodeVariant,
        __infoCode.name() : __infoCode,
        __infoCodeVariant.name() : __infoCodeVariant,
        __itemLocationCode.name() : __itemLocationCode,
        __learnCode.name() : __learnCode,
        __learnEventCode.name() : __learnEventCode
    })
Namespace.addCategoryObject('typeBinding', u'dmCodeElemType', dmCodeElemType)


# Complex type languageElemType with content type EMPTY
class languageElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type languageElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'languageElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 162, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute languageIsoCode uses Python identifier languageIsoCode
    __languageIsoCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'languageIsoCode'), 'languageIsoCode', '__AbsentNamespace0_languageElemType_languageIsoCode', languageIsoCodeAttType, required=True)
    __languageIsoCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 166, 4)
    __languageIsoCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 163, 8)
    
    languageIsoCode = property(__languageIsoCode.value, __languageIsoCode.set, None, None)

    
    # Attribute countryIsoCode uses Python identifier countryIsoCode
    __countryIsoCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'countryIsoCode'), 'countryIsoCode', '__AbsentNamespace0_languageElemType_countryIsoCode', countryIsoCodeAttType, required=True)
    __countryIsoCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 172, 4)
    __countryIsoCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 164, 8)
    
    countryIsoCode = property(__countryIsoCode.value, __countryIsoCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __languageIsoCode.name() : __languageIsoCode,
        __countryIsoCode.name() : __countryIsoCode
    })
Namespace.addCategoryObject('typeBinding', u'languageElemType', languageElemType)


# Complex type issueInfoElemType with content type EMPTY
class issueInfoElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type issueInfoElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'issueInfoElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 179, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute issueNumber uses Python identifier issueNumber
    __issueNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'issueNumber'), 'issueNumber', '__AbsentNamespace0_issueInfoElemType_issueNumber', issueNumberAttType, required=True)
    __issueNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 183, 4)
    __issueNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 180, 8)
    
    issueNumber = property(__issueNumber.value, __issueNumber.set, None, None)

    
    # Attribute inWork uses Python identifier inWork
    __inWork = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'inWork'), 'inWork', '__AbsentNamespace0_issueInfoElemType_inWork', inWorkAttType, required=True)
    __inWork._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 189, 4)
    __inWork._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 181, 8)
    
    inWork = property(__inWork.value, __inWork.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __issueNumber.name() : __issueNumber,
        __inWork.name() : __inWork
    })
Namespace.addCategoryObject('typeBinding', u'issueInfoElemType', issueInfoElemType)


# Complex type issueDateElemType with content type EMPTY
class issueDateElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type issueDateElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'issueDateElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 203, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute year uses Python identifier year
    __year = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'year'), 'year', '__AbsentNamespace0_issueDateElemType_year', yearAttType, required=True)
    __year._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 211, 4)
    __year._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 207, 8)
    
    year = property(__year.value, __year.set, None, None)

    
    # Attribute month uses Python identifier month
    __month = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'month'), 'month', '__AbsentNamespace0_issueDateElemType_month', monthAttType, required=True)
    __month._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 217, 4)
    __month._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 208, 8)
    
    month = property(__month.value, __month.set, None, None)

    
    # Attribute day uses Python identifier day
    __day = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'day'), 'day', '__AbsentNamespace0_issueDateElemType_day', dayAttType, required=True)
    __day._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 224, 4)
    __day._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 209, 8)
    
    day = property(__day.value, __day.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __year.name() : __year,
        __month.name() : __month,
        __day.name() : __day
    })
Namespace.addCategoryObject('typeBinding', u'issueDateElemType', issueDateElemType)


# Complex type dmStatusElemType with content type ELEMENT_ONLY
class dmStatusElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmStatusElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmStatusElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 241, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element sourceDmIdent uses Python identifier sourceDmIdent
    __sourceDmIdent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'sourceDmIdent'), 'sourceDmIdent', '__AbsentNamespace0_dmStatusElemType_sourceDmIdent', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 268, 4), )

    
    sourceDmIdent = property(__sourceDmIdent.value, __sourceDmIdent.set, None, None)

    
    # Element security uses Python identifier security
    __security = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'security'), 'security', '__AbsentNamespace0_dmStatusElemType_security', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 277, 4), )

    
    security = property(__security.value, __security.set, None, None)

    
    # Element dataRestrictions uses Python identifier dataRestrictions
    __dataRestrictions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dataRestrictions'), 'dataRestrictions', '__AbsentNamespace0_dmStatusElemType_dataRestrictions', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 598, 4), )

    
    dataRestrictions = property(__dataRestrictions.value, __dataRestrictions.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_dmStatusElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element responsiblePartnerCompany uses Python identifier responsiblePartnerCompany
    __responsiblePartnerCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany'), 'responsiblePartnerCompany', '__AbsentNamespace0_dmStatusElemType_responsiblePartnerCompany', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 942, 4), )

    
    responsiblePartnerCompany = property(__responsiblePartnerCompany.value, __responsiblePartnerCompany.set, None, None)

    
    # Element logo uses Python identifier logo
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'logo'), 'logo', '__AbsentNamespace0_dmStatusElemType_logo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3527, 4), )

    
    logo = property(__logo.value, __logo.set, None, None)

    
    # Element originator uses Python identifier originator
    __originator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'originator'), 'originator', '__AbsentNamespace0_dmStatusElemType_originator', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3533, 4), )

    
    originator = property(__originator.value, __originator.set, None, None)

    
    # Element applicCrossRefTableRef uses Python identifier applicCrossRefTableRef
    __applicCrossRefTableRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'applicCrossRefTableRef'), 'applicCrossRefTableRef', '__AbsentNamespace0_dmStatusElemType_applicCrossRefTableRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3541, 4), )

    
    applicCrossRefTableRef = property(__applicCrossRefTableRef.value, __applicCrossRefTableRef.set, None, None)

    
    # Element applic uses Python identifier applic
    __applic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'applic'), 'applic', '__AbsentNamespace0_dmStatusElemType_applic', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3547, 4), )

    
    applic = property(__applic.value, __applic.set, None, None)

    
    # Element referencedApplicGroup uses Python identifier referencedApplicGroup
    __referencedApplicGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'referencedApplicGroup'), 'referencedApplicGroup', '__AbsentNamespace0_dmStatusElemType_referencedApplicGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3622, 4), )

    
    referencedApplicGroup = property(__referencedApplicGroup.value, __referencedApplicGroup.set, None, None)

    
    # Element techStandard uses Python identifier techStandard
    __techStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'techStandard'), 'techStandard', '__AbsentNamespace0_dmStatusElemType_techStandard', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3628, 4), )

    
    techStandard = property(__techStandard.value, __techStandard.set, None, None)

    
    # Element brexDmRef uses Python identifier brexDmRef
    __brexDmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'brexDmRef'), 'brexDmRef', '__AbsentNamespace0_dmStatusElemType_brexDmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3693, 4), )

    
    brexDmRef = property(__brexDmRef.value, __brexDmRef.set, None, None)

    
    # Element qualityAssurance uses Python identifier qualityAssurance
    __qualityAssurance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'qualityAssurance'), 'qualityAssurance', '__AbsentNamespace0_dmStatusElemType_qualityAssurance', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3699, 4), )

    
    qualityAssurance = property(__qualityAssurance.value, __qualityAssurance.set, None, None)

    
    # Element systemBreakdownCode uses Python identifier systemBreakdownCode
    __systemBreakdownCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'systemBreakdownCode'), 'systemBreakdownCode', '__AbsentNamespace0_dmStatusElemType_systemBreakdownCode', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3728, 4), )

    
    systemBreakdownCode = property(__systemBreakdownCode.value, __systemBreakdownCode.set, None, None)

    
    # Element functionalItemCode uses Python identifier functionalItemCode
    __functionalItemCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemCode'), 'functionalItemCode', '__AbsentNamespace0_dmStatusElemType_functionalItemCode', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3732, 4), )

    
    functionalItemCode = property(__functionalItemCode.value, __functionalItemCode.set, None, None)

    
    # Element skillLevel uses Python identifier skillLevel
    __skillLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'skillLevel'), 'skillLevel', '__AbsentNamespace0_dmStatusElemType_skillLevel', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3733, 4), )

    
    skillLevel = property(__skillLevel.value, __skillLevel.set, None, None)

    
    # Element reasonForUpdate uses Python identifier reasonForUpdate
    __reasonForUpdate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdate'), 'reasonForUpdate', '__AbsentNamespace0_dmStatusElemType_reasonForUpdate', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3841, 4), )

    
    reasonForUpdate = property(__reasonForUpdate.value, __reasonForUpdate.set, None, None)

    
    # Element productSafety uses Python identifier productSafety
    __productSafety = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'productSafety'), 'productSafety', '__AbsentNamespace0_dmStatusElemType_productSafety', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3956, 4), )

    
    productSafety = property(__productSafety.value, __productSafety.set, None, None)

    
    # Element remarks uses Python identifier remarks
    __remarks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'remarks'), 'remarks', '__AbsentNamespace0_dmStatusElemType_remarks', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4), )

    
    remarks = property(__remarks.value, __remarks.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dmStatusElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 265, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute issueType uses Python identifier issueType
    __issueType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'issueType'), 'issueType', '__AbsentNamespace0_dmStatusElemType_issueType', issueTypeAttType, unicode_default=u'new')
    __issueType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3968, 4)
    __issueType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 266, 8)
    
    issueType = property(__issueType.value, __issueType.set, None, None)

    _ElementMap.update({
        __sourceDmIdent.name() : __sourceDmIdent,
        __security.name() : __security,
        __dataRestrictions.name() : __dataRestrictions,
        __functionalItemRef.name() : __functionalItemRef,
        __responsiblePartnerCompany.name() : __responsiblePartnerCompany,
        __logo.name() : __logo,
        __originator.name() : __originator,
        __applicCrossRefTableRef.name() : __applicCrossRefTableRef,
        __applic.name() : __applic,
        __referencedApplicGroup.name() : __referencedApplicGroup,
        __techStandard.name() : __techStandard,
        __brexDmRef.name() : __brexDmRef,
        __qualityAssurance.name() : __qualityAssurance,
        __systemBreakdownCode.name() : __systemBreakdownCode,
        __functionalItemCode.name() : __functionalItemCode,
        __skillLevel.name() : __skillLevel,
        __reasonForUpdate.name() : __reasonForUpdate,
        __productSafety.name() : __productSafety,
        __remarks.name() : __remarks
    })
    _AttributeMap.update({
        __id.name() : __id,
        __issueType.name() : __issueType
    })
Namespace.addCategoryObject('typeBinding', u'dmStatusElemType', dmStatusElemType)


# Complex type securityElemType with content type EMPTY
class securityElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type securityElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'securityElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 278, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_securityElemType_securityClassification', securityClassificationAttType, required=True)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 279, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_securityElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_securityElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat
    })
Namespace.addCategoryObject('typeBinding', u'securityElemType', securityElemType)


# Complex type dataRestrictionsElemType with content type ELEMENT_ONLY
class dataRestrictionsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dataRestrictionsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dataRestrictionsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 599, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element restrictionInstructions uses Python identifier restrictionInstructions
    __restrictionInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'restrictionInstructions'), 'restrictionInstructions', '__AbsentNamespace0_dataRestrictionsElemType_restrictionInstructions', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 610, 4), )

    
    restrictionInstructions = property(__restrictionInstructions.value, __restrictionInstructions.set, None, None)

    
    # Element restrictionInfo uses Python identifier restrictionInfo
    __restrictionInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'restrictionInfo'), 'restrictionInfo', '__AbsentNamespace0_dataRestrictionsElemType_restrictionInfo', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 790, 4), )

    
    restrictionInfo = property(__restrictionInfo.value, __restrictionInfo.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_dataRestrictionsElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_dataRestrictionsElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_dataRestrictionsElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dataRestrictionsElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 605, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_dataRestrictionsElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_dataRestrictionsElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_dataRestrictionsElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_dataRestrictionsElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_dataRestrictionsElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_dataRestrictionsElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 604, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __restrictionInstructions.name() : __restrictionInstructions,
        __restrictionInfo.name() : __restrictionInfo
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'dataRestrictionsElemType', dataRestrictionsElemType)


# Complex type restrictionInstructionsElemType with content type ELEMENT_ONLY
class restrictionInstructionsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type restrictionInstructionsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'restrictionInstructionsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 611, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dataDistribution uses Python identifier dataDistribution
    __dataDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dataDistribution'), 'dataDistribution', '__AbsentNamespace0_restrictionInstructionsElemType_dataDistribution', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 624, 4), )

    
    dataDistribution = property(__dataDistribution.value, __dataDistribution.set, None, None)

    
    # Element exportControl uses Python identifier exportControl
    __exportControl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'exportControl'), 'exportControl', '__AbsentNamespace0_restrictionInstructionsElemType_exportControl', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 655, 4), )

    
    exportControl = property(__exportControl.value, __exportControl.set, None, None)

    
    # Element dataHandling uses Python identifier dataHandling
    __dataHandling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dataHandling'), 'dataHandling', '__AbsentNamespace0_restrictionInstructionsElemType_dataHandling', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 765, 4), )

    
    dataHandling = property(__dataHandling.value, __dataHandling.set, None, None)

    
    # Element dataDestruction uses Python identifier dataDestruction
    __dataDestruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dataDestruction'), 'dataDestruction', '__AbsentNamespace0_restrictionInstructionsElemType_dataDestruction', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 771, 4), )

    
    dataDestruction = property(__dataDestruction.value, __dataDestruction.set, None, None)

    
    # Element dataDisclosure uses Python identifier dataDisclosure
    __dataDisclosure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dataDisclosure'), 'dataDisclosure', '__AbsentNamespace0_restrictionInstructionsElemType_dataDisclosure', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 777, 4), )

    
    dataDisclosure = property(__dataDisclosure.value, __dataDisclosure.set, None, None)

    
    # Element supersedure uses Python identifier supersedure
    __supersedure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'supersedure'), 'supersedure', '__AbsentNamespace0_restrictionInstructionsElemType_supersedure', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 783, 4), )

    
    supersedure = property(__supersedure.value, __supersedure.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_restrictionInstructionsElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_restrictionInstructionsElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_restrictionInstructionsElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_restrictionInstructionsElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 620, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_restrictionInstructionsElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_restrictionInstructionsElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_restrictionInstructionsElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __dataDistribution.name() : __dataDistribution,
        __exportControl.name() : __exportControl,
        __dataHandling.name() : __dataHandling,
        __dataDestruction.name() : __dataDestruction,
        __dataDisclosure.name() : __dataDisclosure,
        __supersedure.name() : __supersedure
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'restrictionInstructionsElemType', restrictionInstructionsElemType)


# Complex type dataDistributionElemType with content type MIXED
class dataDistributionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dataDistributionElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dataDistributionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 625, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_dataDistributionElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_dataDistributionElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_dataDistributionElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dataDistributionElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 626, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_dataDistributionElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_dataDistributionElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_dataDistributionElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'dataDistributionElemType', dataDistributionElemType)


# Complex type exportControlElemType with content type ELEMENT_ONLY
class exportControlElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type exportControlElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'exportControlElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 656, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element exportRegistrationStmt uses Python identifier exportRegistrationStmt
    __exportRegistrationStmt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationStmt'), 'exportRegistrationStmt', '__AbsentNamespace0_exportControlElemType_exportRegistrationStmt', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 667, 4), )

    
    exportRegistrationStmt = property(__exportRegistrationStmt.value, __exportRegistrationStmt.set, None, None)

    
    # Element exportRegistrationCode uses Python identifier exportRegistrationCode
    __exportRegistrationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationCode'), 'exportRegistrationCode', '__AbsentNamespace0_exportControlElemType_exportRegistrationCode', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 758, 4), )

    
    exportRegistrationCode = property(__exportRegistrationCode.value, __exportRegistrationCode.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_exportControlElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_exportControlElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_exportControlElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_exportControlElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 661, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_exportControlElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_exportControlElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_exportControlElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute exportRegulationType uses Python identifier exportRegulationType
    __exportRegulationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'exportRegulationType'), 'exportRegulationType', '__AbsentNamespace0_exportControlElemType_exportRegulationType', pyxb.binding.datatypes.string)
    __exportRegulationType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 763, 4)
    __exportRegulationType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 664, 8)
    
    exportRegulationType = property(__exportRegulationType.value, __exportRegulationType.set, None, None)

    
    # Attribute governmentAuthority uses Python identifier governmentAuthority
    __governmentAuthority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'governmentAuthority'), 'governmentAuthority', '__AbsentNamespace0_exportControlElemType_governmentAuthority', pyxb.binding.datatypes.string)
    __governmentAuthority._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 764, 4)
    __governmentAuthority._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 665, 8)
    
    governmentAuthority = property(__governmentAuthority.value, __governmentAuthority.set, None, None)

    _ElementMap.update({
        __exportRegistrationStmt.name() : __exportRegistrationStmt,
        __exportRegistrationCode.name() : __exportRegistrationCode
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __exportRegulationType.name() : __exportRegulationType,
        __governmentAuthority.name() : __governmentAuthority
    })
Namespace.addCategoryObject('typeBinding', u'exportControlElemType', exportControlElemType)


# Complex type exportRegistrationStmtElemType with content type ELEMENT_ONLY
class exportRegistrationStmtElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type exportRegistrationStmtElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationStmtElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 668, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element simplePara uses Python identifier simplePara
    __simplePara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), 'simplePara', '__AbsentNamespace0_exportRegistrationStmtElemType_simplePara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4), )

    
    simplePara = property(__simplePara.value, __simplePara.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_exportRegistrationStmtElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Attribute exportRole uses Python identifier exportRole
    __exportRole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'exportRole'), 'exportRole', '__AbsentNamespace0_exportRegistrationStmtElemType_exportRole', exportRoleAttType)
    __exportRole._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 751, 4)
    __exportRole._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 673, 8)
    
    exportRole = property(__exportRole.value, __exportRole.set, None, None)

    _ElementMap.update({
        __simplePara.name() : __simplePara,
        __dmRef.name() : __dmRef
    })
    _AttributeMap.update({
        __exportRole.name() : __exportRole
    })
Namespace.addCategoryObject('typeBinding', u'exportRegistrationStmtElemType', exportRegistrationStmtElemType)


# Complex type simpleParaElemType with content type MIXED
class simpleParaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type simpleParaElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'simpleParaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 676, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_simpleParaElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_simpleParaElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_simpleParaElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_simpleParaElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_simpleParaElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_simpleParaElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 678, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_simpleParaElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_simpleParaElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_simpleParaElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_simpleParaElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_simpleParaElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument
    })
Namespace.addCategoryObject('typeBinding', u'simpleParaElemType', simpleParaElemType)


# Complex type dmRefElemType with content type ELEMENT_ONLY
class dmRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dmRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dmRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 698, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmRefIdent uses Python identifier dmRefIdent
    __dmRefIdent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRefIdent'), 'dmRefIdent', '__AbsentNamespace0_dmRefElemType_dmRefIdent', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 712, 4), )

    
    dmRefIdent = property(__dmRefIdent.value, __dmRefIdent.set, None, None)

    
    # Element dmRefAddressItems uses Python identifier dmRefAddressItems
    __dmRefAddressItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRefAddressItems'), 'dmRefAddressItems', '__AbsentNamespace0_dmRefElemType_dmRefAddressItems', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 721, 4), )

    
    dmRefAddressItems = property(__dmRefAddressItems.value, __dmRefAddressItems.set, None, None)

    
    # Element behavior uses Python identifier behavior
    __behavior = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'behavior'), 'behavior', '__AbsentNamespace0_dmRefElemType_behavior', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 728, 4), )

    
    behavior = property(__behavior.value, __behavior.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_dmRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_dmRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_dmRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dmRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 706, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_dmRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_dmRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_dmRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_dmRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_dmRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute referredFragment uses Python identifier referredFragment
    __referredFragment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'referredFragment'), 'referredFragment', '__AbsentNamespace0_dmRefElemType_referredFragment', pyxb.binding.datatypes.string)
    __referredFragment._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 749, 4)
    __referredFragment._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 704, 8)
    
    referredFragment = property(__referredFragment.value, __referredFragment.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_dmRefElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 705, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_dmRefElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 113, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_dmRefElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_dmRefElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'replace')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 112, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_dmRefElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_dmRefElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 82, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __dmRefIdent.name() : __dmRefIdent,
        __dmRefAddressItems.name() : __dmRefAddressItems,
        __behavior.name() : __behavior
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __referredFragment.name() : __referredFragment,
        __applicRefId.name() : __applicRefId,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'dmRefElemType', dmRefElemType)


# Complex type behaviorElemType with content type EMPTY
class behaviorElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type behaviorElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'behaviorElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 729, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute linkShow uses Python identifier linkShow
    __linkShow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'linkShow'), 'linkShow', '__AbsentNamespace0_behaviorElemType_linkShow', linkShowAttType)
    __linkShow._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 733, 4)
    __linkShow._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 730, 8)
    
    linkShow = property(__linkShow.value, __linkShow.set, None, None)

    
    # Attribute linkActuate uses Python identifier linkActuate
    __linkActuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'linkActuate'), 'linkActuate', '__AbsentNamespace0_behaviorElemType_linkActuate', linkActuateAttType)
    __linkActuate._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 742, 4)
    __linkActuate._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 731, 8)
    
    linkActuate = property(__linkActuate.value, __linkActuate.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __linkShow.name() : __linkShow,
        __linkActuate.name() : __linkActuate
    })
Namespace.addCategoryObject('typeBinding', u'behaviorElemType', behaviorElemType)


# Complex type dataHandlingElemType with content type MIXED
class dataHandlingElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dataHandlingElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dataHandlingElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 766, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_dataHandlingElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_dataHandlingElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_dataHandlingElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dataHandlingElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 767, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_dataHandlingElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_dataHandlingElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_dataHandlingElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'dataHandlingElemType', dataHandlingElemType)


# Complex type dataDestructionElemType with content type MIXED
class dataDestructionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dataDestructionElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dataDestructionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 772, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_dataDestructionElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_dataDestructionElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_dataDestructionElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dataDestructionElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 773, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_dataDestructionElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_dataDestructionElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_dataDestructionElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'dataDestructionElemType', dataDestructionElemType)


# Complex type dataDisclosureElemType with content type MIXED
class dataDisclosureElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dataDisclosureElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dataDisclosureElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 778, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_dataDisclosureElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_dataDisclosureElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_dataDisclosureElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dataDisclosureElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 779, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_dataDisclosureElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_dataDisclosureElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_dataDisclosureElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'dataDisclosureElemType', dataDisclosureElemType)


# Complex type supersedureElemType with content type MIXED
class supersedureElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type supersedureElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'supersedureElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 784, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_supersedureElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_supersedureElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_supersedureElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_supersedureElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_supersedureElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_supersedureElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 786, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_supersedureElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_supersedureElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_supersedureElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'supersedureElemType', supersedureElemType)


# Complex type restrictionInfoElemType with content type ELEMENT_ONLY
class restrictionInfoElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type restrictionInfoElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'restrictionInfoElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 791, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element copyright uses Python identifier copyright
    __copyright = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'copyright'), 'copyright', '__AbsentNamespace0_restrictionInfoElemType_copyright', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 801, 4), )

    
    copyright = property(__copyright.value, __copyright.set, None, None)

    
    # Element policyStatement uses Python identifier policyStatement
    __policyStatement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'policyStatement'), 'policyStatement', '__AbsentNamespace0_restrictionInfoElemType_policyStatement', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3515, 4), )

    
    policyStatement = property(__policyStatement.value, __policyStatement.set, None, None)

    
    # Element dataConds uses Python identifier dataConds
    __dataConds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dataConds'), 'dataConds', '__AbsentNamespace0_restrictionInfoElemType_dataConds', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3521, 4), )

    
    dataConds = property(__dataConds.value, __dataConds.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_restrictionInfoElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_restrictionInfoElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_restrictionInfoElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_restrictionInfoElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 797, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_restrictionInfoElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_restrictionInfoElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_restrictionInfoElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __copyright.name() : __copyright,
        __policyStatement.name() : __policyStatement,
        __dataConds.name() : __dataConds
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'restrictionInfoElemType', restrictionInfoElemType)


# Complex type copyrightElemType with content type ELEMENT_ONLY
class copyrightElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type copyrightElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'copyrightElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 802, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element copyrightPara uses Python identifier copyrightPara
    __copyrightPara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'copyrightPara'), 'copyrightPara', '__AbsentNamespace0_copyrightElemType_copyrightPara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 810, 4), )

    
    copyrightPara = property(__copyrightPara.value, __copyrightPara.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_copyrightElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_copyrightElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_copyrightElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_copyrightElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 806, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_copyrightElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_copyrightElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_copyrightElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __copyrightPara.name() : __copyrightPara
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'copyrightElemType', copyrightElemType)


# Complex type copyrightParaElemType with content type MIXED
class copyrightParaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type copyrightParaElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'copyrightParaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 811, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_copyrightParaElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_copyrightParaElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_copyrightParaElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_copyrightParaElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element randomList uses Python identifier randomList
    __randomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'randomList'), 'randomList', '__AbsentNamespace0_copyrightParaElemType_randomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4), )

    
    randomList = property(__randomList.value, __randomList.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_copyrightParaElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 820, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_copyrightParaElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_copyrightParaElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_copyrightParaElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_copyrightParaElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 819, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __randomList.name() : __randomList
    })
    _AttributeMap.update({
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'copyrightParaElemType', copyrightParaElemType)


# Complex type emphasisElemType with content type MIXED
class emphasisElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type emphasisElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'emphasisElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 824, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_emphasisElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_emphasisElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_emphasisElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_emphasisElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_emphasisElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_emphasisElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_emphasisElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_emphasisElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_emphasisElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_emphasisElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_emphasisElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_emphasisElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_emphasisElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_emphasisElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_emphasisElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_emphasisElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_emphasisElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_emphasisElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_emphasisElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute emphasisType uses Python identifier emphasisType
    __emphasisType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'emphasisType'), 'emphasisType', '__AbsentNamespace0_emphasisElemType_emphasisType', emphasisTypeAttType, unicode_default=u'em01')
    __emphasisType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3411, 4)
    __emphasisType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 828, 8)
    
    emphasisType = property(__emphasisType.value, __emphasisType.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __emphasisType.name() : __emphasisType
    })
Namespace.addCategoryObject('typeBinding', u'emphasisElemType', emphasisElemType)


# Complex type functionalItemRefElemType with content type ELEMENT_ONLY
class functionalItemRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type functionalItemRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'functionalItemRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 854, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_functionalItemRefElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_functionalItemRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_functionalItemRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_functionalItemRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_functionalItemRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_functionalItemRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 862, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_functionalItemRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_functionalItemRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_functionalItemRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_functionalItemRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_functionalItemRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute functionalItemNumber uses Python identifier functionalItemNumber
    __functionalItemNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'functionalItemNumber'), 'functionalItemNumber', '__AbsentNamespace0_functionalItemRefElemType_functionalItemNumber', pyxb.binding.datatypes.string, required=True)
    __functionalItemNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1300, 4)
    __functionalItemNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 859, 8)
    
    functionalItemNumber = property(__functionalItemNumber.value, __functionalItemNumber.set, None, None)

    
    # Attribute functionalItemType uses Python identifier functionalItemType
    __functionalItemType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'functionalItemType'), 'functionalItemType', '__AbsentNamespace0_functionalItemRefElemType_functionalItemType', functionalItemTypeAttType)
    __functionalItemType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1301, 4)
    __functionalItemType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 860, 8)
    
    functionalItemType = property(__functionalItemType.value, __functionalItemType.set, None, None)

    
    # Attribute manufacturerCodeValue uses Python identifier manufacturerCodeValue
    __manufacturerCodeValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'manufacturerCodeValue'), 'manufacturerCodeValue', '__AbsentNamespace0_functionalItemRefElemType_manufacturerCodeValue', pyxb.binding.datatypes.string)
    __manufacturerCodeValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1308, 4)
    __manufacturerCodeValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 861, 8)
    
    manufacturerCodeValue = property(__manufacturerCodeValue.value, __manufacturerCodeValue.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __functionalItemNumber.name() : __functionalItemNumber,
        __functionalItemType.name() : __functionalItemType,
        __manufacturerCodeValue.name() : __manufacturerCodeValue
    })
Namespace.addCategoryObject('typeBinding', u'functionalItemRefElemType', functionalItemRefElemType)


# Complex type nameElemType with content type MIXED
class nameElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type nameElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'nameElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 868, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_nameElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_nameElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_nameElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'nameElemType', nameElemType)


# Complex type pmRefElemType with content type ELEMENT_ONLY
class pmRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type pmRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pmRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 880, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element behavior uses Python identifier behavior
    __behavior = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'behavior'), 'behavior', '__AbsentNamespace0_pmRefElemType_behavior', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 728, 4), )

    
    behavior = property(__behavior.value, __behavior.set, None, None)

    
    # Element pmRefIdent uses Python identifier pmRefIdent
    __pmRefIdent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRefIdent'), 'pmRefIdent', '__AbsentNamespace0_pmRefElemType_pmRefIdent', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 895, 4), )

    
    pmRefIdent = property(__pmRefIdent.value, __pmRefIdent.set, None, None)

    
    # Element pmRefAddressItems uses Python identifier pmRefAddressItems
    __pmRefAddressItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRefAddressItems'), 'pmRefAddressItems', '__AbsentNamespace0_pmRefElemType_pmRefAddressItems', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 929, 4), )

    
    pmRefAddressItems = property(__pmRefAddressItems.value, __pmRefAddressItems.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_pmRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_pmRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_pmRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_pmRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 889, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_pmRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_pmRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_pmRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_pmRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_pmRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_pmRefElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 888, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_pmRefElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 113, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_pmRefElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_pmRefElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'replace')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 112, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_pmRefElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_pmRefElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 82, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __behavior.name() : __behavior,
        __pmRefIdent.name() : __pmRefIdent,
        __pmRefAddressItems.name() : __pmRefAddressItems
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'pmRefElemType', pmRefElemType)


# Complex type pmCodeElemType with content type EMPTY
class pmCodeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type pmCodeElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pmCodeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 905, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute modelIdentCode uses Python identifier modelIdentCode
    __modelIdentCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'modelIdentCode'), 'modelIdentCode', '__AbsentNamespace0_pmCodeElemType_modelIdentCode', modelIdentCodeAttType, required=True)
    __modelIdentCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 83, 4)
    __modelIdentCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 906, 8)
    
    modelIdentCode = property(__modelIdentCode.value, __modelIdentCode.set, None, None)

    
    # Attribute pmIssuer uses Python identifier pmIssuer
    __pmIssuer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'pmIssuer'), 'pmIssuer', '__AbsentNamespace0_pmCodeElemType_pmIssuer', pmIssuerAttType, required=True)
    __pmIssuer._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 911, 4)
    __pmIssuer._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 907, 8)
    
    pmIssuer = property(__pmIssuer.value, __pmIssuer.set, None, None)

    
    # Attribute pmNumber uses Python identifier pmNumber
    __pmNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'pmNumber'), 'pmNumber', '__AbsentNamespace0_pmCodeElemType_pmNumber', pmNumberAttType, required=True)
    __pmNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 917, 4)
    __pmNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 908, 8)
    
    pmNumber = property(__pmNumber.value, __pmNumber.set, None, None)

    
    # Attribute pmVolume uses Python identifier pmVolume
    __pmVolume = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'pmVolume'), 'pmVolume', '__AbsentNamespace0_pmCodeElemType_pmVolume', pmVolumeAttType, required=True)
    __pmVolume._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 923, 4)
    __pmVolume._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 909, 8)
    
    pmVolume = property(__pmVolume.value, __pmVolume.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __modelIdentCode.name() : __modelIdentCode,
        __pmIssuer.name() : __pmIssuer,
        __pmNumber.name() : __pmNumber,
        __pmVolume.name() : __pmVolume
    })
Namespace.addCategoryObject('typeBinding', u'pmCodeElemType', pmCodeElemType)


# Complex type pmRefAddressItemsElemType with content type ELEMENT_ONLY
class pmRefAddressItemsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type pmRefAddressItemsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pmRefAddressItemsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 930, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element issueDate uses Python identifier issueDate
    __issueDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), 'issueDate', '__AbsentNamespace0_pmRefAddressItemsElemType_issueDate', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4), )

    
    issueDate = property(__issueDate.value, __issueDate.set, None, None)

    
    # Element security uses Python identifier security
    __security = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'security'), 'security', '__AbsentNamespace0_pmRefAddressItemsElemType_security', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 277, 4), )

    
    security = property(__security.value, __security.set, None, None)

    
    # Element pmTitle uses Python identifier pmTitle
    __pmTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmTitle'), 'pmTitle', '__AbsentNamespace0_pmRefAddressItemsElemType_pmTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 941, 4), )

    
    pmTitle = property(__pmTitle.value, __pmTitle.set, None, None)

    
    # Element responsiblePartnerCompany uses Python identifier responsiblePartnerCompany
    __responsiblePartnerCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany'), 'responsiblePartnerCompany', '__AbsentNamespace0_pmRefAddressItemsElemType_responsiblePartnerCompany', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 942, 4), )

    
    responsiblePartnerCompany = property(__responsiblePartnerCompany.value, __responsiblePartnerCompany.set, None, None)

    
    # Element pubMedia uses Python identifier pubMedia
    __pubMedia = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pubMedia'), 'pubMedia', '__AbsentNamespace0_pmRefAddressItemsElemType_pubMedia', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 952, 4), )

    
    pubMedia = property(__pubMedia.value, __pubMedia.set, None, None)

    
    # Element shortPmTitle uses Python identifier shortPmTitle
    __shortPmTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shortPmTitle'), 'shortPmTitle', '__AbsentNamespace0_pmRefAddressItemsElemType_shortPmTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 963, 4), )

    
    shortPmTitle = property(__shortPmTitle.value, __shortPmTitle.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_pmRefAddressItemsElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 113, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_pmRefAddressItemsElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_pmRefAddressItemsElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'replace')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 112, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_pmRefAddressItemsElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_pmRefAddressItemsElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 82, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __issueDate.name() : __issueDate,
        __security.name() : __security,
        __pmTitle.name() : __pmTitle,
        __responsiblePartnerCompany.name() : __responsiblePartnerCompany,
        __pubMedia.name() : __pubMedia,
        __shortPmTitle.name() : __shortPmTitle
    })
    _AttributeMap.update({
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'pmRefAddressItemsElemType', pmRefAddressItemsElemType)


# Complex type externalPubRefElemType with content type ELEMENT_ONLY
class externalPubRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type externalPubRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalPubRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 965, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element behavior uses Python identifier behavior
    __behavior = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'behavior'), 'behavior', '__AbsentNamespace0_externalPubRefElemType_behavior', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 728, 4), )

    
    behavior = property(__behavior.value, __behavior.set, None, None)

    
    # Element externalPubRefIdent uses Python identifier externalPubRefIdent
    __externalPubRefIdent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefIdent'), 'externalPubRefIdent', '__AbsentNamespace0_externalPubRefElemType_externalPubRefIdent', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 978, 4), )

    
    externalPubRefIdent = property(__externalPubRefIdent.value, __externalPubRefIdent.set, None, None)

    
    # Element externalPubRefAddressItems uses Python identifier externalPubRefAddressItems
    __externalPubRefAddressItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefAddressItems'), 'externalPubRefAddressItems', '__AbsentNamespace0_externalPubRefElemType_externalPubRefAddressItems', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1279, 4), )

    
    externalPubRefAddressItems = property(__externalPubRefAddressItems.value, __externalPubRefAddressItems.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_externalPubRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_externalPubRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_externalPubRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_externalPubRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 972, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_externalPubRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_externalPubRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_externalPubRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_externalPubRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_externalPubRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_externalPubRefElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 971, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_externalPubRefElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 125, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_externalPubRefElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_externalPubRefElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'new')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 124, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_externalPubRefElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_externalPubRefElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 107, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __behavior.name() : __behavior,
        __externalPubRefIdent.name() : __externalPubRefIdent,
        __externalPubRefAddressItems.name() : __externalPubRefAddressItems
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'externalPubRefElemType', externalPubRefElemType)


# Complex type acronymElemType with content type ELEMENT_ONLY
class acronymElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type acronymElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'acronymElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1010, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_acronymElemType_acronymTerm', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element acronymDefinition uses Python identifier acronymDefinition
    __acronymDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymDefinition'), 'acronymDefinition', '__AbsentNamespace0_acronymElemType_acronymDefinition', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1027, 4), )

    
    acronymDefinition = property(__acronymDefinition.value, __acronymDefinition.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_acronymElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_acronymElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_acronymElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_acronymElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1016, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_acronymElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_acronymElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_acronymElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_acronymElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_acronymElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute acronymType uses Python identifier acronymType
    __acronymType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'acronymType'), 'acronymType', '__AbsentNamespace0_acronymElemType_acronymType', acronymTypeAttType, unicode_default=u'at01')
    __acronymType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1035, 4)
    __acronymType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1015, 8)
    
    acronymType = property(__acronymType.value, __acronymType.set, None, None)

    _ElementMap.update({
        __acronymTerm.name() : __acronymTerm,
        __acronymDefinition.name() : __acronymDefinition
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __acronymType.name() : __acronymType
    })
Namespace.addCategoryObject('typeBinding', u'acronymElemType', acronymElemType)


# Complex type acronymDefinitionElemType with content type MIXED
class acronymDefinitionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type acronymDefinitionElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'acronymDefinitionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1028, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_acronymDefinitionElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_acronymDefinitionElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_acronymDefinitionElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_acronymDefinitionElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_acronymDefinitionElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_acronymDefinitionElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1030, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_acronymDefinitionElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_acronymDefinitionElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_acronymDefinitionElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_acronymDefinitionElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_acronymDefinitionElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument
    })
Namespace.addCategoryObject('typeBinding', u'acronymDefinitionElemType', acronymDefinitionElemType)


# Complex type verbatimTextElemType with content type MIXED
class verbatimTextElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type verbatimTextElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'verbatimTextElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1140, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_verbatimTextElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_verbatimTextElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_verbatimTextElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_verbatimTextElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1142, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_verbatimTextElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_verbatimTextElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_verbatimTextElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute verbatimStyle uses Python identifier verbatimStyle
    __verbatimStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'verbatimStyle'), 'verbatimStyle', '__AbsentNamespace0_verbatimTextElemType_verbatimStyle', verbatimStyleAttType)
    __verbatimStyle._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1146, 4)
    __verbatimStyle._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1141, 8)
    
    verbatimStyle = property(__verbatimStyle.value, __verbatimStyle.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __verbatimStyle.name() : __verbatimStyle
    })
Namespace.addCategoryObject('typeBinding', u'verbatimTextElemType', verbatimTextElemType)


# Complex type circuitBreakerRefElemType with content type ELEMENT_ONLY
class circuitBreakerRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type circuitBreakerRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1310, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_circuitBreakerRefElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_circuitBreakerRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_circuitBreakerRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_circuitBreakerRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_circuitBreakerRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_circuitBreakerRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1319, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_circuitBreakerRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_circuitBreakerRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_circuitBreakerRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_circuitBreakerRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_circuitBreakerRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute circuitBreakerNumber uses Python identifier circuitBreakerNumber
    __circuitBreakerNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerNumber'), 'circuitBreakerNumber', '__AbsentNamespace0_circuitBreakerRefElemType_circuitBreakerNumber', pyxb.binding.datatypes.string, required=True)
    __circuitBreakerNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1324, 4)
    __circuitBreakerNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1315, 8)
    
    circuitBreakerNumber = property(__circuitBreakerNumber.value, __circuitBreakerNumber.set, None, None)

    
    # Attribute circuitBreakerType uses Python identifier circuitBreakerType
    __circuitBreakerType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerType'), 'circuitBreakerType', '__AbsentNamespace0_circuitBreakerRefElemType_circuitBreakerType', circuitBreakerTypeAttType)
    __circuitBreakerType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1325, 4)
    __circuitBreakerType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1316, 8)
    
    circuitBreakerType = property(__circuitBreakerType.value, __circuitBreakerType.set, None, None)

    
    # Attribute circuitBreakerAction uses Python identifier circuitBreakerAction
    __circuitBreakerAction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerAction'), 'circuitBreakerAction', '__AbsentNamespace0_circuitBreakerRefElemType_circuitBreakerAction', circuitBreakerActionAttType)
    __circuitBreakerAction._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1333, 4)
    __circuitBreakerAction._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1317, 8)
    
    circuitBreakerAction = property(__circuitBreakerAction.value, __circuitBreakerAction.set, None, None)

    
    # Attribute checkSum uses Python identifier checkSum
    __checkSum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'checkSum'), 'checkSum', '__AbsentNamespace0_circuitBreakerRefElemType_checkSum', pyxb.binding.datatypes.string)
    __checkSum._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1342, 4)
    __checkSum._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1318, 8)
    
    checkSum = property(__checkSum.value, __checkSum.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __circuitBreakerNumber.name() : __circuitBreakerNumber,
        __circuitBreakerType.name() : __circuitBreakerType,
        __circuitBreakerAction.name() : __circuitBreakerAction,
        __checkSum.name() : __checkSum
    })
Namespace.addCategoryObject('typeBinding', u'circuitBreakerRefElemType', circuitBreakerRefElemType)


# Complex type controlIndicatorRefElemType with content type ELEMENT_ONLY
class controlIndicatorRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type controlIndicatorRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1344, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_controlIndicatorRefElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_controlIndicatorRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_controlIndicatorRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_controlIndicatorRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_controlIndicatorRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_controlIndicatorRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1350, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_controlIndicatorRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_controlIndicatorRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_controlIndicatorRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute controlIndicatorNumber uses Python identifier controlIndicatorNumber
    __controlIndicatorNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorNumber'), 'controlIndicatorNumber', '__AbsentNamespace0_controlIndicatorRefElemType_controlIndicatorNumber', pyxb.binding.datatypes.string)
    __controlIndicatorNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1354, 4)
    __controlIndicatorNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1349, 8)
    
    controlIndicatorNumber = property(__controlIndicatorNumber.value, __controlIndicatorNumber.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __controlIndicatorNumber.name() : __controlIndicatorNumber
    })
Namespace.addCategoryObject('typeBinding', u'controlIndicatorRefElemType', controlIndicatorRefElemType)


# Complex type inlineSignificantDataElemType with content type MIXED
class inlineSignificantDataElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type inlineSignificantDataElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantDataElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1356, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute significantParaDataType uses Python identifier significantParaDataType
    __significantParaDataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'significantParaDataType'), 'significantParaDataType', '__AbsentNamespace0_inlineSignificantDataElemType_significantParaDataType', significantParaDataTypeAttType, required=True)
    __significantParaDataType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1359, 4)
    __significantParaDataType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1357, 8)
    
    significantParaDataType = property(__significantParaDataType.value, __significantParaDataType.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __significantParaDataType.name() : __significantParaDataType
    })
Namespace.addCategoryObject('typeBinding', u'inlineSignificantDataElemType', inlineSignificantDataElemType)


# Complex type quantityElemType with content type MIXED
class quantityElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type quantityElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1464, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element quantityGroup uses Python identifier quantityGroup
    __quantityGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantityGroup'), 'quantityGroup', '__AbsentNamespace0_quantityElemType_quantityGroup', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1470, 4), )

    
    quantityGroup = property(__quantityGroup.value, __quantityGroup.set, None, None)

    
    # Attribute quantityType uses Python identifier quantityType
    __quantityType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'quantityType'), 'quantityType', '__AbsentNamespace0_quantityElemType_quantityType', quantityTypeAttType)
    __quantityType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2895, 4)
    __quantityType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1468, 8)
    
    quantityType = property(__quantityType.value, __quantityType.set, None, None)

    _ElementMap.update({
        __quantityGroup.name() : __quantityGroup
    })
    _AttributeMap.update({
        __quantityType.name() : __quantityType
    })
Namespace.addCategoryObject('typeBinding', u'quantityElemType', quantityElemType)


# Complex type quantityGroupElemType with content type ELEMENT_ONLY
class quantityGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type quantityGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1471, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element quantityValue uses Python identifier quantityValue
    __quantityValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantityValue'), 'quantityValue', '__AbsentNamespace0_quantityGroupElemType_quantityValue', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1484, 4), )

    
    quantityValue = property(__quantityValue.value, __quantityValue.set, None, None)

    
    # Element quantityTolerance uses Python identifier quantityTolerance
    __quantityTolerance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantityTolerance'), 'quantityTolerance', '__AbsentNamespace0_quantityGroupElemType_quantityTolerance', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2870, 4), )

    
    quantityTolerance = property(__quantityTolerance.value, __quantityTolerance.set, None, None)

    
    # Attribute quantityUnitOfMeasure uses Python identifier quantityUnitOfMeasure
    __quantityUnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'quantityUnitOfMeasure'), 'quantityUnitOfMeasure', '__AbsentNamespace0_quantityGroupElemType_quantityUnitOfMeasure', quantityUnitOfMeasureAttType)
    __quantityUnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1492, 4)
    __quantityUnitOfMeasure._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1482, 8)
    
    quantityUnitOfMeasure = property(__quantityUnitOfMeasure.value, __quantityUnitOfMeasure.set, None, None)

    
    # Attribute quantityGroupType uses Python identifier quantityGroupType
    __quantityGroupType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'quantityGroupType'), 'quantityGroupType', '__AbsentNamespace0_quantityGroupElemType_quantityGroupType', quantityGroupTypeAttType, unicode_default=u'nominal')
    __quantityGroupType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2887, 4)
    __quantityGroupType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1481, 8)
    
    quantityGroupType = property(__quantityGroupType.value, __quantityGroupType.set, None, None)

    _ElementMap.update({
        __quantityValue.name() : __quantityValue,
        __quantityTolerance.name() : __quantityTolerance
    })
    _AttributeMap.update({
        __quantityUnitOfMeasure.name() : __quantityUnitOfMeasure,
        __quantityGroupType.name() : __quantityGroupType
    })
Namespace.addCategoryObject('typeBinding', u'quantityGroupElemType', quantityGroupElemType)


# Complex type quantityValueElemType with content type SIMPLE
class quantityValueElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type quantityValueElemType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityValueElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1485, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute quantityUnitOfMeasure uses Python identifier quantityUnitOfMeasure
    __quantityUnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'quantityUnitOfMeasure'), 'quantityUnitOfMeasure', '__AbsentNamespace0_quantityValueElemType_quantityUnitOfMeasure', quantityUnitOfMeasureAttType)
    __quantityUnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1492, 4)
    __quantityUnitOfMeasure._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1488, 16)
    
    quantityUnitOfMeasure = property(__quantityUnitOfMeasure.value, __quantityUnitOfMeasure.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __quantityUnitOfMeasure.name() : __quantityUnitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', u'quantityValueElemType', quantityValueElemType)


# Complex type quantityToleranceElemType with content type SIMPLE
class quantityToleranceElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type quantityToleranceElemType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityToleranceElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2871, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute quantityUnitOfMeasure uses Python identifier quantityUnitOfMeasure
    __quantityUnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'quantityUnitOfMeasure'), 'quantityUnitOfMeasure', '__AbsentNamespace0_quantityToleranceElemType_quantityUnitOfMeasure', quantityUnitOfMeasureAttType)
    __quantityUnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1492, 4)
    __quantityUnitOfMeasure._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2875, 16)
    
    quantityUnitOfMeasure = property(__quantityUnitOfMeasure.value, __quantityUnitOfMeasure.set, None, None)

    
    # Attribute quantityToleranceType uses Python identifier quantityToleranceType
    __quantityToleranceType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'quantityToleranceType'), 'quantityToleranceType', '__AbsentNamespace0_quantityToleranceElemType_quantityToleranceType', quantityToleranceTypeAttType, unicode_default=u'plusorminus')
    __quantityToleranceType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2879, 4)
    __quantityToleranceType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2874, 16)
    
    quantityToleranceType = property(__quantityToleranceType.value, __quantityToleranceType.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __quantityUnitOfMeasure.name() : __quantityUnitOfMeasure,
        __quantityToleranceType.name() : __quantityToleranceType
    })
Namespace.addCategoryObject('typeBinding', u'quantityToleranceElemType', quantityToleranceElemType)


# Complex type internalRefElemType with content type MIXED
class internalRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type internalRefElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'internalRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3000, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_internalRefElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_internalRefElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_internalRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_internalRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute referredFragment uses Python identifier referredFragment
    __referredFragment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'referredFragment'), 'referredFragment', '__AbsentNamespace0_internalRefElemType_referredFragment', pyxb.binding.datatypes.string)
    __referredFragment._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 749, 4)
    __referredFragment._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3006, 8)
    
    referredFragment = property(__referredFragment.value, __referredFragment.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_internalRefElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3008, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute internalRefId uses Python identifier internalRefId
    __internalRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'internalRefId'), 'internalRefId', '__AbsentNamespace0_internalRefElemType_internalRefId', pyxb.binding.datatypes.IDREF)
    __internalRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1026, 4)
    __internalRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3004, 8)
    
    internalRefId = property(__internalRefId.value, __internalRefId.set, None, None)

    
    # Attribute internalRefTargetType uses Python identifier internalRefTargetType
    __internalRefTargetType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'internalRefTargetType'), 'internalRefTargetType', '__AbsentNamespace0_internalRefElemType_internalRefTargetType', internalRefTargetTypeAttType)
    __internalRefTargetType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3012, 4)
    __internalRefTargetType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3005, 8)
    
    internalRefTargetType = property(__internalRefTargetType.value, __internalRefTargetType.set, None, None)

    
    # Attribute targetTitle uses Python identifier targetTitle
    __targetTitle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'targetTitle'), 'targetTitle', '__AbsentNamespace0_internalRefElemType_targetTitle', pyxb.binding.datatypes.string)
    __targetTitle._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3030, 4)
    __targetTitle._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3007, 8)
    
    targetTitle = property(__targetTitle.value, __targetTitle.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_internalRefElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 113, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_internalRefElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_internalRefElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'replace')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 112, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_internalRefElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_internalRefElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, fixed=True, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 102, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript
    })
    _AttributeMap.update({
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __referredFragment.name() : __referredFragment,
        __applicRefId.name() : __applicRefId,
        __internalRefId.name() : __internalRefId,
        __internalRefTargetType.name() : __internalRefTargetType,
        __targetTitle.name() : __targetTitle,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'internalRefElemType', internalRefElemType)


# Complex type changeInlineElemType with content type MIXED
class changeInlineElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type changeInlineElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'changeInlineElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3032, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_changeInlineElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_changeInlineElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_changeInlineElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_changeInlineElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_changeInlineElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_changeInlineElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_changeInlineElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_changeInlineElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_changeInlineElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_changeInlineElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_changeInlineElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_changeInlineElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_changeInlineElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_changeInlineElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_changeInlineElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_changeInlineElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_changeInlineElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_changeInlineElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_changeInlineElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_changeInlineElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_changeInlineElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_changeInlineElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_changeInlineElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3036, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_changeInlineElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_changeInlineElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_changeInlineElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'changeInlineElemType', changeInlineElemType)


# Complex type symbolElemType with content type EMPTY
class symbolElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type symbolElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'symbolElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3041, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_symbolElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3043, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_symbolElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_symbolElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_symbolElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3047, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute infoEntityIdent uses Python identifier infoEntityIdent
    __infoEntityIdent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'infoEntityIdent'), 'infoEntityIdent', '__AbsentNamespace0_symbolElemType_infoEntityIdent', pyxb.binding.datatypes.ENTITY, required=True)
    __infoEntityIdent._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3051, 4)
    __infoEntityIdent._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3042, 8)
    
    infoEntityIdent = property(__infoEntityIdent.value, __infoEntityIdent.set, None, None)

    
    # Attribute reproductionWidth uses Python identifier reproductionWidth
    __reproductionWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reproductionWidth'), 'reproductionWidth', '__AbsentNamespace0_symbolElemType_reproductionWidth', pyxb.binding.datatypes.string)
    __reproductionWidth._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3052, 4)
    __reproductionWidth._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3044, 8)
    
    reproductionWidth = property(__reproductionWidth.value, __reproductionWidth.set, None, None)

    
    # Attribute reproductionHeight uses Python identifier reproductionHeight
    __reproductionHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reproductionHeight'), 'reproductionHeight', '__AbsentNamespace0_symbolElemType_reproductionHeight', pyxb.binding.datatypes.string)
    __reproductionHeight._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3053, 4)
    __reproductionHeight._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3045, 8)
    
    reproductionHeight = property(__reproductionHeight.value, __reproductionHeight.set, None, None)

    
    # Attribute reproductionScale uses Python identifier reproductionScale
    __reproductionScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reproductionScale'), 'reproductionScale', '__AbsentNamespace0_symbolElemType_reproductionScale', pyxb.binding.datatypes.string)
    __reproductionScale._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3054, 4)
    __reproductionScale._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3046, 8)
    
    reproductionScale = property(__reproductionScale.value, __reproductionScale.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_symbolElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON, fixed=True, unicode_default=u'onLoad')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 121, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_symbolElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_symbolElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, fixed=True, unicode_default=u'embed')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 120, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_symbolElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_symbolElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, fixed=True, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 92, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __infoEntityIdent.name() : __infoEntityIdent,
        __reproductionWidth.name() : __reproductionWidth,
        __reproductionHeight.name() : __reproductionHeight,
        __reproductionScale.name() : __reproductionScale,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'symbolElemType', symbolElemType)


# Complex type footnoteElemType with content type ELEMENT_ONLY
class footnoteElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type footnoteElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'footnoteElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3056, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'para'), 'para', '__AbsentNamespace0_footnoteElemType_para', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4), )

    
    para = property(__para.value, __para.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_footnoteElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_footnoteElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_footnoteElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_footnoteElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3062, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_footnoteElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_footnoteElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_footnoteElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_footnoteElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3061, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute footnoteMark uses Python identifier footnoteMark
    __footnoteMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'footnoteMark'), 'footnoteMark', '__AbsentNamespace0_footnoteElemType_footnoteMark', footnoteMarkAttType, unicode_default=u'num')
    __footnoteMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3399, 4)
    __footnoteMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3060, 8)
    
    footnoteMark = property(__footnoteMark.value, __footnoteMark.set, None, None)

    _ElementMap.update({
        __para.name() : __para
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId,
        __footnoteMark.name() : __footnoteMark
    })
Namespace.addCategoryObject('typeBinding', u'footnoteElemType', footnoteElemType)


# Complex type paraElemType with content type MIXED
class paraElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type paraElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'paraElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3067, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_paraElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_paraElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_paraElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_paraElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_paraElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_paraElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_paraElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_paraElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_paraElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_paraElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_paraElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_paraElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_paraElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_paraElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_paraElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_paraElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_paraElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_paraElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element sequentialList uses Python identifier sequentialList
    __sequentialList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'sequentialList'), 'sequentialList', '__AbsentNamespace0_paraElemType_sequentialList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3090, 4), )

    
    sequentialList = property(__sequentialList.value, __sequentialList.set, None, None)

    
    # Element randomList uses Python identifier randomList
    __randomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'randomList'), 'randomList', '__AbsentNamespace0_paraElemType_randomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4), )

    
    randomList = property(__randomList.value, __randomList.set, None, None)

    
    # Element definitionList uses Python identifier definitionList
    __definitionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), 'definitionList', '__AbsentNamespace0_paraElemType_definitionList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4), )

    
    definitionList = property(__definitionList.value, __definitionList.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_paraElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_paraElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_paraElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_paraElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_paraElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3072, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_paraElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_paraElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_paraElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_paraElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_paraElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_paraElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3071, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __sequentialList.name() : __sequentialList,
        __randomList.name() : __randomList,
        __definitionList.name() : __definitionList,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'paraElemType', paraElemType)


# Complex type sequentialListElemType with content type ELEMENT_ONLY
class sequentialListElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type sequentialListElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'sequentialListElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3091, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_sequentialListElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element listItem uses Python identifier listItem
    __listItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'listItem'), 'listItem', '__AbsentNamespace0_sequentialListElemType_listItem', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3107, 4), )

    
    listItem = property(__listItem.value, __listItem.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_sequentialListElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_sequentialListElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_sequentialListElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_sequentialListElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3097, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_sequentialListElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_sequentialListElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_sequentialListElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_sequentialListElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_sequentialListElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_sequentialListElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3096, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __listItem.name() : __listItem
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'sequentialListElemType', sequentialListElemType)


# Complex type titleElemType with content type MIXED
class titleElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type titleElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'titleElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3103, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_titleElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_titleElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_titleElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_titleElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_titleElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_titleElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_titleElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_titleElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_titleElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_titleElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_titleElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_titleElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_titleElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_titleElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_titleElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_titleElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_titleElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_titleElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_titleElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_titleElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_titleElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_titleElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat
    })
Namespace.addCategoryObject('typeBinding', u'titleElemType', titleElemType)


# Complex type listItemElemType with content type ELEMENT_ONLY
class listItemElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type listItemElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listItemElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3108, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'para'), 'para', '__AbsentNamespace0_listItemElemType_para', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4), )

    
    para = property(__para.value, __para.set, None, None)

    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'note'), 'note', '__AbsentNamespace0_listItemElemType_note', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_listItemElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_listItemElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_listItemElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_listItemElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3114, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_listItemElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_listItemElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_listItemElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_listItemElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3113, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __para.name() : __para,
        __note.name() : __note
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'listItemElemType', listItemElemType)


# Complex type noteElemType with content type ELEMENT_ONLY
class noteElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type noteElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'noteElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3119, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_noteElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element notePara uses Python identifier notePara
    __notePara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'notePara'), 'notePara', '__AbsentNamespace0_noteElemType_notePara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3136, 4), )

    
    notePara = property(__notePara.value, __notePara.set, None, None)

    
    # Element attentionSequentialList uses Python identifier attentionSequentialList
    __attentionSequentialList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialList'), 'attentionSequentialList', '__AbsentNamespace0_noteElemType_attentionSequentialList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3170, 4), )

    
    attentionSequentialList = property(__attentionSequentialList.value, __attentionSequentialList.set, None, None)

    
    # Element attentionRandomList uses Python identifier attentionRandomList
    __attentionRandomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), 'attentionRandomList', '__AbsentNamespace0_noteElemType_attentionRandomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4), )

    
    attentionRandomList = property(__attentionRandomList.value, __attentionRandomList.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_noteElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_noteElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_noteElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_noteElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3131, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_noteElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_noteElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_noteElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_noteElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_noteElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_noteElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3129, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute internalRefId uses Python identifier internalRefId
    __internalRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'internalRefId'), 'internalRefId', '__AbsentNamespace0_noteElemType_internalRefId', pyxb.binding.datatypes.IDREF)
    __internalRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1026, 4)
    __internalRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3130, 8)
    
    internalRefId = property(__internalRefId.value, __internalRefId.set, None, None)

    
    # Attribute noteType uses Python identifier noteType
    __noteType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'noteType'), 'noteType', '__AbsentNamespace0_noteElemType_noteType', pyxb.binding.datatypes.string)
    __noteType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3330, 4)
    __noteType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3128, 8)
    
    noteType = property(__noteType.value, __noteType.set, None, None)

    _ElementMap.update({
        __symbol.name() : __symbol,
        __notePara.name() : __notePara,
        __attentionSequentialList.name() : __attentionSequentialList,
        __attentionRandomList.name() : __attentionRandomList
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __internalRefId.name() : __internalRefId,
        __noteType.name() : __noteType
    })
Namespace.addCategoryObject('typeBinding', u'noteElemType', noteElemType)


# Complex type noteParaElemType with content type MIXED
class noteParaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type noteParaElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'noteParaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3137, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_noteParaElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_noteParaElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_noteParaElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_noteParaElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_noteParaElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_noteParaElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_noteParaElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_noteParaElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_noteParaElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_noteParaElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_noteParaElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_noteParaElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_noteParaElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_noteParaElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_noteParaElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_noteParaElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_noteParaElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element attentionSequentialList uses Python identifier attentionSequentialList
    __attentionSequentialList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialList'), 'attentionSequentialList', '__AbsentNamespace0_noteParaElemType_attentionSequentialList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3170, 4), )

    
    attentionSequentialList = property(__attentionSequentialList.value, __attentionSequentialList.set, None, None)

    
    # Element attentionRandomList uses Python identifier attentionRandomList
    __attentionRandomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), 'attentionRandomList', '__AbsentNamespace0_noteParaElemType_attentionRandomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4), )

    
    attentionRandomList = property(__attentionRandomList.value, __attentionRandomList.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_noteParaElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_noteParaElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_noteParaElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_noteParaElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3144, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_noteParaElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_noteParaElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_noteParaElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_noteParaElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_noteParaElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_noteParaElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3143, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __attentionSequentialList.name() : __attentionSequentialList,
        __attentionRandomList.name() : __attentionRandomList
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'noteParaElemType', noteParaElemType)


# Complex type attentionSequentialListElemType with content type ELEMENT_ONLY
class attentionSequentialListElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type attentionSequentialListElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialListElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3171, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_attentionSequentialListElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element attentionSequentialListItem uses Python identifier attentionSequentialListItem
    __attentionSequentialListItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialListItem'), 'attentionSequentialListItem', '__AbsentNamespace0_attentionSequentialListElemType_attentionSequentialListItem', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3182, 4), )

    
    attentionSequentialListItem = property(__attentionSequentialListItem.value, __attentionSequentialListItem.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_attentionSequentialListElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_attentionSequentialListElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_attentionSequentialListElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_attentionSequentialListElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3177, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_attentionSequentialListElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_attentionSequentialListElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_attentionSequentialListElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_attentionSequentialListElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_attentionSequentialListElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_attentionSequentialListElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3176, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __attentionSequentialListItem.name() : __attentionSequentialListItem
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'attentionSequentialListElemType', attentionSequentialListElemType)


# Complex type attentionSequentialListItemElemType with content type ELEMENT_ONLY
class attentionSequentialListItemElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type attentionSequentialListItemElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialListItemElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3183, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attentionListItemPara uses Python identifier attentionListItemPara
    __attentionListItemPara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionListItemPara'), 'attentionListItemPara', '__AbsentNamespace0_attentionSequentialListItemElemType_attentionListItemPara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3193, 4), )

    
    attentionListItemPara = property(__attentionListItemPara.value, __attentionListItemPara.set, None, None)

    
    # Element attentionRandomList uses Python identifier attentionRandomList
    __attentionRandomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), 'attentionRandomList', '__AbsentNamespace0_attentionSequentialListItemElemType_attentionRandomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4), )

    
    attentionRandomList = property(__attentionRandomList.value, __attentionRandomList.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_attentionSequentialListItemElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_attentionSequentialListItemElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_attentionSequentialListItemElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_attentionSequentialListItemElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3189, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_attentionSequentialListItemElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_attentionSequentialListItemElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_attentionSequentialListItemElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_attentionSequentialListItemElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3188, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __attentionListItemPara.name() : __attentionListItemPara,
        __attentionRandomList.name() : __attentionRandomList
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'attentionSequentialListItemElemType', attentionSequentialListItemElemType)


# Complex type attentionListItemParaElemType with content type MIXED
class attentionListItemParaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type attentionListItemParaElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attentionListItemParaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3194, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_attentionListItemParaElemType_subScript', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_attentionListItemParaElemType_superScript', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_attentionListItemParaElemType_dmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_attentionListItemParaElemType_emphasis', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_attentionListItemParaElemType_functionalItemRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_attentionListItemParaElemType_pmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_attentionListItemParaElemType_externalPubRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_attentionListItemParaElemType_acronym', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_attentionListItemParaElemType_acronymTerm', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_attentionListItemParaElemType_verbatimText', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_attentionListItemParaElemType_circuitBreakerRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_attentionListItemParaElemType_controlIndicatorRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_attentionListItemParaElemType_inlineSignificantData', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_attentionListItemParaElemType_quantity', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_attentionListItemParaElemType_internalRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_attentionListItemParaElemType_changeInline', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_attentionListItemParaElemType_symbol', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_attentionListItemParaElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_attentionListItemParaElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_attentionListItemParaElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_attentionListItemParaElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3199, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_attentionListItemParaElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_attentionListItemParaElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_attentionListItemParaElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_attentionListItemParaElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_attentionListItemParaElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_attentionListItemParaElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3198, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'attentionListItemParaElemType', attentionListItemParaElemType)


# Complex type attentionRandomListElemType with content type ELEMENT_ONLY
class attentionRandomListElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type attentionRandomListElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attentionRandomListElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3205, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attentionRandomListItem uses Python identifier attentionRandomListItem
    __attentionRandomListItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomListItem'), 'attentionRandomListItem', '__AbsentNamespace0_attentionRandomListElemType_attentionRandomListItem', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3216, 4), )

    
    attentionRandomListItem = property(__attentionRandomListItem.value, __attentionRandomListItem.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_attentionRandomListElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_attentionRandomListElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_attentionRandomListElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_attentionRandomListElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3211, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_attentionRandomListElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_attentionRandomListElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_attentionRandomListElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_attentionRandomListElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_attentionRandomListElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_attentionRandomListElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3210, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute listItemPrefix uses Python identifier listItemPrefix
    __listItemPrefix = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'listItemPrefix'), 'listItemPrefix', '__AbsentNamespace0_attentionRandomListElemType_listItemPrefix', listItemPrefixAttType, unicode_default=u'pf02')
    __listItemPrefix._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3226, 4)
    __listItemPrefix._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3209, 8)
    
    listItemPrefix = property(__listItemPrefix.value, __listItemPrefix.set, None, None)

    _ElementMap.update({
        __attentionRandomListItem.name() : __attentionRandomListItem
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __listItemPrefix.name() : __listItemPrefix
    })
Namespace.addCategoryObject('typeBinding', u'attentionRandomListElemType', attentionRandomListElemType)


# Complex type attentionRandomListItemElemType with content type ELEMENT_ONLY
class attentionRandomListItemElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type attentionRandomListItemElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attentionRandomListItemElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3217, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attentionListItemPara uses Python identifier attentionListItemPara
    __attentionListItemPara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionListItemPara'), 'attentionListItemPara', '__AbsentNamespace0_attentionRandomListItemElemType_attentionListItemPara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3193, 4), )

    
    attentionListItemPara = property(__attentionListItemPara.value, __attentionListItemPara.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_attentionRandomListItemElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_attentionRandomListItemElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_attentionRandomListItemElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_attentionRandomListItemElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3222, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_attentionRandomListItemElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_attentionRandomListItemElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_attentionRandomListItemElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_attentionRandomListItemElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3221, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __attentionListItemPara.name() : __attentionListItemPara
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'attentionRandomListItemElemType', attentionRandomListItemElemType)


# Complex type randomListElemType with content type ELEMENT_ONLY
class randomListElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type randomListElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'randomListElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3332, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_randomListElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element listItem uses Python identifier listItem
    __listItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'listItem'), 'listItem', '__AbsentNamespace0_randomListElemType_listItem', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3107, 4), )

    
    listItem = property(__listItem.value, __listItem.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_randomListElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_randomListElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_randomListElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_randomListElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3339, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_randomListElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_randomListElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_randomListElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_randomListElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_randomListElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_randomListElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3338, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute listItemPrefix uses Python identifier listItemPrefix
    __listItemPrefix = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'listItemPrefix'), 'listItemPrefix', '__AbsentNamespace0_randomListElemType_listItemPrefix', listItemPrefixAttType, unicode_default=u'pf02')
    __listItemPrefix._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3226, 4)
    __listItemPrefix._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3337, 8)
    
    listItemPrefix = property(__listItemPrefix.value, __listItemPrefix.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __listItem.name() : __listItem
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __listItemPrefix.name() : __listItemPrefix
    })
Namespace.addCategoryObject('typeBinding', u'randomListElemType', randomListElemType)


# Complex type definitionListElemType with content type ELEMENT_ONLY
class definitionListElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type definitionListElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'definitionListElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3345, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_definitionListElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element definitionListHeader uses Python identifier definitionListHeader
    __definitionListHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'definitionListHeader'), 'definitionListHeader', '__AbsentNamespace0_definitionListElemType_definitionListHeader', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3356, 4), )

    
    definitionListHeader = property(__definitionListHeader.value, __definitionListHeader.set, None, None)

    
    # Element definitionListItem uses Python identifier definitionListItem
    __definitionListItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'definitionListItem'), 'definitionListItem', '__AbsentNamespace0_definitionListElemType_definitionListItem', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3365, 4), )

    
    definitionListItem = property(__definitionListItem.value, __definitionListItem.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_definitionListElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_definitionListElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_definitionListElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_definitionListElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3352, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_definitionListElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_definitionListElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_definitionListElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_definitionListElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3351, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __definitionListHeader.name() : __definitionListHeader,
        __definitionListItem.name() : __definitionListItem
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'definitionListElemType', definitionListElemType)


# Complex type definitionListItemElemType with content type ELEMENT_ONLY
class definitionListItemElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type definitionListItemElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'definitionListItemElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3366, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element listItemTerm uses Python identifier listItemTerm
    __listItemTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'listItemTerm'), 'listItemTerm', '__AbsentNamespace0_definitionListItemElemType_listItemTerm', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3377, 4), )

    
    listItemTerm = property(__listItemTerm.value, __listItemTerm.set, None, None)

    
    # Element listItemDefinition uses Python identifier listItemDefinition
    __listItemDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'listItemDefinition'), 'listItemDefinition', '__AbsentNamespace0_definitionListItemElemType_listItemDefinition', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3388, 4), )

    
    listItemDefinition = property(__listItemDefinition.value, __listItemDefinition.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_definitionListItemElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_definitionListItemElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_definitionListItemElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_definitionListItemElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3372, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_definitionListItemElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_definitionListItemElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_definitionListItemElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_definitionListItemElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_definitionListItemElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_definitionListItemElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3371, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __listItemTerm.name() : __listItemTerm,
        __listItemDefinition.name() : __listItemDefinition
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'definitionListItemElemType', definitionListItemElemType)


# Complex type listItemTermElemType with content type MIXED
class listItemTermElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type listItemTermElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listItemTermElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3378, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_listItemTermElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_listItemTermElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_listItemTermElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_listItemTermElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_listItemTermElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_listItemTermElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_listItemTermElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_listItemTermElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_listItemTermElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_listItemTermElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_listItemTermElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_listItemTermElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_listItemTermElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_listItemTermElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_listItemTermElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_listItemTermElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_listItemTermElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_listItemTermElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_listItemTermElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_listItemTermElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_listItemTermElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_listItemTermElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_listItemTermElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3383, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_listItemTermElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_listItemTermElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_listItemTermElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_listItemTermElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_listItemTermElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_listItemTermElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3382, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'listItemTermElemType', listItemTermElemType)


# Complex type listItemDefinitionElemType with content type ELEMENT_ONLY
class listItemDefinitionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type listItemDefinitionElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listItemDefinitionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3389, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_listItemDefinitionElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_listItemDefinitionElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_listItemDefinitionElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_listItemDefinitionElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_listItemDefinitionElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_listItemDefinitionElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_listItemDefinitionElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_listItemDefinitionElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_listItemDefinitionElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_listItemDefinitionElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_listItemDefinitionElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_listItemDefinitionElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_listItemDefinitionElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_listItemDefinitionElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_listItemDefinitionElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_listItemDefinitionElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_listItemDefinitionElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_listItemDefinitionElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'para'), 'para', '__AbsentNamespace0_listItemDefinitionElemType_para', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4), )

    
    para = property(__para.value, __para.set, None, None)

    
    # Element sequentialList uses Python identifier sequentialList
    __sequentialList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'sequentialList'), 'sequentialList', '__AbsentNamespace0_listItemDefinitionElemType_sequentialList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3090, 4), )

    
    sequentialList = property(__sequentialList.value, __sequentialList.set, None, None)

    
    # Element randomList uses Python identifier randomList
    __randomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'randomList'), 'randomList', '__AbsentNamespace0_listItemDefinitionElemType_randomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4), )

    
    randomList = property(__randomList.value, __randomList.set, None, None)

    
    # Element definitionList uses Python identifier definitionList
    __definitionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), 'definitionList', '__AbsentNamespace0_listItemDefinitionElemType_definitionList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4), )

    
    definitionList = property(__definitionList.value, __definitionList.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_listItemDefinitionElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_listItemDefinitionElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_listItemDefinitionElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_listItemDefinitionElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_listItemDefinitionElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3395, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_listItemDefinitionElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_listItemDefinitionElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_listItemDefinitionElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_listItemDefinitionElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3394, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __para.name() : __para,
        __sequentialList.name() : __sequentialList,
        __randomList.name() : __randomList,
        __definitionList.name() : __definitionList,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'listItemDefinitionElemType', listItemDefinitionElemType)


# Complex type policyStatementElemType with content type MIXED
class policyStatementElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type policyStatementElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'policyStatementElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3516, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_policyStatementElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_policyStatementElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_policyStatementElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_policyStatementElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3517, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_policyStatementElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_policyStatementElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_policyStatementElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'policyStatementElemType', policyStatementElemType)


# Complex type dataCondsElemType with content type MIXED
class dataCondsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type dataCondsElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dataCondsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3522, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_dataCondsElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_dataCondsElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_dataCondsElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_dataCondsElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3523, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_dataCondsElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_dataCondsElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_dataCondsElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'dataCondsElemType', dataCondsElemType)


# Complex type applicElemType with content type ELEMENT_ONLY
class applicElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type applicElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'applicElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3548, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element displayText uses Python identifier displayText
    __displayText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'displayText'), 'displayText', '__AbsentNamespace0_applicElemType_displayText', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3567, 4), )

    
    displayText = property(__displayText.value, __displayText.set, None, None)

    
    # Element assert uses Python identifier assert_
    __assert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'assert'), 'assert_', '__AbsentNamespace0_applicElemType_assert', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3573, 4), )

    
    assert_ = property(__assert.value, __assert.set, None, None)

    
    # Element evaluate uses Python identifier evaluate
    __evaluate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'evaluate'), 'evaluate', '__AbsentNamespace0_applicElemType_evaluate', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3595, 4), )

    
    evaluate = property(__evaluate.value, __evaluate.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_applicElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_applicElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_applicElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_applicElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3563, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_applicElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_applicElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_applicElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicConfiguration uses Python identifier applicConfiguration
    __applicConfiguration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicConfiguration'), 'applicConfiguration', '__AbsentNamespace0_applicElemType_applicConfiguration', applicConfigurationAttType)
    __applicConfiguration._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3611, 4)
    __applicConfiguration._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3562, 8)
    
    applicConfiguration = property(__applicConfiguration.value, __applicConfiguration.set, None, None)

    _ElementMap.update({
        __displayText.name() : __displayText,
        __assert.name() : __assert,
        __evaluate.name() : __evaluate
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicConfiguration.name() : __applicConfiguration
    })
Namespace.addCategoryObject('typeBinding', u'applicElemType', applicElemType)


# Complex type assertElemType with content type MIXED
class assertElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type assertElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'assertElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3574, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute applicPropertyIdent uses Python identifier applicPropertyIdent
    __applicPropertyIdent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicPropertyIdent'), 'applicPropertyIdent', '__AbsentNamespace0_assertElemType_applicPropertyIdent', pyxb.binding.datatypes.NCName)
    __applicPropertyIdent._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3580, 4)
    __applicPropertyIdent._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3575, 8)
    
    applicPropertyIdent = property(__applicPropertyIdent.value, __applicPropertyIdent.set, None, None)

    
    # Attribute applicPropertyType uses Python identifier applicPropertyType
    __applicPropertyType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicPropertyType'), 'applicPropertyType', '__AbsentNamespace0_assertElemType_applicPropertyType', applicPropertyTypeAttType)
    __applicPropertyType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3581, 4)
    __applicPropertyType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3576, 8)
    
    applicPropertyType = property(__applicPropertyType.value, __applicPropertyType.set, None, None)

    
    # Attribute applicPropertyValues uses Python identifier applicPropertyValues
    __applicPropertyValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicPropertyValues'), 'applicPropertyValues', '__AbsentNamespace0_assertElemType_applicPropertyValues', applicPropertyValuesAttType)
    __applicPropertyValues._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3588, 4)
    __applicPropertyValues._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3577, 8)
    
    applicPropertyValues = property(__applicPropertyValues.value, __applicPropertyValues.set, None, None)

    
    # Attribute applicDisplayClass uses Python identifier applicDisplayClass
    __applicDisplayClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicDisplayClass'), 'applicDisplayClass', '__AbsentNamespace0_assertElemType_applicDisplayClass', pyxb.binding.datatypes.string)
    __applicDisplayClass._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3594, 4)
    __applicDisplayClass._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3578, 8)
    
    applicDisplayClass = property(__applicDisplayClass.value, __applicDisplayClass.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __applicPropertyIdent.name() : __applicPropertyIdent,
        __applicPropertyType.name() : __applicPropertyType,
        __applicPropertyValues.name() : __applicPropertyValues,
        __applicDisplayClass.name() : __applicDisplayClass
    })
Namespace.addCategoryObject('typeBinding', u'assertElemType', assertElemType)


# Complex type evaluateElemType with content type ELEMENT_ONLY
class evaluateElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type evaluateElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'evaluateElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3596, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element assert uses Python identifier assert_
    __assert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'assert'), 'assert_', '__AbsentNamespace0_evaluateElemType_assert', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3573, 4), )

    
    assert_ = property(__assert.value, __assert.set, None, None)

    
    # Element evaluate uses Python identifier evaluate
    __evaluate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'evaluate'), 'evaluate', '__AbsentNamespace0_evaluateElemType_evaluate', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3595, 4), )

    
    evaluate = property(__evaluate.value, __evaluate.set, None, None)

    
    # Attribute applicDisplayClass uses Python identifier applicDisplayClass
    __applicDisplayClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicDisplayClass'), 'applicDisplayClass', '__AbsentNamespace0_evaluateElemType_applicDisplayClass', pyxb.binding.datatypes.string)
    __applicDisplayClass._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3594, 4)
    __applicDisplayClass._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3602, 8)
    
    applicDisplayClass = property(__applicDisplayClass.value, __applicDisplayClass.set, None, None)

    
    # Attribute andOr uses Python identifier andOr
    __andOr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'andOr'), 'andOr', '__AbsentNamespace0_evaluateElemType_andOr', andOrAttType, required=True)
    __andOr._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3604, 4)
    __andOr._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3601, 8)
    
    andOr = property(__andOr.value, __andOr.set, None, None)

    _ElementMap.update({
        __assert.name() : __assert,
        __evaluate.name() : __evaluate
    })
    _AttributeMap.update({
        __applicDisplayClass.name() : __applicDisplayClass,
        __andOr.name() : __andOr
    })
Namespace.addCategoryObject('typeBinding', u'evaluateElemType', evaluateElemType)


# Complex type modificationElemType with content type ELEMENT_ONLY
class modificationElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type modificationElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'modificationElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3672, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element modificationTitle uses Python identifier modificationTitle
    __modificationTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'modificationTitle'), 'modificationTitle', '__AbsentNamespace0_modificationElemType_modificationTitle', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3682, 4), )

    
    modificationTitle = property(__modificationTitle.value, __modificationTitle.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_modificationElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_modificationElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_modificationElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_modificationElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3677, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_modificationElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_modificationElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_modificationElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorizationIdent uses Python identifier authorizationIdent
    __authorizationIdent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorizationIdent'), 'authorizationIdent', '__AbsentNamespace0_modificationElemType_authorizationIdent', pyxb.binding.datatypes.NMTOKEN, required=True)
    __authorizationIdent._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3683, 4)
    __authorizationIdent._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3676, 8)
    
    authorizationIdent = property(__authorizationIdent.value, __authorizationIdent.set, None, None)

    
    # Attribute modificationType uses Python identifier modificationType
    __modificationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'modificationType'), 'modificationType', '__AbsentNamespace0_modificationElemType_modificationType', modificationTypeAttType, required=True)
    __modificationType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3684, 4)
    __modificationType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3678, 8)
    
    modificationType = property(__modificationType.value, __modificationType.set, None, None)

    _ElementMap.update({
        __modificationTitle.name() : __modificationTitle
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorizationIdent.name() : __authorizationIdent,
        __modificationType.name() : __modificationType
    })
Namespace.addCategoryObject('typeBinding', u'modificationElemType', modificationElemType)


# Complex type firstVerificationElemType with content type EMPTY
class firstVerificationElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type firstVerificationElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'firstVerificationElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3713, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute verificationType uses Python identifier verificationType
    __verificationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'verificationType'), 'verificationType', '__AbsentNamespace0_firstVerificationElemType_verificationType', verificationTypeAttType, required=True)
    __verificationType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3716, 4)
    __verificationType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3714, 8)
    
    verificationType = property(__verificationType.value, __verificationType.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __verificationType.name() : __verificationType
    })
Namespace.addCategoryObject('typeBinding', u'firstVerificationElemType', firstVerificationElemType)


# Complex type secondVerificationElemType with content type EMPTY
class secondVerificationElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type secondVerificationElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'secondVerificationElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3725, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute verificationType uses Python identifier verificationType
    __verificationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'verificationType'), 'verificationType', '__AbsentNamespace0_secondVerificationElemType_verificationType', verificationTypeAttType, required=True)
    __verificationType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3716, 4)
    __verificationType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3726, 8)
    
    verificationType = property(__verificationType.value, __verificationType.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __verificationType.name() : __verificationType
    })
Namespace.addCategoryObject('typeBinding', u'secondVerificationElemType', secondVerificationElemType)


# Complex type skillLevelElemType with content type EMPTY
class skillLevelElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type skillLevelElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'skillLevelElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3734, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute skillLevelCode uses Python identifier skillLevelCode
    __skillLevelCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'skillLevelCode'), 'skillLevelCode', '__AbsentNamespace0_skillLevelElemType_skillLevelCode', skillLevelCodeAttType, required=True)
    __skillLevelCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3737, 4)
    __skillLevelCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3735, 8)
    
    skillLevelCode = property(__skillLevelCode.value, __skillLevelCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __skillLevelCode.name() : __skillLevelCode
    })
Namespace.addCategoryObject('typeBinding', u'skillLevelElemType', skillLevelElemType)


# Complex type reasonForUpdateElemType with content type ELEMENT_ONLY
class reasonForUpdateElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reasonForUpdateElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3842, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element simplePara uses Python identifier simplePara
    __simplePara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), 'simplePara', '__AbsentNamespace0_reasonForUpdateElemType_simplePara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4), )

    
    simplePara = property(__simplePara.value, __simplePara.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_reasonForUpdateElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3847, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reasonForUpdateElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3846, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute updateReasonType uses Python identifier updateReasonType
    __updateReasonType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'updateReasonType'), 'updateReasonType', '__AbsentNamespace0_reasonForUpdateElemType_updateReasonType', updateReasonTypeAttType)
    __updateReasonType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3851, 4)
    __updateReasonType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3848, 8)
    
    updateReasonType = property(__updateReasonType.value, __updateReasonType.set, None, None)

    
    # Attribute updateHighlight uses Python identifier updateHighlight
    __updateHighlight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'updateHighlight'), 'updateHighlight', '__AbsentNamespace0_reasonForUpdateElemType_updateHighlight', yesOrNoAttType)
    __updateHighlight._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3955, 4)
    __updateHighlight._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3849, 8)
    
    updateHighlight = property(__updateHighlight.value, __updateHighlight.set, None, None)

    _ElementMap.update({
        __simplePara.name() : __simplePara
    })
    _AttributeMap.update({
        __id.name() : __id,
        __applicRefId.name() : __applicRefId,
        __updateReasonType.name() : __updateReasonType,
        __updateHighlight.name() : __updateHighlight
    })
Namespace.addCategoryObject('typeBinding', u'reasonForUpdateElemType', reasonForUpdateElemType)


# Complex type warningsAndCautionsElemType with content type ELEMENT_ONLY
class warningsAndCautionsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type warningsAndCautionsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'warningsAndCautionsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3991, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element warning uses Python identifier warning
    __warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warning'), 'warning', '__AbsentNamespace0_warningsAndCautionsElemType_warning', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4), )

    
    warning = property(__warning.value, __warning.set, None, None)

    
    # Element caution uses Python identifier caution
    __caution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'caution'), 'caution', '__AbsentNamespace0_warningsAndCautionsElemType_caution', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4), )

    
    caution = property(__caution.value, __caution.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_warningsAndCautionsElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_warningsAndCautionsElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_warningsAndCautionsElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_warningsAndCautionsElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3999, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_warningsAndCautionsElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_warningsAndCautionsElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_warningsAndCautionsElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __warning.name() : __warning,
        __caution.name() : __caution
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'warningsAndCautionsElemType', warningsAndCautionsElemType)


# Complex type warningElemType with content type ELEMENT_ONLY
class warningElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type warningElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'warningElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4004, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_warningElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element warningAndCautionPara uses Python identifier warningAndCautionPara
    __warningAndCautionPara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionPara'), 'warningAndCautionPara', '__AbsentNamespace0_warningElemType_warningAndCautionPara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4018, 4), )

    
    warningAndCautionPara = property(__warningAndCautionPara.value, __warningAndCautionPara.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_warningElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_warningElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_warningElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_warningElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4013, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_warningElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_warningElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_warningElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_warningElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_warningElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_warningElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4012, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute internalRefId uses Python identifier internalRefId
    __internalRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'internalRefId'), 'internalRefId', '__AbsentNamespace0_warningElemType_internalRefId', pyxb.binding.datatypes.IDREF)
    __internalRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1026, 4)
    __internalRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4010, 8)
    
    internalRefId = property(__internalRefId.value, __internalRefId.set, None, None)

    
    # Attribute warningType uses Python identifier warningType
    __warningType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'warningType'), 'warningType', '__AbsentNamespace0_warningElemType_warningType', pyxb.binding.datatypes.string)
    __warningType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4030, 4)
    __warningType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4009, 8)
    
    warningType = property(__warningType.value, __warningType.set, None, None)

    
    # Attribute vitalWarningFlag uses Python identifier vitalWarningFlag
    __vitalWarningFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'vitalWarningFlag'), 'vitalWarningFlag', '__AbsentNamespace0_warningElemType_vitalWarningFlag', yesOrNoAttType)
    __vitalWarningFlag._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4031, 4)
    __vitalWarningFlag._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4011, 8)
    
    vitalWarningFlag = property(__vitalWarningFlag.value, __vitalWarningFlag.set, None, None)

    _ElementMap.update({
        __symbol.name() : __symbol,
        __warningAndCautionPara.name() : __warningAndCautionPara
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __internalRefId.name() : __internalRefId,
        __warningType.name() : __warningType,
        __vitalWarningFlag.name() : __vitalWarningFlag
    })
Namespace.addCategoryObject('typeBinding', u'warningElemType', warningElemType)


# Complex type warningAndCautionParaElemType with content type MIXED
class warningAndCautionParaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type warningAndCautionParaElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionParaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4019, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_warningAndCautionParaElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_warningAndCautionParaElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_warningAndCautionParaElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_warningAndCautionParaElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_warningAndCautionParaElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_warningAndCautionParaElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_warningAndCautionParaElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_warningAndCautionParaElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_warningAndCautionParaElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_warningAndCautionParaElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_warningAndCautionParaElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_warningAndCautionParaElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_warningAndCautionParaElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_warningAndCautionParaElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_warningAndCautionParaElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_warningAndCautionParaElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_warningAndCautionParaElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element attentionRandomList uses Python identifier attentionRandomList
    __attentionRandomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), 'attentionRandomList', '__AbsentNamespace0_warningAndCautionParaElemType_attentionRandomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4), )

    
    attentionRandomList = property(__attentionRandomList.value, __attentionRandomList.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_warningAndCautionParaElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_warningAndCautionParaElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_warningAndCautionParaElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_warningAndCautionParaElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4025, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_warningAndCautionParaElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_warningAndCautionParaElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_warningAndCautionParaElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_warningAndCautionParaElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_warningAndCautionParaElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_warningAndCautionParaElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4024, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __attentionRandomList.name() : __attentionRandomList
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'warningAndCautionParaElemType', warningAndCautionParaElemType)


# Complex type cautionElemType with content type ELEMENT_ONLY
class cautionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type cautionElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cautionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4033, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_cautionElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element warningAndCautionPara uses Python identifier warningAndCautionPara
    __warningAndCautionPara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionPara'), 'warningAndCautionPara', '__AbsentNamespace0_cautionElemType_warningAndCautionPara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4018, 4), )

    
    warningAndCautionPara = property(__warningAndCautionPara.value, __warningAndCautionPara.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_cautionElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_cautionElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_cautionElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_cautionElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4041, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_cautionElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_cautionElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_cautionElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_cautionElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_cautionElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_cautionElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4040, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute internalRefId uses Python identifier internalRefId
    __internalRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'internalRefId'), 'internalRefId', '__AbsentNamespace0_cautionElemType_internalRefId', pyxb.binding.datatypes.IDREF)
    __internalRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1026, 4)
    __internalRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4039, 8)
    
    internalRefId = property(__internalRefId.value, __internalRefId.set, None, None)

    
    # Attribute cautionType uses Python identifier cautionType
    __cautionType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'cautionType'), 'cautionType', '__AbsentNamespace0_cautionElemType_cautionType', pyxb.binding.datatypes.string)
    __cautionType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4046, 4)
    __cautionType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4038, 8)
    
    cautionType = property(__cautionType.value, __cautionType.set, None, None)

    _ElementMap.update({
        __symbol.name() : __symbol,
        __warningAndCautionPara.name() : __warningAndCautionPara
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __internalRefId.name() : __internalRefId,
        __cautionType.name() : __cautionType
    })
Namespace.addCategoryObject('typeBinding', u'cautionElemType', cautionElemType)


# Complex type figureElemType with content type ELEMENT_ONLY
class figureElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type figureElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'figureElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4074, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_figureElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element graphic uses Python identifier graphic
    __graphic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'graphic'), 'graphic', '__AbsentNamespace0_figureElemType_graphic', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4086, 4), )

    
    graphic = property(__graphic.value, __graphic.set, None, None)

    
    # Element legend uses Python identifier legend
    __legend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'legend'), 'legend', '__AbsentNamespace0_figureElemType_legend', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4162, 4), )

    
    legend = property(__legend.value, __legend.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_figureElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_figureElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_figureElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_figureElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4081, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_figureElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_figureElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_figureElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_figureElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_figureElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_figureElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4080, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __graphic.name() : __graphic,
        __legend.name() : __legend
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'figureElemType', figureElemType)


# Complex type graphicElemType with content type ELEMENT_ONLY
class graphicElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type graphicElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'graphicElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4087, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element hotspot uses Python identifier hotspot
    __hotspot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'hotspot'), 'hotspot', '__AbsentNamespace0_graphicElemType_hotspot', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4103, 4), )

    
    hotspot = property(__hotspot.value, __hotspot.set, None, None)

    
    # Element reasonForAmendment uses Python identifier reasonForAmendment
    __reasonForAmendment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendment'), 'reasonForAmendment', '__AbsentNamespace0_graphicElemType_reasonForAmendment', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4155, 4), )

    
    reasonForAmendment = property(__reasonForAmendment.value, __reasonForAmendment.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_graphicElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_graphicElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_graphicElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_graphicElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4097, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_graphicElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_graphicElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_graphicElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_graphicElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_graphicElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_graphicElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4092, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute infoEntityIdent uses Python identifier infoEntityIdent
    __infoEntityIdent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'infoEntityIdent'), 'infoEntityIdent', '__AbsentNamespace0_graphicElemType_infoEntityIdent', pyxb.binding.datatypes.ENTITY, required=True)
    __infoEntityIdent._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3051, 4)
    __infoEntityIdent._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4093, 8)
    
    infoEntityIdent = property(__infoEntityIdent.value, __infoEntityIdent.set, None, None)

    
    # Attribute reproductionWidth uses Python identifier reproductionWidth
    __reproductionWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reproductionWidth'), 'reproductionWidth', '__AbsentNamespace0_graphicElemType_reproductionWidth', pyxb.binding.datatypes.string)
    __reproductionWidth._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3052, 4)
    __reproductionWidth._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4094, 8)
    
    reproductionWidth = property(__reproductionWidth.value, __reproductionWidth.set, None, None)

    
    # Attribute reproductionHeight uses Python identifier reproductionHeight
    __reproductionHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reproductionHeight'), 'reproductionHeight', '__AbsentNamespace0_graphicElemType_reproductionHeight', pyxb.binding.datatypes.string)
    __reproductionHeight._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3053, 4)
    __reproductionHeight._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4095, 8)
    
    reproductionHeight = property(__reproductionHeight.value, __reproductionHeight.set, None, None)

    
    # Attribute reproductionScale uses Python identifier reproductionScale
    __reproductionScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reproductionScale'), 'reproductionScale', '__AbsentNamespace0_graphicElemType_reproductionScale', pyxb.binding.datatypes.string)
    __reproductionScale._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3054, 4)
    __reproductionScale._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4096, 8)
    
    reproductionScale = property(__reproductionScale.value, __reproductionScale.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_graphicElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 117, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_graphicElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_graphicElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_)
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 116, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_graphicElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_graphicElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, fixed=True, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 87, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __hotspot.name() : __hotspot,
        __reasonForAmendment.name() : __reasonForAmendment
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __infoEntityIdent.name() : __infoEntityIdent,
        __reproductionWidth.name() : __reproductionWidth,
        __reproductionHeight.name() : __reproductionHeight,
        __reproductionScale.name() : __reproductionScale,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'graphicElemType', graphicElemType)


# Complex type hotspotElemType with content type ELEMENT_ONLY
class hotspotElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type hotspotElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'hotspotElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4104, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_hotspotElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_hotspotElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element hotspot uses Python identifier hotspot
    __hotspot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'hotspot'), 'hotspot', '__AbsentNamespace0_hotspotElemType_hotspot', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4103, 4), )

    
    hotspot = property(__hotspot.value, __hotspot.set, None, None)

    
    # Element catalogSeqNumberRef uses Python identifier catalogSeqNumberRef
    __catalogSeqNumberRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), 'catalogSeqNumberRef', '__AbsentNamespace0_hotspotElemType_catalogSeqNumberRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4), )

    
    catalogSeqNumberRef = property(__catalogSeqNumberRef.value, __catalogSeqNumberRef.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_hotspotElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_hotspotElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_hotspotElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_hotspotElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4119, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_hotspotElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_hotspotElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_hotspotElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_hotspotElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4118, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute applicationStructureIdent uses Python identifier applicationStructureIdent
    __applicationStructureIdent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicationStructureIdent'), 'applicationStructureIdent', '__AbsentNamespace0_hotspotElemType_applicationStructureIdent', pyxb.binding.datatypes.string)
    __applicationStructureIdent._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4142, 4)
    __applicationStructureIdent._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4111, 8)
    
    applicationStructureIdent = property(__applicationStructureIdent.value, __applicationStructureIdent.set, None, None)

    
    # Attribute applicationStructureName uses Python identifier applicationStructureName
    __applicationStructureName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicationStructureName'), 'applicationStructureName', '__AbsentNamespace0_hotspotElemType_applicationStructureName', pyxb.binding.datatypes.string)
    __applicationStructureName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4143, 4)
    __applicationStructureName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4112, 8)
    
    applicationStructureName = property(__applicationStructureName.value, __applicationStructureName.set, None, None)

    
    # Attribute hotspotType uses Python identifier hotspotType
    __hotspotType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'hotspotType'), 'hotspotType', '__AbsentNamespace0_hotspotElemType_hotspotType', pyxb.binding.datatypes.string)
    __hotspotType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4144, 4)
    __hotspotType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4113, 8)
    
    hotspotType = property(__hotspotType.value, __hotspotType.set, None, None)

    
    # Attribute hotspotTitle uses Python identifier hotspotTitle
    __hotspotTitle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'hotspotTitle'), 'hotspotTitle', '__AbsentNamespace0_hotspotElemType_hotspotTitle', pyxb.binding.datatypes.string)
    __hotspotTitle._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4145, 4)
    __hotspotTitle._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4114, 8)
    
    hotspotTitle = property(__hotspotTitle.value, __hotspotTitle.set, None, None)

    
    # Attribute objectDescr uses Python identifier objectDescr
    __objectDescr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'objectDescr'), 'objectDescr', '__AbsentNamespace0_hotspotElemType_objectDescr', pyxb.binding.datatypes.string)
    __objectDescr._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4146, 4)
    __objectDescr._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4115, 8)
    
    objectDescr = property(__objectDescr.value, __objectDescr.set, None, None)

    
    # Attribute objectCoordinates uses Python identifier objectCoordinates
    __objectCoordinates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'objectCoordinates'), 'objectCoordinates', '__AbsentNamespace0_hotspotElemType_objectCoordinates', pyxb.binding.datatypes.string)
    __objectCoordinates._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4147, 4)
    __objectCoordinates._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4116, 8)
    
    objectCoordinates = property(__objectCoordinates.value, __objectCoordinates.set, None, None)

    
    # Attribute visibility uses Python identifier visibility
    __visibility = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'visibility'), 'visibility', '__AbsentNamespace0_hotspotElemType_visibility', visibilityAttType, unicode_default=u'visible')
    __visibility._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4148, 4)
    __visibility._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4117, 8)
    
    visibility = property(__visibility.value, __visibility.set, None, None)

    _ElementMap.update({
        __dmRef.name() : __dmRef,
        __internalRef.name() : __internalRef,
        __hotspot.name() : __hotspot,
        __catalogSeqNumberRef.name() : __catalogSeqNumberRef
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId,
        __applicationStructureIdent.name() : __applicationStructureIdent,
        __applicationStructureName.name() : __applicationStructureName,
        __hotspotType.name() : __hotspotType,
        __hotspotTitle.name() : __hotspotTitle,
        __objectDescr.name() : __objectDescr,
        __objectCoordinates.name() : __objectCoordinates,
        __visibility.name() : __visibility
    })
Namespace.addCategoryObject('typeBinding', u'hotspotElemType', hotspotElemType)


# Complex type catalogSeqNumberRefElemType with content type ELEMENT_ONLY
class catalogSeqNumberRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type catalogSeqNumberRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4124, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_catalogSeqNumberRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_catalogSeqNumberRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_catalogSeqNumberRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_catalogSeqNumberRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_catalogSeqNumberRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4132, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_catalogSeqNumberRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_catalogSeqNumberRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_catalogSeqNumberRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_catalogSeqNumberRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_catalogSeqNumberRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute catalogSeqNumberValue uses Python identifier catalogSeqNumberValue
    __catalogSeqNumberValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberValue'), 'catalogSeqNumberValue', '__AbsentNamespace0_catalogSeqNumberRefElemType_catalogSeqNumberValue', pyxb.binding.datatypes.string, required=True)
    __catalogSeqNumberValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4138, 4)
    __catalogSeqNumberValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4128, 8)
    
    catalogSeqNumberValue = property(__catalogSeqNumberValue.value, __catalogSeqNumberValue.set, None, None)

    
    # Attribute itemSeqNumberValue uses Python identifier itemSeqNumberValue
    __itemSeqNumberValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'itemSeqNumberValue'), 'itemSeqNumberValue', '__AbsentNamespace0_catalogSeqNumberRefElemType_itemSeqNumberValue', pyxb.binding.datatypes.string)
    __itemSeqNumberValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4139, 4)
    __itemSeqNumberValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4129, 8)
    
    itemSeqNumberValue = property(__itemSeqNumberValue.value, __itemSeqNumberValue.set, None, None)

    
    # Attribute initialProvisioningProjectValue uses Python identifier initialProvisioningProjectValue
    __initialProvisioningProjectValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'initialProvisioningProjectValue'), 'initialProvisioningProjectValue', '__AbsentNamespace0_catalogSeqNumberRefElemType_initialProvisioningProjectValue', pyxb.binding.datatypes.string)
    __initialProvisioningProjectValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4140, 4)
    __initialProvisioningProjectValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4130, 8)
    
    initialProvisioningProjectValue = property(__initialProvisioningProjectValue.value, __initialProvisioningProjectValue.set, None, None)

    
    # Attribute responsiblePartnerCompanyCode uses Python identifier responsiblePartnerCompanyCode
    __responsiblePartnerCompanyCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompanyCode'), 'responsiblePartnerCompanyCode', '__AbsentNamespace0_catalogSeqNumberRefElemType_responsiblePartnerCompanyCode', pyxb.binding.datatypes.string)
    __responsiblePartnerCompanyCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4141, 4)
    __responsiblePartnerCompanyCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4131, 8)
    
    responsiblePartnerCompanyCode = property(__responsiblePartnerCompanyCode.value, __responsiblePartnerCompanyCode.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_catalogSeqNumberRefElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 125, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_catalogSeqNumberRefElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_catalogSeqNumberRefElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'new')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 124, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_catalogSeqNumberRefElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_catalogSeqNumberRefElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, fixed=True, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 97, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __catalogSeqNumberValue.name() : __catalogSeqNumberValue,
        __itemSeqNumberValue.name() : __itemSeqNumberValue,
        __initialProvisioningProjectValue.name() : __initialProvisioningProjectValue,
        __responsiblePartnerCompanyCode.name() : __responsiblePartnerCompanyCode,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'catalogSeqNumberRefElemType', catalogSeqNumberRefElemType)


# Complex type legendElemType with content type ELEMENT_ONLY
class legendElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type legendElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'legendElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4163, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element definitionList uses Python identifier definitionList
    __definitionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), 'definitionList', '__AbsentNamespace0_legendElemType_definitionList', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4), )

    
    definitionList = property(__definitionList.value, __definitionList.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_legendElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_legendElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_legendElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_legendElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4167, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_legendElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_legendElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_legendElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __definitionList.name() : __definitionList
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'legendElemType', legendElemType)


# Complex type commonInfoDescrParaElemType with content type ELEMENT_ONLY
class commonInfoDescrParaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type commonInfoDescrParaElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrParaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4172, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'para'), 'para', '__AbsentNamespace0_commonInfoDescrParaElemType_para', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4), )

    
    para = property(__para.value, __para.set, None, None)

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_commonInfoDescrParaElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'note'), 'note', '__AbsentNamespace0_commonInfoDescrParaElemType_note', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element warning uses Python identifier warning
    __warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warning'), 'warning', '__AbsentNamespace0_commonInfoDescrParaElemType_warning', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4), )

    
    warning = property(__warning.value, __warning.set, None, None)

    
    # Element caution uses Python identifier caution
    __caution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'caution'), 'caution', '__AbsentNamespace0_commonInfoDescrParaElemType_caution', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4), )

    
    caution = property(__caution.value, __caution.set, None, None)

    
    # Element figure uses Python identifier figure
    __figure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'figure'), 'figure', '__AbsentNamespace0_commonInfoDescrParaElemType_figure', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4), )

    
    figure = property(__figure.value, __figure.set, None, None)

    
    # Element commonInfoDescrPara uses Python identifier commonInfoDescrPara
    __commonInfoDescrPara = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara'), 'commonInfoDescrPara', '__AbsentNamespace0_commonInfoDescrParaElemType_commonInfoDescrPara', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4171, 4), )

    
    commonInfoDescrPara = property(__commonInfoDescrPara.value, __commonInfoDescrPara.set, None, None)

    
    # Element circuitBreakerDescrGroup uses Python identifier circuitBreakerDescrGroup
    __circuitBreakerDescrGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup'), 'circuitBreakerDescrGroup', '__AbsentNamespace0_commonInfoDescrParaElemType_circuitBreakerDescrGroup', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4206, 4), )

    
    circuitBreakerDescrGroup = property(__circuitBreakerDescrGroup.value, __circuitBreakerDescrGroup.set, None, None)

    
    # Element multimedia uses Python identifier multimedia
    __multimedia = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'multimedia'), 'multimedia', '__AbsentNamespace0_commonInfoDescrParaElemType_multimedia', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4385, 4), )

    
    multimedia = property(__multimedia.value, __multimedia.set, None, None)

    
    # Element foldout uses Python identifier foldout
    __foldout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'foldout'), 'foldout', '__AbsentNamespace0_commonInfoDescrParaElemType_foldout', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4449, 4), )

    
    foldout = property(__foldout.value, __foldout.set, None, None)

    
    # Element table uses Python identifier table
    __table = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__AbsentNamespace0_commonInfoDescrParaElemType_table', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4), )

    
    table = property(__table.value, __table.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_commonInfoDescrParaElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_commonInfoDescrParaElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_commonInfoDescrParaElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_commonInfoDescrParaElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4179, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_commonInfoDescrParaElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_commonInfoDescrParaElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_commonInfoDescrParaElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_commonInfoDescrParaElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_commonInfoDescrParaElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_commonInfoDescrParaElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4178, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __para.name() : __para,
        __title.name() : __title,
        __note.name() : __note,
        __warning.name() : __warning,
        __caution.name() : __caution,
        __figure.name() : __figure,
        __commonInfoDescrPara.name() : __commonInfoDescrPara,
        __circuitBreakerDescrGroup.name() : __circuitBreakerDescrGroup,
        __multimedia.name() : __multimedia,
        __foldout.name() : __foldout,
        __table.name() : __table
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'commonInfoDescrParaElemType', commonInfoDescrParaElemType)


# Complex type circuitBreakerDescrGroupElemType with content type ELEMENT_ONLY
class circuitBreakerDescrGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type circuitBreakerDescrGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4207, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element circuitBreakerDescrSubGroup uses Python identifier circuitBreakerDescrSubGroup
    __circuitBreakerDescrSubGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrSubGroup'), 'circuitBreakerDescrSubGroup', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_circuitBreakerDescrSubGroup', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4219, 4), )

    
    circuitBreakerDescrSubGroup = property(__circuitBreakerDescrSubGroup.value, __circuitBreakerDescrSubGroup.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4214, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4211, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute circuitBreakerAction uses Python identifier circuitBreakerAction
    __circuitBreakerAction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerAction'), 'circuitBreakerAction', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_circuitBreakerAction', circuitBreakerActionAttType)
    __circuitBreakerAction._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1333, 4)
    __circuitBreakerAction._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4212, 8)
    
    circuitBreakerAction = property(__circuitBreakerAction.value, __circuitBreakerAction.set, None, None)

    
    # Attribute checkSum uses Python identifier checkSum
    __checkSum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'checkSum'), 'checkSum', '__AbsentNamespace0_circuitBreakerDescrGroupElemType_checkSum', pyxb.binding.datatypes.string)
    __checkSum._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1342, 4)
    __checkSum._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4213, 8)
    
    checkSum = property(__checkSum.value, __checkSum.set, None, None)

    _ElementMap.update({
        __circuitBreakerDescrSubGroup.name() : __circuitBreakerDescrSubGroup
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __circuitBreakerAction.name() : __circuitBreakerAction,
        __checkSum.name() : __checkSum
    })
Namespace.addCategoryObject('typeBinding', u'circuitBreakerDescrGroupElemType', circuitBreakerDescrGroupElemType)


# Complex type circuitBreakerDescrSubGroupElemType with content type ELEMENT_ONLY
class circuitBreakerDescrSubGroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type circuitBreakerDescrSubGroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrSubGroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4220, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element circuitBreakerDescr uses Python identifier circuitBreakerDescr
    __circuitBreakerDescr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescr'), 'circuitBreakerDescr', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_circuitBreakerDescr', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4234, 4), )

    
    circuitBreakerDescr = property(__circuitBreakerDescr.value, __circuitBreakerDescr.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4230, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4229, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute circuitBreakerAction uses Python identifier circuitBreakerAction
    __circuitBreakerAction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerAction'), 'circuitBreakerAction', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_circuitBreakerAction', circuitBreakerActionAttType)
    __circuitBreakerAction._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1333, 4)
    __circuitBreakerAction._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4227, 8)
    
    circuitBreakerAction = property(__circuitBreakerAction.value, __circuitBreakerAction.set, None, None)

    
    # Attribute checkSum uses Python identifier checkSum
    __checkSum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'checkSum'), 'checkSum', '__AbsentNamespace0_circuitBreakerDescrSubGroupElemType_checkSum', pyxb.binding.datatypes.string)
    __checkSum._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1342, 4)
    __checkSum._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4228, 8)
    
    checkSum = property(__checkSum.value, __checkSum.set, None, None)

    _ElementMap.update({
        __functionalItemRef.name() : __functionalItemRef,
        __circuitBreakerDescr.name() : __circuitBreakerDescr
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId,
        __circuitBreakerAction.name() : __circuitBreakerAction,
        __checkSum.name() : __checkSum
    })
Namespace.addCategoryObject('typeBinding', u'circuitBreakerDescrSubGroupElemType', circuitBreakerDescrSubGroupElemType)


# Complex type circuitBreakerDescrElemType with content type ELEMENT_ONLY
class circuitBreakerDescrElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type circuitBreakerDescrElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4235, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_circuitBreakerDescrElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_circuitBreakerDescrElemType_circuitBreakerRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_circuitBreakerDescrElemType_internalRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element accessPointRef uses Python identifier accessPointRef
    __accessPointRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessPointRef'), 'accessPointRef', '__AbsentNamespace0_circuitBreakerDescrElemType_accessPointRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4251, 4), )

    
    accessPointRef = property(__accessPointRef.value, __accessPointRef.set, None, None)

    
    # Element circuitBreakerLocation uses Python identifier circuitBreakerLocation
    __circuitBreakerLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerLocation'), 'circuitBreakerLocation', '__AbsentNamespace0_circuitBreakerDescrElemType_circuitBreakerLocation', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4371, 4), )

    
    circuitBreakerLocation = property(__circuitBreakerLocation.value, __circuitBreakerLocation.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_circuitBreakerDescrElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_circuitBreakerDescrElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_circuitBreakerDescrElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_circuitBreakerDescrElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4246, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_circuitBreakerDescrElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_circuitBreakerDescrElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_circuitBreakerDescrElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_circuitBreakerDescrElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_circuitBreakerDescrElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_circuitBreakerDescrElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4245, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __internalRef.name() : __internalRef,
        __accessPointRef.name() : __accessPointRef,
        __circuitBreakerLocation.name() : __circuitBreakerLocation
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'circuitBreakerDescrElemType', circuitBreakerDescrElemType)


# Complex type accessPointRefElemType with content type ELEMENT_ONLY
class accessPointRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type accessPointRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accessPointRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4252, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_accessPointRefElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_accessPointRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_accessPointRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_accessPointRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_accessPointRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_accessPointRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4259, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_accessPointRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_accessPointRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_accessPointRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_accessPointRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_accessPointRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute accessPointNumber uses Python identifier accessPointNumber
    __accessPointNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'accessPointNumber'), 'accessPointNumber', '__AbsentNamespace0_accessPointRefElemType_accessPointNumber', pyxb.binding.datatypes.string)
    __accessPointNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4265, 4)
    __accessPointNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4257, 8)
    
    accessPointNumber = property(__accessPointNumber.value, __accessPointNumber.set, None, None)

    
    # Attribute accessPointTypeValue uses Python identifier accessPointTypeValue
    __accessPointTypeValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'accessPointTypeValue'), 'accessPointTypeValue', '__AbsentNamespace0_accessPointRefElemType_accessPointTypeValue', accessPointTypeValueAttType)
    __accessPointTypeValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4266, 4)
    __accessPointTypeValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4258, 8)
    
    accessPointTypeValue = property(__accessPointTypeValue.value, __accessPointTypeValue.set, None, None)

    
    # Attribute lsarData uses Python identifier lsarData
    __lsarData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'lsarData'), 'lsarData', '__AbsentNamespace0_accessPointRefElemType_lsarData', yesOrNoAttType, unicode_default=u'0')
    __lsarData._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4370, 4)
    __lsarData._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4260, 8)
    
    lsarData = property(__lsarData.value, __lsarData.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __accessPointNumber.name() : __accessPointNumber,
        __accessPointTypeValue.name() : __accessPointTypeValue,
        __lsarData.name() : __lsarData
    })
Namespace.addCategoryObject('typeBinding', u'accessPointRefElemType', accessPointRefElemType)


# Complex type circuitBreakerLocationElemType with content type MIXED
class circuitBreakerLocationElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type circuitBreakerLocationElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerLocationElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4372, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_circuitBreakerLocationElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_circuitBreakerLocationElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_circuitBreakerLocationElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_circuitBreakerLocationElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4373, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_circuitBreakerLocationElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_circuitBreakerLocationElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_circuitBreakerLocationElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'circuitBreakerLocationElemType', circuitBreakerLocationElemType)


# Complex type multimediaElemType with content type ELEMENT_ONLY
class multimediaElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type multimediaElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'multimediaElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4386, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_multimediaElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element multimediaObject uses Python identifier multimediaObject
    __multimediaObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'multimediaObject'), 'multimediaObject', '__AbsentNamespace0_multimediaElemType_multimediaObject', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4397, 4), )

    
    multimediaObject = property(__multimediaObject.value, __multimediaObject.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_multimediaElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_multimediaElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_multimediaElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_multimediaElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4392, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_multimediaElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_multimediaElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_multimediaElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_multimediaElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_multimediaElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_multimediaElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4391, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __multimediaObject.name() : __multimediaObject
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'multimediaElemType', multimediaElemType)


# Complex type multimediaObjectElemType with content type ELEMENT_ONLY
class multimediaObjectElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type multimediaObjectElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'multimediaObjectElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4398, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element reasonForAmendment uses Python identifier reasonForAmendment
    __reasonForAmendment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendment'), 'reasonForAmendment', '__AbsentNamespace0_multimediaObjectElemType_reasonForAmendment', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4155, 4), )

    
    reasonForAmendment = property(__reasonForAmendment.value, __reasonForAmendment.set, None, None)

    
    # Element parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'parameter'), 'parameter', '__AbsentNamespace0_multimediaObjectElemType_parameter', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4418, 4), )

    
    parameter = property(__parameter.value, __parameter.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_multimediaObjectElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_multimediaObjectElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_multimediaObjectElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_multimediaObjectElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4406, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_multimediaObjectElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_multimediaObjectElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_multimediaObjectElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_multimediaObjectElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_multimediaObjectElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_multimediaObjectElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4403, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute infoEntityIdent uses Python identifier infoEntityIdent
    __infoEntityIdent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'infoEntityIdent'), 'infoEntityIdent', '__AbsentNamespace0_multimediaObjectElemType_infoEntityIdent', pyxb.binding.datatypes.ENTITY, required=True)
    __infoEntityIdent._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3051, 4)
    __infoEntityIdent._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4407, 8)
    
    infoEntityIdent = property(__infoEntityIdent.value, __infoEntityIdent.set, None, None)

    
    # Attribute autoPlay uses Python identifier autoPlay
    __autoPlay = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'autoPlay'), 'autoPlay', '__AbsentNamespace0_multimediaObjectElemType_autoPlay', yesOrNoAttType)
    __autoPlay._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4428, 4)
    __autoPlay._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4404, 8)
    
    autoPlay = property(__autoPlay.value, __autoPlay.set, None, None)

    
    # Attribute fullScreen uses Python identifier fullScreen
    __fullScreen = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'fullScreen'), 'fullScreen', '__AbsentNamespace0_multimediaObjectElemType_fullScreen', yesOrNoAttType)
    __fullScreen._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4429, 4)
    __fullScreen._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4405, 8)
    
    fullScreen = property(__fullScreen.value, __fullScreen.set, None, None)

    
    # Attribute multimediaObjectHeight uses Python identifier multimediaObjectHeight
    __multimediaObjectHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'multimediaObjectHeight'), 'multimediaObjectHeight', '__AbsentNamespace0_multimediaObjectElemType_multimediaObjectHeight', pyxb.binding.datatypes.string)
    __multimediaObjectHeight._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4430, 4)
    __multimediaObjectHeight._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4408, 8)
    
    multimediaObjectHeight = property(__multimediaObjectHeight.value, __multimediaObjectHeight.set, None, None)

    
    # Attribute multimediaObjectWidth uses Python identifier multimediaObjectWidth
    __multimediaObjectWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'multimediaObjectWidth'), 'multimediaObjectWidth', '__AbsentNamespace0_multimediaObjectElemType_multimediaObjectWidth', pyxb.binding.datatypes.string)
    __multimediaObjectWidth._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4431, 4)
    __multimediaObjectWidth._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4409, 8)
    
    multimediaObjectWidth = property(__multimediaObjectWidth.value, __multimediaObjectWidth.set, None, None)

    
    # Attribute multimediaType uses Python identifier multimediaType
    __multimediaType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'multimediaType'), 'multimediaType', '__AbsentNamespace0_multimediaObjectElemType_multimediaType', multimediaTypeAttType, required=True)
    __multimediaType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4432, 4)
    __multimediaType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4410, 8)
    
    multimediaType = property(__multimediaType.value, __multimediaType.set, None, None)

    
    # Attribute runTimeDuration uses Python identifier runTimeDuration
    __runTimeDuration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'runTimeDuration'), 'runTimeDuration', '__AbsentNamespace0_multimediaObjectElemType_runTimeDuration', pyxb.binding.datatypes.integer)
    __runTimeDuration._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4441, 4)
    __runTimeDuration._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4411, 8)
    
    runTimeDuration = property(__runTimeDuration.value, __runTimeDuration.set, None, None)

    
    # Attribute showPluginControls uses Python identifier showPluginControls
    __showPluginControls = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'showPluginControls'), 'showPluginControls', '__AbsentNamespace0_multimediaObjectElemType_showPluginControls', showPluginControlsAttType)
    __showPluginControls._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4442, 4)
    __showPluginControls._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4412, 8)
    
    showPluginControls = property(__showPluginControls.value, __showPluginControls.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_multimediaObjectElemType_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 22, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 117, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_multimediaObjectElemType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.string)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 39, 1)
    __href._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 41, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_multimediaObjectElemType_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_)
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 60, 1)
    __show._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 116, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_multimediaObjectElemType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 71, 1)
    __title._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 42, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_multimediaObjectElemType_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON_2, fixed=True, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 73, 1)
    __type._UseLocation = pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\xlink.xsd', 87, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __reasonForAmendment.name() : __reasonForAmendment,
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __infoEntityIdent.name() : __infoEntityIdent,
        __autoPlay.name() : __autoPlay,
        __fullScreen.name() : __fullScreen,
        __multimediaObjectHeight.name() : __multimediaObjectHeight,
        __multimediaObjectWidth.name() : __multimediaObjectWidth,
        __multimediaType.name() : __multimediaType,
        __runTimeDuration.name() : __runTimeDuration,
        __showPluginControls.name() : __showPluginControls,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'multimediaObjectElemType', multimediaObjectElemType)


# Complex type tableElemType with content type ELEMENT_ONLY
class tableElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type tableElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tableElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4457, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_tableElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element graphic uses Python identifier graphic
    __graphic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'graphic'), 'graphic', '__AbsentNamespace0_tableElemType_graphic', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4086, 4), )

    
    graphic = property(__graphic.value, __graphic.set, None, None)

    
    # Element tgroup uses Python identifier tgroup
    __tgroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tgroup'), 'tgroup', '__AbsentNamespace0_tableElemType_tgroup', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4478, 4), )

    
    tgroup = property(__tgroup.value, __tgroup.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_tableElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_tableElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_tableElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_tableElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4473, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_tableElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_tableElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_tableElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_tableElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_tableElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_tableElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4472, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute colsep uses Python identifier colsep
    __colsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colsep'), 'colsep', '__AbsentNamespace0_tableElemType_colsep', yesOrNoAttType)
    __colsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4522, 4)
    __colsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4468, 8)
    
    colsep = property(__colsep.value, __colsep.set, None, None)

    
    # Attribute rowsep uses Python identifier rowsep
    __rowsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'rowsep'), 'rowsep', '__AbsentNamespace0_tableElemType_rowsep', yesOrNoAttType)
    __rowsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4523, 4)
    __rowsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4469, 8)
    
    rowsep = property(__rowsep.value, __rowsep.set, None, None)

    
    # Attribute tabstyle uses Python identifier tabstyle
    __tabstyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'tabstyle'), 'tabstyle', '__AbsentNamespace0_tableElemType_tabstyle', pyxb.binding.datatypes.NMTOKEN)
    __tabstyle._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4614, 4)
    __tabstyle._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4465, 8)
    
    tabstyle = property(__tabstyle.value, __tabstyle.set, None, None)

    
    # Attribute tocentry uses Python identifier tocentry
    __tocentry = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'tocentry'), 'tocentry', '__AbsentNamespace0_tableElemType_tocentry', yesOrNoAttType, unicode_default=u'1')
    __tocentry._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4615, 4)
    __tocentry._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4466, 8)
    
    tocentry = property(__tocentry.value, __tocentry.set, None, None)

    
    # Attribute frame uses Python identifier frame
    __frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'frame'), 'frame', '__AbsentNamespace0_tableElemType_frame', frameAttType)
    __frame._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4616, 4)
    __frame._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4467, 8)
    
    frame = property(__frame.value, __frame.set, None, None)

    
    # Attribute orient uses Python identifier orient
    __orient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'orient'), 'orient', '__AbsentNamespace0_tableElemType_orient', orientAttType)
    __orient._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4627, 4)
    __orient._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4470, 8)
    
    orient = property(__orient.value, __orient.set, None, None)

    
    # Attribute pgwide uses Python identifier pgwide
    __pgwide = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'pgwide'), 'pgwide', '__AbsentNamespace0_tableElemType_pgwide', yesOrNoAttType)
    __pgwide._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4634, 4)
    __pgwide._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4471, 8)
    
    pgwide = property(__pgwide.value, __pgwide.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __graphic.name() : __graphic,
        __tgroup.name() : __tgroup
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __colsep.name() : __colsep,
        __rowsep.name() : __rowsep,
        __tabstyle.name() : __tabstyle,
        __tocentry.name() : __tocentry,
        __frame.name() : __frame,
        __orient.name() : __orient,
        __pgwide.name() : __pgwide
    })
Namespace.addCategoryObject('typeBinding', u'tableElemType', tableElemType)


# Complex type tgroupElemType with content type ELEMENT_ONLY
class tgroupElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type tgroupElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tgroupElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4479, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element colspec uses Python identifier colspec
    __colspec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'colspec'), 'colspec', '__AbsentNamespace0_tgroupElemType_colspec', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4496, 4), )

    
    colspec = property(__colspec.value, __colspec.set, None, None)

    
    # Element spanspec uses Python identifier spanspec
    __spanspec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'spanspec'), 'spanspec', '__AbsentNamespace0_tgroupElemType_spanspec', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4524, 4), )

    
    spanspec = property(__spanspec.value, __spanspec.set, None, None)

    
    # Element thead uses Python identifier thead
    __thead = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'thead'), 'thead', '__AbsentNamespace0_tgroupElemType_thead', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4538, 4), )

    
    thead = property(__thead.value, __thead.set, None, None)

    
    # Element tfoot uses Python identifier tfoot
    __tfoot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tfoot'), 'tfoot', '__AbsentNamespace0_tgroupElemType_tfoot', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4597, 4), )

    
    tfoot = property(__tfoot.value, __tfoot.set, None, None)

    
    # Element tbody uses Python identifier tbody
    __tbody = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tbody'), 'tbody', '__AbsentNamespace0_tgroupElemType_tbody', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4605, 4), )

    
    tbody = property(__tbody.value, __tbody.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_tgroupElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4487, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'align'), 'align', '__AbsentNamespace0_tgroupElemType_align', alignAttType, unicode_default=u'left')
    __align._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4509, 4)
    __align._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4492, 8)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'charoff'), 'charoff', '__AbsentNamespace0_tgroupElemType_charoff', pyxb.binding.datatypes.string)
    __charoff._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4519, 4)
    __charoff._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4493, 8)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'char'), 'char', '__AbsentNamespace0_tgroupElemType_char', pyxb.binding.datatypes.string)
    __char._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4520, 4)
    __char._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4494, 8)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute colsep uses Python identifier colsep
    __colsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colsep'), 'colsep', '__AbsentNamespace0_tgroupElemType_colsep', yesOrNoAttType)
    __colsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4522, 4)
    __colsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4490, 8)
    
    colsep = property(__colsep.value, __colsep.set, None, None)

    
    # Attribute rowsep uses Python identifier rowsep
    __rowsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'rowsep'), 'rowsep', '__AbsentNamespace0_tgroupElemType_rowsep', yesOrNoAttType)
    __rowsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4523, 4)
    __rowsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4491, 8)
    
    rowsep = property(__rowsep.value, __rowsep.set, None, None)

    
    # Attribute cols uses Python identifier cols
    __cols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'cols'), 'cols', '__AbsentNamespace0_tgroupElemType_cols', pyxb.binding.datatypes.positiveInteger, required=True)
    __cols._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4612, 4)
    __cols._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4488, 8)
    
    cols = property(__cols.value, __cols.set, None, None)

    
    # Attribute tgstyle uses Python identifier tgstyle
    __tgstyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'tgstyle'), 'tgstyle', '__AbsentNamespace0_tgroupElemType_tgstyle', pyxb.binding.datatypes.NMTOKEN)
    __tgstyle._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4613, 4)
    __tgstyle._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4489, 8)
    
    tgstyle = property(__tgstyle.value, __tgstyle.set, None, None)

    _ElementMap.update({
        __colspec.name() : __colspec,
        __spanspec.name() : __spanspec,
        __thead.name() : __thead,
        __tfoot.name() : __tfoot,
        __tbody.name() : __tbody
    })
    _AttributeMap.update({
        __applicRefId.name() : __applicRefId,
        __align.name() : __align,
        __charoff.name() : __charoff,
        __char.name() : __char,
        __colsep.name() : __colsep,
        __rowsep.name() : __rowsep,
        __cols.name() : __cols,
        __tgstyle.name() : __tgstyle
    })
Namespace.addCategoryObject('typeBinding', u'tgroupElemType', tgroupElemType)


# Complex type colspecElemType with content type EMPTY
class colspecElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type colspecElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'colspecElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4497, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute colnum uses Python identifier colnum
    __colnum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colnum'), 'colnum', '__AbsentNamespace0_colspecElemType_colnum', pyxb.binding.datatypes.positiveInteger)
    __colnum._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4507, 4)
    __colnum._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4498, 8)
    
    colnum = property(__colnum.value, __colnum.set, None, None)

    
    # Attribute colname uses Python identifier colname
    __colname = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colname'), 'colname', '__AbsentNamespace0_colspecElemType_colname', pyxb.binding.datatypes.NMTOKEN)
    __colname._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4508, 4)
    __colname._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4499, 8)
    
    colname = property(__colname.value, __colname.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'align'), 'align', '__AbsentNamespace0_colspecElemType_align', alignAttType)
    __align._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4509, 4)
    __align._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4500, 8)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'charoff'), 'charoff', '__AbsentNamespace0_colspecElemType_charoff', pyxb.binding.datatypes.string)
    __charoff._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4519, 4)
    __charoff._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4501, 8)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'char'), 'char', '__AbsentNamespace0_colspecElemType_char', pyxb.binding.datatypes.string)
    __char._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4520, 4)
    __char._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4502, 8)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute colwidth uses Python identifier colwidth
    __colwidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colwidth'), 'colwidth', '__AbsentNamespace0_colspecElemType_colwidth', pyxb.binding.datatypes.string)
    __colwidth._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4521, 4)
    __colwidth._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4503, 8)
    
    colwidth = property(__colwidth.value, __colwidth.set, None, None)

    
    # Attribute colsep uses Python identifier colsep
    __colsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colsep'), 'colsep', '__AbsentNamespace0_colspecElemType_colsep', yesOrNoAttType)
    __colsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4522, 4)
    __colsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4504, 8)
    
    colsep = property(__colsep.value, __colsep.set, None, None)

    
    # Attribute rowsep uses Python identifier rowsep
    __rowsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'rowsep'), 'rowsep', '__AbsentNamespace0_colspecElemType_rowsep', yesOrNoAttType)
    __rowsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4523, 4)
    __rowsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4505, 8)
    
    rowsep = property(__rowsep.value, __rowsep.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __colnum.name() : __colnum,
        __colname.name() : __colname,
        __align.name() : __align,
        __charoff.name() : __charoff,
        __char.name() : __char,
        __colwidth.name() : __colwidth,
        __colsep.name() : __colsep,
        __rowsep.name() : __rowsep
    })
Namespace.addCategoryObject('typeBinding', u'colspecElemType', colspecElemType)


# Complex type spanspecElemType with content type EMPTY
class spanspecElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type spanspecElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'spanspecElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4525, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'align'), 'align', '__AbsentNamespace0_spanspecElemType_align', alignAttType, unicode_default=u'center')
    __align._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4509, 4)
    __align._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4529, 8)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'charoff'), 'charoff', '__AbsentNamespace0_spanspecElemType_charoff', pyxb.binding.datatypes.string)
    __charoff._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4519, 4)
    __charoff._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4530, 8)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'char'), 'char', '__AbsentNamespace0_spanspecElemType_char', pyxb.binding.datatypes.string)
    __char._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4520, 4)
    __char._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4531, 8)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute colsep uses Python identifier colsep
    __colsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colsep'), 'colsep', '__AbsentNamespace0_spanspecElemType_colsep', yesOrNoAttType)
    __colsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4522, 4)
    __colsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4532, 8)
    
    colsep = property(__colsep.value, __colsep.set, None, None)

    
    # Attribute rowsep uses Python identifier rowsep
    __rowsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'rowsep'), 'rowsep', '__AbsentNamespace0_spanspecElemType_rowsep', yesOrNoAttType)
    __rowsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4523, 4)
    __rowsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4533, 8)
    
    rowsep = property(__rowsep.value, __rowsep.set, None, None)

    
    # Attribute namest uses Python identifier namest
    __namest = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'namest'), 'namest', '__AbsentNamespace0_spanspecElemType_namest', pyxb.binding.datatypes.NMTOKEN, required=True)
    __namest._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4535, 4)
    __namest._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4526, 8)
    
    namest = property(__namest.value, __namest.set, None, None)

    
    # Attribute nameend uses Python identifier nameend
    __nameend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'nameend'), 'nameend', '__AbsentNamespace0_spanspecElemType_nameend', pyxb.binding.datatypes.NMTOKEN, required=True)
    __nameend._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4536, 4)
    __nameend._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4527, 8)
    
    nameend = property(__nameend.value, __nameend.set, None, None)

    
    # Attribute spanname uses Python identifier spanname
    __spanname = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'spanname'), 'spanname', '__AbsentNamespace0_spanspecElemType_spanname', pyxb.binding.datatypes.NMTOKEN, required=True)
    __spanname._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4537, 4)
    __spanname._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4528, 8)
    
    spanname = property(__spanname.value, __spanname.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __align.name() : __align,
        __charoff.name() : __charoff,
        __char.name() : __char,
        __colsep.name() : __colsep,
        __rowsep.name() : __rowsep,
        __namest.name() : __namest,
        __nameend.name() : __nameend,
        __spanname.name() : __spanname
    })
Namespace.addCategoryObject('typeBinding', u'spanspecElemType', spanspecElemType)


# Complex type theadElemType with content type ELEMENT_ONLY
class theadElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type theadElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'theadElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4539, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element colspec uses Python identifier colspec
    __colspec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'colspec'), 'colspec', '__AbsentNamespace0_theadElemType_colspec', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4496, 4), )

    
    colspec = property(__colspec.value, __colspec.set, None, None)

    
    # Element row uses Python identifier row
    __row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'row'), 'row', '__AbsentNamespace0_theadElemType_row', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4546, 4), )

    
    row = property(__row.value, __row.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'valign'), 'valign', '__AbsentNamespace0_theadElemType_valign', valignAttType, unicode_default=u'bottom')
    __valign._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4587, 4)
    __valign._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4544, 8)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __colspec.name() : __colspec,
        __row.name() : __row
    })
    _AttributeMap.update({
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'theadElemType', theadElemType)


# Complex type rowElemType with content type ELEMENT_ONLY
class rowElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type rowElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'rowElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4547, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'entry'), 'entry', '__AbsentNamespace0_rowElemType_entry', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4558, 4), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_rowElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_rowElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_rowElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_rowElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4553, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_rowElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_rowElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_rowElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_rowElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_rowElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_rowElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4551, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute rowsep uses Python identifier rowsep
    __rowsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'rowsep'), 'rowsep', '__AbsentNamespace0_rowElemType_rowsep', yesOrNoAttType)
    __rowsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4523, 4)
    __rowsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4552, 8)
    
    rowsep = property(__rowsep.value, __rowsep.set, None, None)

    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __rowsep.name() : __rowsep
    })
Namespace.addCategoryObject('typeBinding', u'rowElemType', rowElemType)


# Complex type entryElemType with content type ELEMENT_ONLY
class entryElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type entryElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'entryElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4559, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_entryElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_entryElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_entryElemType_dmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), 'emphasis', '__AbsentNamespace0_entryElemType_emphasis', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, None)

    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_entryElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_entryElemType_pmRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_entryElemType_externalPubRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_entryElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_entryElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element verbatimText uses Python identifier verbatimText
    __verbatimText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), 'verbatimText', '__AbsentNamespace0_entryElemType_verbatimText', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4), )

    
    verbatimText = property(__verbatimText.value, __verbatimText.set, None, None)

    
    # Element circuitBreakerRef uses Python identifier circuitBreakerRef
    __circuitBreakerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), 'circuitBreakerRef', '__AbsentNamespace0_entryElemType_circuitBreakerRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4), )

    
    circuitBreakerRef = property(__circuitBreakerRef.value, __circuitBreakerRef.set, None, None)

    
    # Element controlIndicatorRef uses Python identifier controlIndicatorRef
    __controlIndicatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), 'controlIndicatorRef', '__AbsentNamespace0_entryElemType_controlIndicatorRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4), )

    
    controlIndicatorRef = property(__controlIndicatorRef.value, __controlIndicatorRef.set, None, None)

    
    # Element inlineSignificantData uses Python identifier inlineSignificantData
    __inlineSignificantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), 'inlineSignificantData', '__AbsentNamespace0_entryElemType_inlineSignificantData', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4), )

    
    inlineSignificantData = property(__inlineSignificantData.value, __inlineSignificantData.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__AbsentNamespace0_entryElemType_quantity', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_entryElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element changeInline uses Python identifier changeInline
    __changeInline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), 'changeInline', '__AbsentNamespace0_entryElemType_changeInline', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4), )

    
    changeInline = property(__changeInline.value, __changeInline.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_entryElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnote'), 'footnote', '__AbsentNamespace0_entryElemType_footnote', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'para'), 'para', '__AbsentNamespace0_entryElemType_para', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4), )

    
    para = property(__para.value, __para.set, None, None)

    
    # Element sequentialList uses Python identifier sequentialList
    __sequentialList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'sequentialList'), 'sequentialList', '__AbsentNamespace0_entryElemType_sequentialList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3090, 4), )

    
    sequentialList = property(__sequentialList.value, __sequentialList.set, None, None)

    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'note'), 'note', '__AbsentNamespace0_entryElemType_note', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element randomList uses Python identifier randomList
    __randomList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'randomList'), 'randomList', '__AbsentNamespace0_entryElemType_randomList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4), )

    
    randomList = property(__randomList.value, __randomList.set, None, None)

    
    # Element definitionList uses Python identifier definitionList
    __definitionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), 'definitionList', '__AbsentNamespace0_entryElemType_definitionList', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4), )

    
    definitionList = property(__definitionList.value, __definitionList.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_entryElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Element warning uses Python identifier warning
    __warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warning'), 'warning', '__AbsentNamespace0_entryElemType_warning', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4), )

    
    warning = property(__warning.value, __warning.set, None, None)

    
    # Element caution uses Python identifier caution
    __caution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'caution'), 'caution', '__AbsentNamespace0_entryElemType_caution', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4), )

    
    caution = property(__caution.value, __caution.set, None, None)

    
    # Element legend uses Python identifier legend
    __legend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'legend'), 'legend', '__AbsentNamespace0_entryElemType_legend', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4162, 4), )

    
    legend = property(__legend.value, __legend.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_entryElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4581, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_entryElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4568, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute colname uses Python identifier colname
    __colname = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colname'), 'colname', '__AbsentNamespace0_entryElemType_colname', pyxb.binding.datatypes.NMTOKEN)
    __colname._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4508, 4)
    __colname._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4569, 8)
    
    colname = property(__colname.value, __colname.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'align'), 'align', '__AbsentNamespace0_entryElemType_align', alignAttType)
    __align._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4509, 4)
    __align._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4578, 8)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'charoff'), 'charoff', '__AbsentNamespace0_entryElemType_charoff', pyxb.binding.datatypes.string)
    __charoff._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4519, 4)
    __charoff._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4579, 8)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'char'), 'char', '__AbsentNamespace0_entryElemType_char', pyxb.binding.datatypes.string)
    __char._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4520, 4)
    __char._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4580, 8)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute colsep uses Python identifier colsep
    __colsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'colsep'), 'colsep', '__AbsentNamespace0_entryElemType_colsep', yesOrNoAttType)
    __colsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4522, 4)
    __colsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4574, 8)
    
    colsep = property(__colsep.value, __colsep.set, None, None)

    
    # Attribute rowsep uses Python identifier rowsep
    __rowsep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'rowsep'), 'rowsep', '__AbsentNamespace0_entryElemType_rowsep', yesOrNoAttType)
    __rowsep._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4523, 4)
    __rowsep._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4575, 8)
    
    rowsep = property(__rowsep.value, __rowsep.set, None, None)

    
    # Attribute namest uses Python identifier namest
    __namest = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'namest'), 'namest', '__AbsentNamespace0_entryElemType_namest', pyxb.binding.datatypes.NMTOKEN)
    __namest._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4535, 4)
    __namest._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4570, 8)
    
    namest = property(__namest.value, __namest.set, None, None)

    
    # Attribute nameend uses Python identifier nameend
    __nameend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'nameend'), 'nameend', '__AbsentNamespace0_entryElemType_nameend', pyxb.binding.datatypes.NMTOKEN)
    __nameend._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4536, 4)
    __nameend._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4571, 8)
    
    nameend = property(__nameend.value, __nameend.set, None, None)

    
    # Attribute spanname uses Python identifier spanname
    __spanname = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'spanname'), 'spanname', '__AbsentNamespace0_entryElemType_spanname', pyxb.binding.datatypes.NMTOKEN)
    __spanname._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4537, 4)
    __spanname._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4572, 8)
    
    spanname = property(__spanname.value, __spanname.set, None, None)

    
    # Attribute morerows uses Python identifier morerows
    __morerows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'morerows'), 'morerows', '__AbsentNamespace0_entryElemType_morerows', pyxb.binding.datatypes.nonNegativeInteger, unicode_default=u'0')
    __morerows._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4585, 4)
    __morerows._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4573, 8)
    
    morerows = property(__morerows.value, __morerows.set, None, None)

    
    # Attribute rotate uses Python identifier rotate
    __rotate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'rotate'), 'rotate', '__AbsentNamespace0_entryElemType_rotate', yesOrNoAttType, unicode_default=u'0')
    __rotate._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4586, 4)
    __rotate._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4576, 8)
    
    rotate = property(__rotate.value, __rotate.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'valign'), 'valign', '__AbsentNamespace0_entryElemType_valign', valignAttType, unicode_default=u'top')
    __valign._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4587, 4)
    __valign._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4577, 8)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute warningRefs uses Python identifier warningRefs
    __warningRefs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'warningRefs'), 'warningRefs', '__AbsentNamespace0_entryElemType_warningRefs', pyxb.binding.datatypes.IDREFS)
    __warningRefs._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4595, 4)
    __warningRefs._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4582, 8)
    
    warningRefs = property(__warningRefs.value, __warningRefs.set, None, None)

    
    # Attribute cautionRefs uses Python identifier cautionRefs
    __cautionRefs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'cautionRefs'), 'cautionRefs', '__AbsentNamespace0_entryElemType_cautionRefs', pyxb.binding.datatypes.IDREFS)
    __cautionRefs._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4596, 4)
    __cautionRefs._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4583, 8)
    
    cautionRefs = property(__cautionRefs.value, __cautionRefs.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __dmRef.name() : __dmRef,
        __emphasis.name() : __emphasis,
        __functionalItemRef.name() : __functionalItemRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __verbatimText.name() : __verbatimText,
        __circuitBreakerRef.name() : __circuitBreakerRef,
        __controlIndicatorRef.name() : __controlIndicatorRef,
        __inlineSignificantData.name() : __inlineSignificantData,
        __quantity.name() : __quantity,
        __internalRef.name() : __internalRef,
        __changeInline.name() : __changeInline,
        __symbol.name() : __symbol,
        __footnote.name() : __footnote,
        __para.name() : __para,
        __sequentialList.name() : __sequentialList,
        __note.name() : __note,
        __randomList.name() : __randomList,
        __definitionList.name() : __definitionList,
        __footnoteRef.name() : __footnoteRef,
        __warning.name() : __warning,
        __caution.name() : __caution,
        __legend.name() : __legend
    })
    _AttributeMap.update({
        __id.name() : __id,
        __applicRefId.name() : __applicRefId,
        __colname.name() : __colname,
        __align.name() : __align,
        __charoff.name() : __charoff,
        __char.name() : __char,
        __colsep.name() : __colsep,
        __rowsep.name() : __rowsep,
        __namest.name() : __namest,
        __nameend.name() : __nameend,
        __spanname.name() : __spanname,
        __morerows.name() : __morerows,
        __rotate.name() : __rotate,
        __valign.name() : __valign,
        __warningRefs.name() : __warningRefs,
        __cautionRefs.name() : __cautionRefs
    })
Namespace.addCategoryObject('typeBinding', u'entryElemType', entryElemType)


# Complex type tfootElemType with content type ELEMENT_ONLY
class tfootElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type tfootElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tfootElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4598, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element colspec uses Python identifier colspec
    __colspec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'colspec'), 'colspec', '__AbsentNamespace0_tfootElemType_colspec', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4496, 4), )

    
    colspec = property(__colspec.value, __colspec.set, None, None)

    
    # Element row uses Python identifier row
    __row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'row'), 'row', '__AbsentNamespace0_tfootElemType_row', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4546, 4), )

    
    row = property(__row.value, __row.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'valign'), 'valign', '__AbsentNamespace0_tfootElemType_valign', valignAttType, unicode_default=u'top')
    __valign._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4587, 4)
    __valign._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4603, 8)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __colspec.name() : __colspec,
        __row.name() : __row
    })
    _AttributeMap.update({
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'tfootElemType', tfootElemType)


# Complex type tbodyElemType with content type ELEMENT_ONLY
class tbodyElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type tbodyElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tbodyElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4606, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element row uses Python identifier row
    __row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'row'), 'row', '__AbsentNamespace0_tbodyElemType_row', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4546, 4), )

    
    row = property(__row.value, __row.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'valign'), 'valign', '__AbsentNamespace0_tbodyElemType_valign', valignAttType, unicode_default=u'top')
    __valign._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4587, 4)
    __valign._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4610, 8)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __row.name() : __row
    })
    _AttributeMap.update({
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'tbodyElemType', tbodyElemType)


# Complex type thresholdIntervalElemType with content type MIXED
class thresholdIntervalElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type thresholdIntervalElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'thresholdIntervalElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4661, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute thresholdUnitOfMeasure uses Python identifier thresholdUnitOfMeasure
    __thresholdUnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'thresholdUnitOfMeasure'), 'thresholdUnitOfMeasure', '__AbsentNamespace0_thresholdIntervalElemType_thresholdUnitOfMeasure', thresholdUnitOfMeasureAttType, required=True)
    __thresholdUnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4664, 4)
    __thresholdUnitOfMeasure._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4662, 8)
    
    thresholdUnitOfMeasure = property(__thresholdUnitOfMeasure.value, __thresholdUnitOfMeasure.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __thresholdUnitOfMeasure.name() : __thresholdUnitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', u'thresholdIntervalElemType', thresholdIntervalElemType)


# Complex type zoneRefElemType with content type ELEMENT_ONLY
class zoneRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type zoneRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'zoneRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4769, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_zoneRefElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_zoneRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_zoneRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_zoneRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_zoneRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_zoneRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4775, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_zoneRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_zoneRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_zoneRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_zoneRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_zoneRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute lsarData uses Python identifier lsarData
    __lsarData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'lsarData'), 'lsarData', '__AbsentNamespace0_zoneRefElemType_lsarData', yesOrNoAttType, unicode_default=u'0')
    __lsarData._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4370, 4)
    __lsarData._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4776, 8)
    
    lsarData = property(__lsarData.value, __lsarData.set, None, None)

    
    # Attribute zoneNumber uses Python identifier zoneNumber
    __zoneNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'zoneNumber'), 'zoneNumber', '__AbsentNamespace0_zoneRefElemType_zoneNumber', pyxb.binding.datatypes.string)
    __zoneNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4781, 4)
    __zoneNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4774, 8)
    
    zoneNumber = property(__zoneNumber.value, __zoneNumber.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __lsarData.name() : __lsarData,
        __zoneNumber.name() : __zoneNumber
    })
Namespace.addCategoryObject('typeBinding', u'zoneRefElemType', zoneRefElemType)


# Complex type reqCondNoRefElemType with content type ELEMENT_ONLY
class reqCondNoRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqCondNoRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondNoRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4811, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element reqCond uses Python identifier reqCond
    __reqCond = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), 'reqCond', '__AbsentNamespace0_reqCondNoRefElemType_reqCond', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4), )

    
    reqCond = property(__reqCond.value, __reqCond.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_reqCondNoRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_reqCondNoRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_reqCondNoRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_reqCondNoRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4816, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_reqCondNoRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_reqCondNoRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_reqCondNoRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reqCondNoRefElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4815, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __reqCond.name() : __reqCond
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'reqCondNoRefElemType', reqCondNoRefElemType)


# Complex type reqCondElemType with content type MIXED
class reqCondElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqCondElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4821, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subScript uses Python identifier subScript
    __subScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subScript'), 'subScript', '__AbsentNamespace0_reqCondElemType_subScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4), )

    
    subScript = property(__subScript.value, __subScript.set, None, None)

    
    # Element superScript uses Python identifier superScript
    __superScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'superScript'), 'superScript', '__AbsentNamespace0_reqCondElemType_superScript', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4), )

    
    superScript = property(__superScript.value, __superScript.set, None, None)

    
    # Element indexFlag uses Python identifier indexFlag
    __indexFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), 'indexFlag', '__AbsentNamespace0_reqCondElemType_indexFlag', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4), )

    
    indexFlag = property(__indexFlag.value, __indexFlag.set, None, None)

    
    # Element acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__AbsentNamespace0_reqCondElemType_acronym', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4), )

    
    acronym = property(__acronym.value, __acronym.set, None, None)

    
    # Element acronymTerm uses Python identifier acronymTerm
    __acronymTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), 'acronymTerm', '__AbsentNamespace0_reqCondElemType_acronymTerm', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4), )

    
    acronymTerm = property(__acronymTerm.value, __acronymTerm.set, None, None)

    
    # Element internalRef uses Python identifier internalRef
    __internalRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), 'internalRef', '__AbsentNamespace0_reqCondElemType_internalRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4), )

    
    internalRef = property(__internalRef.value, __internalRef.set, None, None)

    
    # Element symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'symbol'), 'symbol', '__AbsentNamespace0_reqCondElemType_symbol', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4), )

    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Element footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), 'footnoteRef', '__AbsentNamespace0_reqCondElemType_footnoteRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4), )

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reqCondElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4825, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute reqCondCategory uses Python identifier reqCondCategory
    __reqCondCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reqCondCategory'), 'reqCondCategory', '__AbsentNamespace0_reqCondElemType_reqCondCategory', reqCondCategoryAttType)
    __reqCondCategory._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4840, 4)
    __reqCondCategory._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4826, 8)
    
    reqCondCategory = property(__reqCondCategory.value, __reqCondCategory.set, None, None)

    _ElementMap.update({
        __subScript.name() : __subScript,
        __superScript.name() : __superScript,
        __indexFlag.name() : __indexFlag,
        __acronym.name() : __acronym,
        __acronymTerm.name() : __acronymTerm,
        __internalRef.name() : __internalRef,
        __symbol.name() : __symbol,
        __footnoteRef.name() : __footnoteRef
    })
    _AttributeMap.update({
        __applicRefId.name() : __applicRefId,
        __reqCondCategory.name() : __reqCondCategory
    })
Namespace.addCategoryObject('typeBinding', u'reqCondElemType', reqCondElemType)


# Complex type reqCondDmElemType with content type ELEMENT_ONLY
class reqCondDmElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqCondDmElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondDmElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4945, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_reqCondDmElemType_dmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element reqCond uses Python identifier reqCond
    __reqCond = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), 'reqCond', '__AbsentNamespace0_reqCondDmElemType_reqCond', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4), )

    
    reqCond = property(__reqCond.value, __reqCond.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_reqCondDmElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_reqCondDmElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_reqCondDmElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_reqCondDmElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4951, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_reqCondDmElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_reqCondDmElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_reqCondDmElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reqCondDmElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4950, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __dmRef.name() : __dmRef,
        __reqCond.name() : __reqCond
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'reqCondDmElemType', reqCondDmElemType)


# Complex type reqCondCircuitBreakerElemType with content type ELEMENT_ONLY
class reqCondCircuitBreakerElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqCondCircuitBreakerElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondCircuitBreakerElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4956, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element circuitBreakerDescrGroup uses Python identifier circuitBreakerDescrGroup
    __circuitBreakerDescrGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup'), 'circuitBreakerDescrGroup', '__AbsentNamespace0_reqCondCircuitBreakerElemType_circuitBreakerDescrGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4206, 4), )

    
    circuitBreakerDescrGroup = property(__circuitBreakerDescrGroup.value, __circuitBreakerDescrGroup.set, None, None)

    
    # Element reqCond uses Python identifier reqCond
    __reqCond = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), 'reqCond', '__AbsentNamespace0_reqCondCircuitBreakerElemType_reqCond', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4), )

    
    reqCond = property(__reqCond.value, __reqCond.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_reqCondCircuitBreakerElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_reqCondCircuitBreakerElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_reqCondCircuitBreakerElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_reqCondCircuitBreakerElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4962, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_reqCondCircuitBreakerElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_reqCondCircuitBreakerElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_reqCondCircuitBreakerElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reqCondCircuitBreakerElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4961, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __circuitBreakerDescrGroup.name() : __circuitBreakerDescrGroup,
        __reqCond.name() : __reqCond
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'reqCondCircuitBreakerElemType', reqCondCircuitBreakerElemType)


# Complex type reqCondPmElemType with content type ELEMENT_ONLY
class reqCondPmElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqCondPmElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondPmElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4967, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_reqCondPmElemType_pmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element reqCond uses Python identifier reqCond
    __reqCond = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), 'reqCond', '__AbsentNamespace0_reqCondPmElemType_reqCond', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4), )

    
    reqCond = property(__reqCond.value, __reqCond.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_reqCondPmElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_reqCondPmElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_reqCondPmElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_reqCondPmElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4973, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_reqCondPmElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_reqCondPmElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_reqCondPmElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reqCondPmElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4972, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __pmRef.name() : __pmRef,
        __reqCond.name() : __reqCond
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'reqCondPmElemType', reqCondPmElemType)


# Complex type reqCondExternalPubElemType with content type ELEMENT_ONLY
class reqCondExternalPubElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqCondExternalPubElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqCondExternalPubElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4978, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_reqCondExternalPubElemType_externalPubRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Element reqCond uses Python identifier reqCond
    __reqCond = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), 'reqCond', '__AbsentNamespace0_reqCondExternalPubElemType_reqCond', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4), )

    
    reqCond = property(__reqCond.value, __reqCond.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_reqCondExternalPubElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_reqCondExternalPubElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_reqCondExternalPubElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_reqCondExternalPubElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4984, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_reqCondExternalPubElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_reqCondExternalPubElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_reqCondExternalPubElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reqCondExternalPubElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4983, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __externalPubRef.name() : __externalPubRef,
        __reqCond.name() : __reqCond
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'reqCondExternalPubElemType', reqCondExternalPubElemType)


# Complex type reqPersonsElemType with content type ELEMENT_ONLY
class reqPersonsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqPersonsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqPersonsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4989, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element personnel uses Python identifier personnel
    __personnel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'personnel'), 'personnel', '__AbsentNamespace0_reqPersonsElemType_personnel', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5000, 4), )

    
    personnel = property(__personnel.value, __personnel.set, None, None)

    
    # Element person uses Python identifier person
    __person = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'person'), 'person', '__AbsentNamespace0_reqPersonsElemType_person', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5042, 4), )

    
    person = property(__person.value, __person.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_reqPersonsElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_reqPersonsElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_reqPersonsElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_reqPersonsElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4995, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_reqPersonsElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_reqPersonsElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_reqPersonsElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_reqPersonsElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_reqPersonsElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_reqPersonsElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4994, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __personnel.name() : __personnel,
        __person.name() : __person
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'reqPersonsElemType', reqPersonsElemType)


# Complex type personnelElemType with content type ELEMENT_ONLY
class personnelElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type personnelElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'personnelElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5001, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element personCategory uses Python identifier personCategory
    __personCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'personCategory'), 'personCategory', '__AbsentNamespace0_personnelElemType_personCategory', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5013, 4), )

    
    personCategory = property(__personCategory.value, __personCategory.set, None, None)

    
    # Element personSkill uses Python identifier personSkill
    __personSkill = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'personSkill'), 'personSkill', '__AbsentNamespace0_personnelElemType_personSkill', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5021, 4), )

    
    personSkill = property(__personSkill.value, __personSkill.set, None, None)

    
    # Element trade uses Python identifier trade
    __trade = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'trade'), 'trade', '__AbsentNamespace0_personnelElemType_trade', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5028, 4), )

    
    trade = property(__trade.value, __trade.set, None, None)

    
    # Element estimatedTime uses Python identifier estimatedTime
    __estimatedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'estimatedTime'), 'estimatedTime', '__AbsentNamespace0_personnelElemType_estimatedTime', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5034, 4), )

    
    estimatedTime = property(__estimatedTime.value, __estimatedTime.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_personnelElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_personnelElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_personnelElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_personnelElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5008, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_personnelElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_personnelElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_personnelElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute numRequired uses Python identifier numRequired
    __numRequired = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'numRequired'), 'numRequired', '__AbsentNamespace0_personnelElemType_numRequired', pyxb.binding.datatypes.integer)
    __numRequired._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5041, 4)
    __numRequired._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5009, 8)
    
    numRequired = property(__numRequired.value, __numRequired.set, None, None)

    _ElementMap.update({
        __personCategory.name() : __personCategory,
        __personSkill.name() : __personSkill,
        __trade.name() : __trade,
        __estimatedTime.name() : __estimatedTime
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __numRequired.name() : __numRequired
    })
Namespace.addCategoryObject('typeBinding', u'personnelElemType', personnelElemType)


# Complex type personCategoryElemType with content type EMPTY
class personCategoryElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type personCategoryElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'personCategoryElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5014, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_personCategoryElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_personCategoryElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_personCategoryElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_personCategoryElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5016, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_personCategoryElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_personCategoryElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_personCategoryElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute personCategoryCode uses Python identifier personCategoryCode
    __personCategoryCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'personCategoryCode'), 'personCategoryCode', '__AbsentNamespace0_personCategoryElemType_personCategoryCode', pyxb.binding.datatypes.string, required=True)
    __personCategoryCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5020, 4)
    __personCategoryCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5015, 8)
    
    personCategoryCode = property(__personCategoryCode.value, __personCategoryCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __personCategoryCode.name() : __personCategoryCode
    })
Namespace.addCategoryObject('typeBinding', u'personCategoryElemType', personCategoryElemType)


# Complex type personSkillElemType with content type EMPTY
class personSkillElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type personSkillElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'personSkillElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5022, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_personSkillElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_personSkillElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_personSkillElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_personSkillElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5024, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_personSkillElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_personSkillElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_personSkillElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute skillLevelCode uses Python identifier skillLevelCode
    __skillLevelCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'skillLevelCode'), 'skillLevelCode', '__AbsentNamespace0_personSkillElemType_skillLevelCode', skillLevelCodeAttType, required=True)
    __skillLevelCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3737, 4)
    __skillLevelCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5023, 8)
    
    skillLevelCode = property(__skillLevelCode.value, __skillLevelCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __skillLevelCode.name() : __skillLevelCode
    })
Namespace.addCategoryObject('typeBinding', u'personSkillElemType', personSkillElemType)


# Complex type tradeElemType with content type MIXED
class tradeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type tradeElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tradeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5029, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_tradeElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_tradeElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_tradeElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_tradeElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5030, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_tradeElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_tradeElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_tradeElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'tradeElemType', tradeElemType)


# Complex type estimatedTimeElemType with content type MIXED
class estimatedTimeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type estimatedTimeElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'estimatedTimeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5035, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_estimatedTimeElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_estimatedTimeElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_estimatedTimeElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_estimatedTimeElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5037, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_estimatedTimeElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_estimatedTimeElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_estimatedTimeElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'unitOfMeasure'), 'unitOfMeasure', '__AbsentNamespace0_estimatedTimeElemType_unitOfMeasure', pyxb.binding.datatypes.string, required=True)
    __unitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4791, 4)
    __unitOfMeasure._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5036, 8)
    
    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __unitOfMeasure.name() : __unitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', u'estimatedTimeElemType', estimatedTimeElemType)


# Complex type personElemType with content type ELEMENT_ONLY
class personElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type personElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'personElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5043, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element personCategory uses Python identifier personCategory
    __personCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'personCategory'), 'personCategory', '__AbsentNamespace0_personElemType_personCategory', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5013, 4), )

    
    personCategory = property(__personCategory.value, __personCategory.set, None, None)

    
    # Element personSkill uses Python identifier personSkill
    __personSkill = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'personSkill'), 'personSkill', '__AbsentNamespace0_personElemType_personSkill', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5021, 4), )

    
    personSkill = property(__personSkill.value, __personSkill.set, None, None)

    
    # Element trade uses Python identifier trade
    __trade = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'trade'), 'trade', '__AbsentNamespace0_personElemType_trade', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5028, 4), )

    
    trade = property(__trade.value, __trade.set, None, None)

    
    # Element estimatedTime uses Python identifier estimatedTime
    __estimatedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'estimatedTime'), 'estimatedTime', '__AbsentNamespace0_personElemType_estimatedTime', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5034, 4), )

    
    estimatedTime = property(__estimatedTime.value, __estimatedTime.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_personElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_personElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_personElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_personElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5051, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_personElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_personElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_personElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute man uses Python identifier man
    __man = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'man'), 'man', '__AbsentNamespace0_personElemType_man', pyxb.binding.datatypes.NMTOKEN, required=True)
    __man._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5055, 4)
    __man._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5050, 8)
    
    man = property(__man.value, __man.set, None, None)

    _ElementMap.update({
        __personCategory.name() : __personCategory,
        __personSkill.name() : __personSkill,
        __trade.name() : __trade,
        __estimatedTime.name() : __estimatedTime
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __man.name() : __man
    })
Namespace.addCategoryObject('typeBinding', u'personElemType', personElemType)


# Complex type reqTechInfoElemType with content type ELEMENT_ONLY
class reqTechInfoElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqTechInfoElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5063, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dmRef uses Python identifier dmRef
    __dmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), 'dmRef', '__AbsentNamespace0_reqTechInfoElemType_dmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4), )

    
    dmRef = property(__dmRef.value, __dmRef.set, None, None)

    
    # Element pmRef uses Python identifier pmRef
    __pmRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), 'pmRef', '__AbsentNamespace0_reqTechInfoElemType_pmRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4), )

    
    pmRef = property(__pmRef.value, __pmRef.set, None, None)

    
    # Element externalPubRef uses Python identifier externalPubRef
    __externalPubRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), 'externalPubRef', '__AbsentNamespace0_reqTechInfoElemType_externalPubRef', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4), )

    
    externalPubRef = property(__externalPubRef.value, __externalPubRef.set, None, None)

    
    # Attribute reqTechInfoCategory uses Python identifier reqTechInfoCategory
    __reqTechInfoCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoCategory'), 'reqTechInfoCategory', '__AbsentNamespace0_reqTechInfoElemType_reqTechInfoCategory', reqTechInfoCategoryAttType, unicode_default=u'ti01')
    __reqTechInfoCategory._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5071, 4)
    __reqTechInfoCategory._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5069, 8)
    
    reqTechInfoCategory = property(__reqTechInfoCategory.value, __reqTechInfoCategory.set, None, None)

    _ElementMap.update({
        __dmRef.name() : __dmRef,
        __pmRef.name() : __pmRef,
        __externalPubRef.name() : __externalPubRef
    })
    _AttributeMap.update({
        __reqTechInfoCategory.name() : __reqTechInfoCategory
    })
Namespace.addCategoryObject('typeBinding', u'reqTechInfoElemType', reqTechInfoElemType)


# Complex type supportEquipDescrElemType with content type ELEMENT_ONLY
class supportEquipDescrElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type supportEquipDescrElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescrElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5191, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_supportEquipDescrElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element remarks uses Python identifier remarks
    __remarks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'remarks'), 'remarks', '__AbsentNamespace0_supportEquipDescrElemType_remarks', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4), )

    
    remarks = property(__remarks.value, __remarks.set, None, None)

    
    # Element catalogSeqNumberRef uses Python identifier catalogSeqNumberRef
    __catalogSeqNumberRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), 'catalogSeqNumberRef', '__AbsentNamespace0_supportEquipDescrElemType_catalogSeqNumberRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4), )

    
    catalogSeqNumberRef = property(__catalogSeqNumberRef.value, __catalogSeqNumberRef.set, None, None)

    
    # Element shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shortName'), 'shortName', '__AbsentNamespace0_supportEquipDescrElemType_shortName', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5210, 4), )

    
    shortName = property(__shortName.value, __shortName.set, None, None)

    
    # Element natoStockNumber uses Python identifier natoStockNumber
    __natoStockNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber'), 'natoStockNumber', '__AbsentNamespace0_supportEquipDescrElemType_natoStockNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5211, 4), )

    
    natoStockNumber = property(__natoStockNumber.value, __natoStockNumber.set, None, None)

    
    # Element identNumber uses Python identifier identNumber
    __identNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identNumber'), 'identNumber', '__AbsentNamespace0_supportEquipDescrElemType_identNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5228, 4), )

    
    identNumber = property(__identNumber.value, __identNumber.set, None, None)

    
    # Element toolRef uses Python identifier toolRef
    __toolRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'toolRef'), 'toolRef', '__AbsentNamespace0_supportEquipDescrElemType_toolRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5269, 4), )

    
    toolRef = property(__toolRef.value, __toolRef.set, None, None)

    
    # Element reqQuantity uses Python identifier reqQuantity
    __reqQuantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity'), 'reqQuantity', '__AbsentNamespace0_supportEquipDescrElemType_reqQuantity', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5286, 4), )

    
    reqQuantity = property(__reqQuantity.value, __reqQuantity.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_supportEquipDescrElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_supportEquipDescrElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_supportEquipDescrElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_supportEquipDescrElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5205, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_supportEquipDescrElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_supportEquipDescrElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_supportEquipDescrElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_supportEquipDescrElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_supportEquipDescrElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_supportEquipDescrElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5204, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __remarks.name() : __remarks,
        __catalogSeqNumberRef.name() : __catalogSeqNumberRef,
        __shortName.name() : __shortName,
        __natoStockNumber.name() : __natoStockNumber,
        __identNumber.name() : __identNumber,
        __toolRef.name() : __toolRef,
        __reqQuantity.name() : __reqQuantity
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'supportEquipDescrElemType', supportEquipDescrElemType)


# Complex type natoStockNumberElemType with content type MIXED
class natoStockNumberElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type natoStockNumberElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'natoStockNumberElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5212, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_natoStockNumberElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Element fullNatoStockNumber uses Python identifier fullNatoStockNumber
    __fullNatoStockNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fullNatoStockNumber'), 'fullNatoStockNumber', '__AbsentNamespace0_natoStockNumberElemType_fullNatoStockNumber', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5224, 4), )

    
    fullNatoStockNumber = property(__fullNatoStockNumber.value, __fullNatoStockNumber.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_natoStockNumberElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_natoStockNumberElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_natoStockNumberElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_natoStockNumberElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5220, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_natoStockNumberElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_natoStockNumberElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_natoStockNumberElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute natoSupplyClass uses Python identifier natoSupplyClass
    __natoSupplyClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'natoSupplyClass'), 'natoSupplyClass', '__AbsentNamespace0_natoStockNumberElemType_natoSupplyClass', pyxb.binding.datatypes.int)
    __natoSupplyClass._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5225, 4)
    __natoSupplyClass._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5217, 8)
    
    natoSupplyClass = property(__natoSupplyClass.value, __natoSupplyClass.set, None, None)

    
    # Attribute natoCodificationBureau uses Python identifier natoCodificationBureau
    __natoCodificationBureau = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'natoCodificationBureau'), 'natoCodificationBureau', '__AbsentNamespace0_natoStockNumberElemType_natoCodificationBureau', pyxb.binding.datatypes.int)
    __natoCodificationBureau._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5226, 4)
    __natoCodificationBureau._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5218, 8)
    
    natoCodificationBureau = property(__natoCodificationBureau.value, __natoCodificationBureau.set, None, None)

    
    # Attribute natoItemIdentNumberCore uses Python identifier natoItemIdentNumberCore
    __natoItemIdentNumberCore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'natoItemIdentNumberCore'), 'natoItemIdentNumberCore', '__AbsentNamespace0_natoStockNumberElemType_natoItemIdentNumberCore', pyxb.binding.datatypes.int)
    __natoItemIdentNumberCore._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5227, 4)
    __natoItemIdentNumberCore._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5219, 8)
    
    natoItemIdentNumberCore = property(__natoItemIdentNumberCore.value, __natoItemIdentNumberCore.set, None, None)

    _ElementMap.update({
        __refs.name() : __refs,
        __fullNatoStockNumber.name() : __fullNatoStockNumber
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __natoSupplyClass.name() : __natoSupplyClass,
        __natoCodificationBureau.name() : __natoCodificationBureau,
        __natoItemIdentNumberCore.name() : __natoItemIdentNumberCore
    })
Namespace.addCategoryObject('typeBinding', u'natoStockNumberElemType', natoStockNumberElemType)


# Complex type identNumberElemType with content type ELEMENT_ONLY
class identNumberElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type identNumberElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'identNumberElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5229, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_identNumberElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Element manufacturerCode uses Python identifier manufacturerCode
    __manufacturerCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'manufacturerCode'), 'manufacturerCode', '__AbsentNamespace0_identNumberElemType_manufacturerCode', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5237, 4), )

    
    manufacturerCode = property(__manufacturerCode.value, __manufacturerCode.set, None, None)

    
    # Element partAndSerialNumber uses Python identifier partAndSerialNumber
    __partAndSerialNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'partAndSerialNumber'), 'partAndSerialNumber', '__AbsentNamespace0_identNumberElemType_partAndSerialNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5243, 4), )

    
    partAndSerialNumber = property(__partAndSerialNumber.value, __partAndSerialNumber.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_identNumberElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_identNumberElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_identNumberElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __refs.name() : __refs,
        __manufacturerCode.name() : __manufacturerCode,
        __partAndSerialNumber.name() : __partAndSerialNumber
    })
    _AttributeMap.update({
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'identNumberElemType', identNumberElemType)


# Complex type manufacturerCodeElemType with content type MIXED
class manufacturerCodeElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type manufacturerCodeElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'manufacturerCodeElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5238, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_manufacturerCodeElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_manufacturerCodeElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_manufacturerCodeElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_manufacturerCodeElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5239, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_manufacturerCodeElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_manufacturerCodeElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_manufacturerCodeElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'manufacturerCodeElemType', manufacturerCodeElemType)


# Complex type partNumberElemType with content type MIXED
class partNumberElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type partNumberElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'partNumberElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5251, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_partNumberElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_partNumberElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_partNumberElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_partNumberElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5252, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_partNumberElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_partNumberElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_partNumberElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'partNumberElemType', partNumberElemType)


# Complex type serialNumberElemType with content type EMPTY
class serialNumberElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type serialNumberElemType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'serialNumberElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5257, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute serialNumberForm uses Python identifier serialNumberForm
    __serialNumberForm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'serialNumberForm'), 'serialNumberForm', '__AbsentNamespace0_serialNumberElemType_serialNumberForm', serialNumberFormAttType, required=True)
    __serialNumberForm._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5261, 4)
    __serialNumberForm._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5258, 8)
    
    serialNumberForm = property(__serialNumberForm.value, __serialNumberForm.set, None, None)

    
    # Attribute serialNumberValue uses Python identifier serialNumberValue
    __serialNumberValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'serialNumberValue'), 'serialNumberValue', '__AbsentNamespace0_serialNumberElemType_serialNumberValue', pyxb.binding.datatypes.string, required=True)
    __serialNumberValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5268, 4)
    __serialNumberValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5259, 8)
    
    serialNumberValue = property(__serialNumberValue.value, __serialNumberValue.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __serialNumberForm.name() : __serialNumberForm,
        __serialNumberValue.name() : __serialNumberValue
    })
Namespace.addCategoryObject('typeBinding', u'serialNumberElemType', serialNumberElemType)


# Complex type toolRefElemType with content type ELEMENT_ONLY
class toolRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type toolRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'toolRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5270, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_toolRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_toolRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_toolRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_toolRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_toolRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5278, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_toolRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_toolRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_toolRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_toolRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_toolRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute manufacturerCodeValue uses Python identifier manufacturerCodeValue
    __manufacturerCodeValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'manufacturerCodeValue'), 'manufacturerCodeValue', '__AbsentNamespace0_toolRefElemType_manufacturerCodeValue', pyxb.binding.datatypes.string)
    __manufacturerCodeValue._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1308, 4)
    __manufacturerCodeValue._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5275, 8)
    
    manufacturerCodeValue = property(__manufacturerCodeValue.value, __manufacturerCodeValue.set, None, None)

    
    # Attribute toolNumber uses Python identifier toolNumber
    __toolNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'toolNumber'), 'toolNumber', '__AbsentNamespace0_toolRefElemType_toolNumber', pyxb.binding.datatypes.string, required=True)
    __toolNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5283, 4)
    __toolNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5274, 8)
    
    toolNumber = property(__toolNumber.value, __toolNumber.set, None, None)

    
    # Attribute specific uses Python identifier specific
    __specific = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'specific'), 'specific', '__AbsentNamespace0_toolRefElemType_specific', yesOrNoAttType, unicode_default=u'1')
    __specific._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5284, 4)
    __specific._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5276, 8)
    
    specific = property(__specific.value, __specific.set, None, None)

    
    # Attribute toolAltFlag uses Python identifier toolAltFlag
    __toolAltFlag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'toolAltFlag'), 'toolAltFlag', '__AbsentNamespace0_toolRefElemType_toolAltFlag', yesOrNoAttType, unicode_default=u'0')
    __toolAltFlag._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5285, 4)
    __toolAltFlag._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5277, 8)
    
    toolAltFlag = property(__toolAltFlag.value, __toolAltFlag.set, None, None)

    _ElementMap.update({
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __manufacturerCodeValue.name() : __manufacturerCodeValue,
        __toolNumber.name() : __toolNumber,
        __specific.name() : __specific,
        __toolAltFlag.name() : __toolAltFlag
    })
Namespace.addCategoryObject('typeBinding', u'toolRefElemType', toolRefElemType)


# Complex type reqQuantityElemType with content type MIXED
class reqQuantityElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type reqQuantityElemType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reqQuantityElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5287, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_reqQuantityElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_reqQuantityElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_reqQuantityElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'unitOfMeasure'), 'unitOfMeasure', '__AbsentNamespace0_reqQuantityElemType_unitOfMeasure', pyxb.binding.datatypes.string)
    __unitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4791, 4)
    __unitOfMeasure._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5288, 8)
    
    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __unitOfMeasure.name() : __unitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', u'reqQuantityElemType', reqQuantityElemType)


# Complex type supplyDescrElemType with content type ELEMENT_ONLY
class supplyDescrElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type supplyDescrElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'supplyDescrElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5307, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_supplyDescrElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element remarks uses Python identifier remarks
    __remarks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'remarks'), 'remarks', '__AbsentNamespace0_supplyDescrElemType_remarks', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4), )

    
    remarks = property(__remarks.value, __remarks.set, None, None)

    
    # Element catalogSeqNumberRef uses Python identifier catalogSeqNumberRef
    __catalogSeqNumberRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), 'catalogSeqNumberRef', '__AbsentNamespace0_supplyDescrElemType_catalogSeqNumberRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4), )

    
    catalogSeqNumberRef = property(__catalogSeqNumberRef.value, __catalogSeqNumberRef.set, None, None)

    
    # Element shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shortName'), 'shortName', '__AbsentNamespace0_supplyDescrElemType_shortName', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5210, 4), )

    
    shortName = property(__shortName.value, __shortName.set, None, None)

    
    # Element natoStockNumber uses Python identifier natoStockNumber
    __natoStockNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber'), 'natoStockNumber', '__AbsentNamespace0_supplyDescrElemType_natoStockNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5211, 4), )

    
    natoStockNumber = property(__natoStockNumber.value, __natoStockNumber.set, None, None)

    
    # Element identNumber uses Python identifier identNumber
    __identNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identNumber'), 'identNumber', '__AbsentNamespace0_supplyDescrElemType_identNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5228, 4), )

    
    identNumber = property(__identNumber.value, __identNumber.set, None, None)

    
    # Element reqQuantity uses Python identifier reqQuantity
    __reqQuantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity'), 'reqQuantity', '__AbsentNamespace0_supplyDescrElemType_reqQuantity', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5286, 4), )

    
    reqQuantity = property(__reqQuantity.value, __reqQuantity.set, None, None)

    
    # Element supplyRqmtRef uses Python identifier supplyRqmtRef
    __supplyRqmtRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'supplyRqmtRef'), 'supplyRqmtRef', '__AbsentNamespace0_supplyDescrElemType_supplyRqmtRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5326, 4), )

    
    supplyRqmtRef = property(__supplyRqmtRef.value, __supplyRqmtRef.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_supplyDescrElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_supplyDescrElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_supplyDescrElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_supplyDescrElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5321, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_supplyDescrElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_supplyDescrElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_supplyDescrElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_supplyDescrElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_supplyDescrElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_supplyDescrElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5320, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __remarks.name() : __remarks,
        __catalogSeqNumberRef.name() : __catalogSeqNumberRef,
        __shortName.name() : __shortName,
        __natoStockNumber.name() : __natoStockNumber,
        __identNumber.name() : __identNumber,
        __reqQuantity.name() : __reqQuantity,
        __supplyRqmtRef.name() : __supplyRqmtRef
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'supplyDescrElemType', supplyDescrElemType)


# Complex type supplyRqmtRefElemType with content type ELEMENT_ONLY
class supplyRqmtRefElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type supplyRqmtRefElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'supplyRqmtRefElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5327, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element refs uses Python identifier refs
    __refs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'refs'), 'refs', '__AbsentNamespace0_supplyRqmtRefElemType_refs', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4), )

    
    refs = property(__refs.value, __refs.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_supplyRqmtRefElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_supplyRqmtRefElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_supplyRqmtRefElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_supplyRqmtRefElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5332, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_supplyRqmtRefElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_supplyRqmtRefElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_supplyRqmtRefElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_supplyRqmtRefElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_supplyRqmtRefElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute supplyRqmtNumber uses Python identifier supplyRqmtNumber
    __supplyRqmtNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'supplyRqmtNumber'), 'supplyRqmtNumber', '__AbsentNamespace0_supplyRqmtRefElemType_supplyRqmtNumber', pyxb.binding.datatypes.string, required=True)
    __supplyRqmtNumber._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5337, 4)
    __supplyRqmtNumber._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5331, 8)
    
    supplyRqmtNumber = property(__supplyRqmtNumber.value, __supplyRqmtNumber.set, None, None)

    _ElementMap.update({
        __refs.name() : __refs
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __supplyRqmtNumber.name() : __supplyRqmtNumber
    })
Namespace.addCategoryObject('typeBinding', u'supplyRqmtRefElemType', supplyRqmtRefElemType)


# Complex type spareDescrElemType with content type ELEMENT_ONLY
class spareDescrElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type spareDescrElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'spareDescrElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5354, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element functionalItemRef uses Python identifier functionalItemRef
    __functionalItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), 'functionalItemRef', '__AbsentNamespace0_spareDescrElemType_functionalItemRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4), )

    
    functionalItemRef = property(__functionalItemRef.value, __functionalItemRef.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__AbsentNamespace0_spareDescrElemType_name', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element remarks uses Python identifier remarks
    __remarks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'remarks'), 'remarks', '__AbsentNamespace0_spareDescrElemType_remarks', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4), )

    
    remarks = property(__remarks.value, __remarks.set, None, None)

    
    # Element catalogSeqNumberRef uses Python identifier catalogSeqNumberRef
    __catalogSeqNumberRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), 'catalogSeqNumberRef', '__AbsentNamespace0_spareDescrElemType_catalogSeqNumberRef', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4), )

    
    catalogSeqNumberRef = property(__catalogSeqNumberRef.value, __catalogSeqNumberRef.set, None, None)

    
    # Element shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shortName'), 'shortName', '__AbsentNamespace0_spareDescrElemType_shortName', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5210, 4), )

    
    shortName = property(__shortName.value, __shortName.set, None, None)

    
    # Element natoStockNumber uses Python identifier natoStockNumber
    __natoStockNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber'), 'natoStockNumber', '__AbsentNamespace0_spareDescrElemType_natoStockNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5211, 4), )

    
    natoStockNumber = property(__natoStockNumber.value, __natoStockNumber.set, None, None)

    
    # Element identNumber uses Python identifier identNumber
    __identNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'identNumber'), 'identNumber', '__AbsentNamespace0_spareDescrElemType_identNumber', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5228, 4), )

    
    identNumber = property(__identNumber.value, __identNumber.set, None, None)

    
    # Element reqQuantity uses Python identifier reqQuantity
    __reqQuantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity'), 'reqQuantity', '__AbsentNamespace0_spareDescrElemType_reqQuantity', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5286, 4), )

    
    reqQuantity = property(__reqQuantity.value, __reqQuantity.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_spareDescrElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_spareDescrElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_spareDescrElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_spareDescrElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5368, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_spareDescrElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_spareDescrElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_spareDescrElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_spareDescrElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_spareDescrElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_spareDescrElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5367, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    _ElementMap.update({
        __functionalItemRef.name() : __functionalItemRef,
        __name.name() : __name,
        __remarks.name() : __remarks,
        __catalogSeqNumberRef.name() : __catalogSeqNumberRef,
        __shortName.name() : __shortName,
        __natoStockNumber.name() : __natoStockNumber,
        __identNumber.name() : __identNumber,
        __reqQuantity.name() : __reqQuantity
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId
    })
Namespace.addCategoryObject('typeBinding', u'spareDescrElemType', spareDescrElemType)


# Complex type mainProcedureElemType with content type ELEMENT_ONLY
class mainProcedureElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type mainProcedureElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'mainProcedureElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5396, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element figure uses Python identifier figure
    __figure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'figure'), 'figure', '__AbsentNamespace0_mainProcedureElemType_figure', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4), )

    
    figure = property(__figure.value, __figure.set, None, None)

    
    # Element multimedia uses Python identifier multimedia
    __multimedia = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'multimedia'), 'multimedia', '__AbsentNamespace0_mainProcedureElemType_multimedia', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4385, 4), )

    
    multimedia = property(__multimedia.value, __multimedia.set, None, None)

    
    # Element foldout uses Python identifier foldout
    __foldout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'foldout'), 'foldout', '__AbsentNamespace0_mainProcedureElemType_foldout', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4449, 4), )

    
    foldout = property(__foldout.value, __foldout.set, None, None)

    
    # Element table uses Python identifier table
    __table = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__AbsentNamespace0_mainProcedureElemType_table', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4), )

    
    table = property(__table.value, __table.set, None, None)

    
    # Element proceduralStep uses Python identifier proceduralStep
    __proceduralStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'proceduralStep'), 'proceduralStep', '__AbsentNamespace0_mainProcedureElemType_proceduralStep', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5406, 4), )

    
    proceduralStep = property(__proceduralStep.value, __proceduralStep.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_mainProcedureElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_mainProcedureElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_mainProcedureElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_mainProcedureElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5401, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_mainProcedureElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_mainProcedureElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_mainProcedureElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute skillLevelCode uses Python identifier skillLevelCode
    __skillLevelCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'skillLevelCode'), 'skillLevelCode', '__AbsentNamespace0_mainProcedureElemType_skillLevelCode', skillLevelCodeAttType)
    __skillLevelCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3737, 4)
    __skillLevelCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5609, 8)
    
    skillLevelCode = property(__skillLevelCode.value, __skillLevelCode.set, None, None)

    
    # Attribute independentCheck uses Python identifier independentCheck
    __independentCheck = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'independentCheck'), 'independentCheck', '__AbsentNamespace0_mainProcedureElemType_independentCheck', pyxb.binding.datatypes.string)
    __independentCheck._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5611, 4)
    __independentCheck._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5608, 8)
    
    independentCheck = property(__independentCheck.value, __independentCheck.set, None, None)

    _ElementMap.update({
        __figure.name() : __figure,
        __multimedia.name() : __multimedia,
        __foldout.name() : __foldout,
        __table.name() : __table,
        __proceduralStep.name() : __proceduralStep
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __skillLevelCode.name() : __skillLevelCode,
        __independentCheck.name() : __independentCheck
    })
Namespace.addCategoryObject('typeBinding', u'mainProcedureElemType', mainProcedureElemType)


# Complex type proceduralStepElemType with content type ELEMENT_ONLY
class proceduralStepElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type proceduralStepElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'proceduralStepElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5407, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'para'), 'para', '__AbsentNamespace0_proceduralStepElemType_para', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4), )

    
    para = property(__para.value, __para.set, None, None)

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__AbsentNamespace0_proceduralStepElemType_title', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'note'), 'note', '__AbsentNamespace0_proceduralStepElemType_note', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element warning uses Python identifier warning
    __warning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'warning'), 'warning', '__AbsentNamespace0_proceduralStepElemType_warning', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4), )

    
    warning = property(__warning.value, __warning.set, None, None)

    
    # Element caution uses Python identifier caution
    __caution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'caution'), 'caution', '__AbsentNamespace0_proceduralStepElemType_caution', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4), )

    
    caution = property(__caution.value, __caution.set, None, None)

    
    # Element figure uses Python identifier figure
    __figure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'figure'), 'figure', '__AbsentNamespace0_proceduralStepElemType_figure', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4), )

    
    figure = property(__figure.value, __figure.set, None, None)

    
    # Element circuitBreakerDescrGroup uses Python identifier circuitBreakerDescrGroup
    __circuitBreakerDescrGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup'), 'circuitBreakerDescrGroup', '__AbsentNamespace0_proceduralStepElemType_circuitBreakerDescrGroup', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4206, 4), )

    
    circuitBreakerDescrGroup = property(__circuitBreakerDescrGroup.value, __circuitBreakerDescrGroup.set, None, None)

    
    # Element multimedia uses Python identifier multimedia
    __multimedia = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'multimedia'), 'multimedia', '__AbsentNamespace0_proceduralStepElemType_multimedia', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4385, 4), )

    
    multimedia = property(__multimedia.value, __multimedia.set, None, None)

    
    # Element foldout uses Python identifier foldout
    __foldout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'foldout'), 'foldout', '__AbsentNamespace0_proceduralStepElemType_foldout', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4449, 4), )

    
    foldout = property(__foldout.value, __foldout.set, None, None)

    
    # Element table uses Python identifier table
    __table = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__AbsentNamespace0_proceduralStepElemType_table', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4), )

    
    table = property(__table.value, __table.set, None, None)

    
    # Element proceduralStep uses Python identifier proceduralStep
    __proceduralStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'proceduralStep'), 'proceduralStep', '__AbsentNamespace0_proceduralStepElemType_proceduralStep', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5406, 4), )

    
    proceduralStep = property(__proceduralStep.value, __proceduralStep.set, None, None)

    
    # Element caption uses Python identifier caption
    __caption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'caption'), 'caption', '__AbsentNamespace0_proceduralStepElemType_caption', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5443, 4), )

    
    caption = property(__caption.value, __caption.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_proceduralStepElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_proceduralStepElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_proceduralStepElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_proceduralStepElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5434, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_proceduralStepElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_proceduralStepElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_proceduralStepElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute authorityName uses Python identifier authorityName
    __authorityName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityName'), 'authorityName', '__AbsentNamespace0_proceduralStepElemType_authorityName', pyxb.binding.datatypes.string)
    __authorityName._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 695, 4)
    __authorityName._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 692, 8)
    
    authorityName = property(__authorityName.value, __authorityName.set, None, None)

    
    # Attribute authorityDocument uses Python identifier authorityDocument
    __authorityDocument = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'authorityDocument'), 'authorityDocument', '__AbsentNamespace0_proceduralStepElemType_authorityDocument', pyxb.binding.datatypes.string)
    __authorityDocument._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 696, 4)
    __authorityDocument._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 693, 8)
    
    authorityDocument = property(__authorityDocument.value, __authorityDocument.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_proceduralStepElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5432, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute skillLevelCode uses Python identifier skillLevelCode
    __skillLevelCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'skillLevelCode'), 'skillLevelCode', '__AbsentNamespace0_proceduralStepElemType_skillLevelCode', skillLevelCodeAttType)
    __skillLevelCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3737, 4)
    __skillLevelCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5609, 8)
    
    skillLevelCode = property(__skillLevelCode.value, __skillLevelCode.set, None, None)

    
    # Attribute warningRefs uses Python identifier warningRefs
    __warningRefs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'warningRefs'), 'warningRefs', '__AbsentNamespace0_proceduralStepElemType_warningRefs', pyxb.binding.datatypes.IDREFS)
    __warningRefs._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4595, 4)
    __warningRefs._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5437, 8)
    
    warningRefs = property(__warningRefs.value, __warningRefs.set, None, None)

    
    # Attribute cautionRefs uses Python identifier cautionRefs
    __cautionRefs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'cautionRefs'), 'cautionRefs', '__AbsentNamespace0_proceduralStepElemType_cautionRefs', pyxb.binding.datatypes.IDREFS)
    __cautionRefs._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4596, 4)
    __cautionRefs._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5433, 8)
    
    cautionRefs = property(__cautionRefs.value, __cautionRefs.set, None, None)

    
    # Attribute itemCharacteristic uses Python identifier itemCharacteristic
    __itemCharacteristic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'itemCharacteristic'), 'itemCharacteristic', '__AbsentNamespace0_proceduralStepElemType_itemCharacteristic', itemCharacteristicAttType, unicode_default=u'ic00')
    __itemCharacteristic._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5600, 4)
    __itemCharacteristic._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5435, 8)
    
    itemCharacteristic = property(__itemCharacteristic.value, __itemCharacteristic.set, None, None)

    
    # Attribute keepWithNext uses Python identifier keepWithNext
    __keepWithNext = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'keepWithNext'), 'keepWithNext', '__AbsentNamespace0_proceduralStepElemType_keepWithNext', yesOrNoAttType, unicode_default=u'0')
    __keepWithNext._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5606, 4)
    __keepWithNext._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5436, 8)
    
    keepWithNext = property(__keepWithNext.value, __keepWithNext.set, None, None)

    
    # Attribute independentCheck uses Python identifier independentCheck
    __independentCheck = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'independentCheck'), 'independentCheck', '__AbsentNamespace0_proceduralStepElemType_independentCheck', pyxb.binding.datatypes.string)
    __independentCheck._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5611, 4)
    __independentCheck._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5608, 8)
    
    independentCheck = property(__independentCheck.value, __independentCheck.set, None, None)

    _ElementMap.update({
        __para.name() : __para,
        __title.name() : __title,
        __note.name() : __note,
        __warning.name() : __warning,
        __caution.name() : __caution,
        __figure.name() : __figure,
        __circuitBreakerDescrGroup.name() : __circuitBreakerDescrGroup,
        __multimedia.name() : __multimedia,
        __foldout.name() : __foldout,
        __table.name() : __table,
        __proceduralStep.name() : __proceduralStep,
        __caption.name() : __caption
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __authorityName.name() : __authorityName,
        __authorityDocument.name() : __authorityDocument,
        __applicRefId.name() : __applicRefId,
        __skillLevelCode.name() : __skillLevelCode,
        __warningRefs.name() : __warningRefs,
        __cautionRefs.name() : __cautionRefs,
        __itemCharacteristic.name() : __itemCharacteristic,
        __keepWithNext.name() : __keepWithNext,
        __independentCheck.name() : __independentCheck
    })
Namespace.addCategoryObject('typeBinding', u'proceduralStepElemType', proceduralStepElemType)


# Complex type captionElemType with content type ELEMENT_ONLY
class captionElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type captionElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'captionElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5444, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element captionLine uses Python identifier captionLine
    __captionLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'captionLine'), 'captionLine', '__AbsentNamespace0_captionElemType_captionLine', True, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5460, 4), )

    
    captionLine = property(__captionLine.value, __captionLine.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_captionElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_captionElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_captionElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_captionElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5456, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_captionElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_captionElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_captionElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    
    # Attribute applicRefId uses Python identifier applicRefId
    __applicRefId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'applicRefId'), 'applicRefId', '__AbsentNamespace0_captionElemType_applicRefId', pyxb.binding.datatypes.IDREF)
    __applicRefId._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 750, 4)
    __applicRefId._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5455, 8)
    
    applicRefId = property(__applicRefId.value, __applicRefId.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__AbsentNamespace0_captionElemType_color', colorAttType, unicode_default=u'co09')
    __color._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5466, 4)
    __color._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5448, 8)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute captionWidth uses Python identifier captionWidth
    __captionWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'captionWidth'), 'captionWidth', '__AbsentNamespace0_captionElemType_captionWidth', pyxb.binding.datatypes.string)
    __captionWidth._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5571, 4)
    __captionWidth._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5449, 8)
    
    captionWidth = property(__captionWidth.value, __captionWidth.set, None, None)

    
    # Attribute captionHeight uses Python identifier captionHeight
    __captionHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'captionHeight'), 'captionHeight', '__AbsentNamespace0_captionElemType_captionHeight', pyxb.binding.datatypes.string)
    __captionHeight._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5572, 4)
    __captionHeight._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5450, 8)
    
    captionHeight = property(__captionHeight.value, __captionHeight.set, None, None)

    
    # Attribute systemIdentCode uses Python identifier systemIdentCode
    __systemIdentCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'systemIdentCode'), 'systemIdentCode', '__AbsentNamespace0_captionElemType_systemIdentCode', pyxb.binding.datatypes.string)
    __systemIdentCode._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5573, 4)
    __systemIdentCode._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5451, 8)
    
    systemIdentCode = property(__systemIdentCode.value, __systemIdentCode.set, None, None)

    
    # Attribute alignCaption uses Python identifier alignCaption
    __alignCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'alignCaption'), 'alignCaption', '__AbsentNamespace0_captionElemType_alignCaption', alignCaptionAttType, unicode_default=u'left')
    __alignCaption._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5574, 4)
    __alignCaption._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5452, 8)
    
    alignCaption = property(__alignCaption.value, __alignCaption.set, None, None)

    
    # Attribute tableOfContentType uses Python identifier tableOfContentType
    __tableOfContentType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'tableOfContentType'), 'tableOfContentType', '__AbsentNamespace0_captionElemType_tableOfContentType', tableOfContentTypeAttType, unicode_default=u'none')
    __tableOfContentType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5582, 4)
    __tableOfContentType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5453, 8)
    
    tableOfContentType = property(__tableOfContentType.value, __tableOfContentType.set, None, None)

    
    # Attribute captionType uses Python identifier captionType
    __captionType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'captionType'), 'captionType', '__AbsentNamespace0_captionElemType_captionType', captionTypeAttType, unicode_default=u'primary')
    __captionType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5593, 4)
    __captionType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5454, 8)
    
    captionType = property(__captionType.value, __captionType.set, None, None)

    _ElementMap.update({
        __captionLine.name() : __captionLine
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds,
        __applicRefId.name() : __applicRefId,
        __color.name() : __color,
        __captionWidth.name() : __captionWidth,
        __captionHeight.name() : __captionHeight,
        __systemIdentCode.name() : __systemIdentCode,
        __alignCaption.name() : __alignCaption,
        __tableOfContentType.name() : __tableOfContentType,
        __captionType.name() : __captionType
    })
Namespace.addCategoryObject('typeBinding', u'captionElemType', captionElemType)


# Complex type closeRqmtsElemType with content type ELEMENT_ONLY
class closeRqmtsElemType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type closeRqmtsElemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'closeRqmtsElemType')
    _XSDLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5613, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element reqCondGroup uses Python identifier reqCondGroup
    __reqCondGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reqCondGroup'), 'reqCondGroup', '__AbsentNamespace0_closeRqmtsElemType_reqCondGroup', False, pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4795, 4), )

    
    reqCondGroup = property(__reqCondGroup.value, __reqCondGroup.set, None, None)

    
    # Attribute securityClassification uses Python identifier securityClassification
    __securityClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'securityClassification'), 'securityClassification', '__AbsentNamespace0_closeRqmtsElemType_securityClassification', securityClassificationAttType)
    __securityClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 282, 4)
    __securityClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 652, 8)
    
    securityClassification = property(__securityClassification.value, __securityClassification.set, None, None)

    
    # Attribute commercialClassification uses Python identifier commercialClassification
    __commercialClassification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'commercialClassification'), 'commercialClassification', '__AbsentNamespace0_closeRqmtsElemType_commercialClassification', commercialClassificationAttType)
    __commercialClassification._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 390, 4)
    __commercialClassification._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 387, 8)
    
    commercialClassification = property(__commercialClassification.value, __commercialClassification.set, None, None)

    
    # Attribute caveat uses Python identifier caveat
    __caveat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'caveat'), 'caveat', '__AbsentNamespace0_closeRqmtsElemType_caveat', caveatAttType)
    __caveat._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 494, 4)
    __caveat._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 388, 8)
    
    caveat = property(__caveat.value, __caveat.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'id'), 'id', '__AbsentNamespace0_closeRqmtsElemType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 630, 4)
    __id._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5617, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeType'), 'changeType', '__AbsentNamespace0_closeRqmtsElemType_changeType', changeTypeAttType)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 636, 4)
    __changeType._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 632, 8)
    
    changeType = property(__changeType.value, __changeType.set, None, None)

    
    # Attribute changeMark uses Python identifier changeMark
    __changeMark = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'changeMark'), 'changeMark', '__AbsentNamespace0_closeRqmtsElemType_changeMark', yesOrNoAttType)
    __changeMark._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 644, 4)
    __changeMark._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 633, 8)
    
    changeMark = property(__changeMark.value, __changeMark.set, None, None)

    
    # Attribute reasonForUpdateRefIds uses Python identifier reasonForUpdateRefIds
    __reasonForUpdateRefIds = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdateRefIds'), 'reasonForUpdateRefIds', '__AbsentNamespace0_closeRqmtsElemType_reasonForUpdateRefIds', pyxb.binding.datatypes.IDREFS)
    __reasonForUpdateRefIds._DeclarationLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 650, 4)
    __reasonForUpdateRefIds._UseLocation = pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 634, 8)
    
    reasonForUpdateRefIds = property(__reasonForUpdateRefIds.value, __reasonForUpdateRefIds.set, None, None)

    _ElementMap.update({
        __reqCondGroup.name() : __reqCondGroup
    })
    _AttributeMap.update({
        __securityClassification.name() : __securityClassification,
        __commercialClassification.name() : __commercialClassification,
        __caveat.name() : __caveat,
        __id.name() : __id,
        __changeType.name() : __changeType,
        __changeMark.name() : __changeMark,
        __reasonForUpdateRefIds.name() : __reasonForUpdateRefIds
    })
Namespace.addCategoryObject('typeBinding', u'closeRqmtsElemType', closeRqmtsElemType)


techName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'techName'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 238, 4))
Namespace.addCategoryObject('elementBinding', techName.name().localName(), techName)

infoName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'infoName'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 239, 4))
Namespace.addCategoryObject('elementBinding', infoName.name().localName(), infoName)

subScript = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4))
Namespace.addCategoryObject('elementBinding', subScript.name().localName(), subScript)

superScript = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4))
Namespace.addCategoryObject('elementBinding', superScript.name().localName(), superScript)

pmTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmTitle'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 941, 4))
Namespace.addCategoryObject('elementBinding', pmTitle.name().localName(), pmTitle)

enterpriseName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enterpriseName'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 950, 4))
Namespace.addCategoryObject('elementBinding', enterpriseName.name().localName(), enterpriseName)

shortPmTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortPmTitle'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 963, 4))
Namespace.addCategoryObject('elementBinding', shortPmTitle.name().localName(), shortPmTitle)

authorityInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityInfo'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3647, 4))
Namespace.addCategoryObject('elementBinding', authorityInfo.name().localName(), authorityInfo)

techPubBase = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'techPubBase'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3648, 4))
Namespace.addCategoryObject('elementBinding', techPubBase.name().localName(), techPubBase)

excludedModification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'excludedModification'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3663, 4))
Namespace.addCategoryObject('elementBinding', excludedModification.name().localName(), excludedModification)

additionalModification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'additionalModification'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3664, 4))
Namespace.addCategoryObject('elementBinding', additionalModification.name().localName(), additionalModification)

modificationTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'modificationTitle'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3682, 4))
Namespace.addCategoryObject('elementBinding', modificationTitle.name().localName(), modificationTitle)

authorityNotes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityNotes'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3692, 4))
Namespace.addCategoryObject('elementBinding', authorityNotes.name().localName(), authorityNotes)

functionalItemCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemCode'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3732, 4))
Namespace.addCategoryObject('elementBinding', functionalItemCode.name().localName(), functionalItemCode)

workArea = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'workArea'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4782, 4))
Namespace.addCategoryObject('elementBinding', workArea.name().localName(), workArea)

shortName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortName'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5210, 4))
Namespace.addCategoryObject('elementBinding', shortName.name().localName(), shortName)

fullNatoStockNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fullNatoStockNumber'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5224, 4))
Namespace.addCategoryObject('elementBinding', fullNatoStockNumber.name().localName(), fullNatoStockNumber)

dmodule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmodule'), dmoduleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 28, 4))
Namespace.addCategoryObject('elementBinding', dmodule.name().localName(), dmodule)

identAndStatusSection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identAndStatusSection'), identAndStatusSectionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 37, 4))
Namespace.addCategoryObject('elementBinding', identAndStatusSection.name().localName(), identAndStatusSection)

dmAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmAddress'), dmAddressElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 44, 4))
Namespace.addCategoryObject('elementBinding', dmAddress.name().localName(), dmAddress)

dmIdent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmIdent'), dmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 51, 4))
Namespace.addCategoryObject('elementBinding', dmIdent.name().localName(), dmIdent)

identExtension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), identExtensionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4))
Namespace.addCategoryObject('elementBinding', identExtension.name().localName(), identExtension)

dmAddressItems = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmAddressItems'), dmAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 195, 4))
Namespace.addCategoryObject('elementBinding', dmAddressItems.name().localName(), dmAddressItems)

dmTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmTitle'), dmTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 231, 4))
Namespace.addCategoryObject('elementBinding', dmTitle.name().localName(), dmTitle)

sourceDmIdent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sourceDmIdent'), sourceDmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 268, 4))
Namespace.addCategoryObject('elementBinding', sourceDmIdent.name().localName(), sourceDmIdent)

dmRefIdent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRefIdent'), dmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 712, 4))
Namespace.addCategoryObject('elementBinding', dmRefIdent.name().localName(), dmRefIdent)

dmRefAddressItems = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRefAddressItems'), dmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 721, 4))
Namespace.addCategoryObject('elementBinding', dmRefAddressItems.name().localName(), dmRefAddressItems)

exportRegistrationCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationCode'), exportRegistrationCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 758, 4))
Namespace.addCategoryObject('elementBinding', exportRegistrationCode.name().localName(), exportRegistrationCode)

refs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4))
Namespace.addCategoryObject('elementBinding', refs.name().localName(), refs)

pmRefIdent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRefIdent'), pmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 895, 4))
Namespace.addCategoryObject('elementBinding', pmRefIdent.name().localName(), pmRefIdent)

responsiblePartnerCompany = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany'), responsiblePartnerCompanyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 942, 4))
Namespace.addCategoryObject('elementBinding', responsiblePartnerCompany.name().localName(), responsiblePartnerCompany)

pubMedia = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pubMedia'), pubMediaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 952, 4))
Namespace.addCategoryObject('elementBinding', pubMedia.name().localName(), pubMedia)

externalPubRefIdent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefIdent'), externalPubRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 978, 4))
Namespace.addCategoryObject('elementBinding', externalPubRefIdent.name().localName(), externalPubRefIdent)

externalPubCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubCode'), externalPubCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 986, 4))
Namespace.addCategoryObject('elementBinding', externalPubCode.name().localName(), externalPubCode)

indexFlag = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), indexFlagElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4))
Namespace.addCategoryObject('elementBinding', indexFlag.name().localName(), indexFlag)

acronymTerm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4))
Namespace.addCategoryObject('elementBinding', acronymTerm.name().localName(), acronymTerm)

externalPubTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubTitle'), externalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1251, 4))
Namespace.addCategoryObject('elementBinding', externalPubTitle.name().localName(), externalPubTitle)

externalPubIssueInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssueInfo'), externalPubIssueInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1262, 4))
Namespace.addCategoryObject('elementBinding', externalPubIssueInfo.name().localName(), externalPubIssueInfo)

externalPubIssue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssue'), externalPubIssueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1268, 4))
Namespace.addCategoryObject('elementBinding', externalPubIssue.name().localName(), externalPubIssue)

externalPubRefAddressItems = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefAddressItems'), externalPubRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1279, 4))
Namespace.addCategoryObject('elementBinding', externalPubRefAddressItems.name().localName(), externalPubRefAddressItems)

shortExternalPubTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortExternalPubTitle'), shortExternalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1289, 4))
Namespace.addCategoryObject('elementBinding', shortExternalPubTitle.name().localName(), shortExternalPubTitle)

definitionListHeader = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionListHeader'), definitionListHeaderElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3356, 4))
Namespace.addCategoryObject('elementBinding', definitionListHeader.name().localName(), definitionListHeader)

footnoteRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4))
Namespace.addCategoryObject('elementBinding', footnoteRef.name().localName(), footnoteRef)

logo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'logo'), logoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3527, 4))
Namespace.addCategoryObject('elementBinding', logo.name().localName(), logo)

originator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originator'), originatorElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3533, 4))
Namespace.addCategoryObject('elementBinding', originator.name().localName(), originator)

applicCrossRefTableRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'applicCrossRefTableRef'), applicCrossRefTableRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3541, 4))
Namespace.addCategoryObject('elementBinding', applicCrossRefTableRef.name().localName(), applicCrossRefTableRef)

displayText = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'displayText'), displayTextElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3567, 4))
Namespace.addCategoryObject('elementBinding', displayText.name().localName(), displayText)

referencedApplicGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'referencedApplicGroup'), referencedApplicGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3622, 4))
Namespace.addCategoryObject('elementBinding', referencedApplicGroup.name().localName(), referencedApplicGroup)

techStandard = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'techStandard'), techStandardElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3628, 4))
Namespace.addCategoryObject('elementBinding', techStandard.name().localName(), techStandard)

authorityInfoAndTp = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityInfoAndTp'), authorityInfoAndTpElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3640, 4))
Namespace.addCategoryObject('elementBinding', authorityInfoAndTp.name().localName(), authorityInfoAndTp)

authorityExceptions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityExceptions'), authorityExceptionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3649, 4))
Namespace.addCategoryObject('elementBinding', authorityExceptions.name().localName(), authorityExceptions)

productConfiguration = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'productConfiguration'), productConfigurationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3656, 4))
Namespace.addCategoryObject('elementBinding', productConfiguration.name().localName(), productConfiguration)

retrofit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'retrofit'), retrofitElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3665, 4))
Namespace.addCategoryObject('elementBinding', retrofit.name().localName(), retrofit)

brexDmRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'brexDmRef'), brexDmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3693, 4))
Namespace.addCategoryObject('elementBinding', brexDmRef.name().localName(), brexDmRef)

qualityAssurance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'qualityAssurance'), qualityAssuranceElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3699, 4))
Namespace.addCategoryObject('elementBinding', qualityAssurance.name().localName(), qualityAssurance)

unverified = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unverified'), unverifiedElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3710, 4))
Namespace.addCategoryObject('elementBinding', unverified.name().localName(), unverified)

systemBreakdownCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'systemBreakdownCode'), systemBreakdownCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3728, 4))
Namespace.addCategoryObject('elementBinding', systemBreakdownCode.name().localName(), systemBreakdownCode)

productSafety = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'productSafety'), productSafetyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3956, 4))
Namespace.addCategoryObject('elementBinding', productSafety.name().localName(), productSafety)

remarks = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remarks'), remarksElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4))
Namespace.addCategoryObject('elementBinding', remarks.name().localName(), remarks)

content = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'content'), contentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3981, 4))
Namespace.addCategoryObject('elementBinding', content.name().localName(), content)

procedure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'procedure'), procedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4047, 4))
Namespace.addCategoryObject('elementBinding', procedure.name().localName(), procedure)

commonInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commonInfo'), commonInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4056, 4))
Namespace.addCategoryObject('elementBinding', commonInfo.name().localName(), commonInfo)

reasonForAmendment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendment'), reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4155, 4))
Namespace.addCategoryObject('elementBinding', reasonForAmendment.name().localName(), reasonForAmendment)

parameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'parameter'), parameterElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4418, 4))
Namespace.addCategoryObject('elementBinding', parameter.name().localName(), parameter)

foldout = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'foldout'), foldoutElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4449, 4))
Namespace.addCategoryObject('elementBinding', foldout.name().localName(), foldout)

preliminaryRqmts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'preliminaryRqmts'), preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4635, 4))
Namespace.addCategoryObject('elementBinding', preliminaryRqmts.name().localName(), preliminaryRqmts)

productionMaintData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'productionMaintData'), productionMaintDataElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4648, 4))
Namespace.addCategoryObject('elementBinding', productionMaintData.name().localName(), productionMaintData)

taskDuration = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taskDuration'), taskDurationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4783, 4))
Namespace.addCategoryObject('elementBinding', taskDuration.name().localName(), taskDuration)

reqCondGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondGroup'), reqCondGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4795, 4))
Namespace.addCategoryObject('elementBinding', reqCondGroup.name().localName(), reqCondGroup)

noConds = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noConds'), noCondsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4808, 4))
Namespace.addCategoryObject('elementBinding', noConds.name().localName(), noConds)

reqTechInfoGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoGroup'), reqTechInfoGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5056, 4))
Namespace.addCategoryObject('elementBinding', reqTechInfoGroup.name().localName(), reqTechInfoGroup)

reqSupportEquips = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSupportEquips'), reqSupportEquipsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5175, 4))
Namespace.addCategoryObject('elementBinding', reqSupportEquips.name().localName(), reqSupportEquips)

noSupportEquips = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSupportEquips'), noSupportEquipsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5182, 4))
Namespace.addCategoryObject('elementBinding', noSupportEquips.name().localName(), noSupportEquips)

supportEquipDescrGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescrGroup'), supportEquipDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5184, 4))
Namespace.addCategoryObject('elementBinding', supportEquipDescrGroup.name().localName(), supportEquipDescrGroup)

partAndSerialNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'partAndSerialNumber'), partAndSerialNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5243, 4))
Namespace.addCategoryObject('elementBinding', partAndSerialNumber.name().localName(), partAndSerialNumber)

reqSupplies = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSupplies'), reqSuppliesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5291, 4))
Namespace.addCategoryObject('elementBinding', reqSupplies.name().localName(), reqSupplies)

noSupplies = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSupplies'), noSuppliesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5298, 4))
Namespace.addCategoryObject('elementBinding', noSupplies.name().localName(), noSupplies)

supplyDescrGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supplyDescrGroup'), supplyDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5300, 4))
Namespace.addCategoryObject('elementBinding', supplyDescrGroup.name().localName(), supplyDescrGroup)

reqSpares = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSpares'), reqSparesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5338, 4))
Namespace.addCategoryObject('elementBinding', reqSpares.name().localName(), reqSpares)

noSpares = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSpares'), noSparesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5345, 4))
Namespace.addCategoryObject('elementBinding', noSpares.name().localName(), noSpares)

spareDescrGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'spareDescrGroup'), spareDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5347, 4))
Namespace.addCategoryObject('elementBinding', spareDescrGroup.name().localName(), spareDescrGroup)

reqSafety = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSafety'), reqSafetyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5373, 4))
Namespace.addCategoryObject('elementBinding', reqSafety.name().localName(), reqSafety)

noSafety = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSafety'), noSafetyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5380, 4))
Namespace.addCategoryObject('elementBinding', noSafety.name().localName(), noSafety)

safetyRqmts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'safetyRqmts'), safetyRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5382, 4))
Namespace.addCategoryObject('elementBinding', safetyRqmts.name().localName(), safetyRqmts)

captionLine = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'captionLine'), captionLineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5460, 4))
Namespace.addCategoryObject('elementBinding', captionLine.name().localName(), captionLine)

dmCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmCode'), dmCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 67, 4))
Namespace.addCategoryObject('elementBinding', dmCode.name().localName(), dmCode)

language = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'language'), languageElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4))
Namespace.addCategoryObject('elementBinding', language.name().localName(), language)

issueInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), issueInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4))
Namespace.addCategoryObject('elementBinding', issueInfo.name().localName(), issueInfo)

issueDate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), issueDateElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4))
Namespace.addCategoryObject('elementBinding', issueDate.name().localName(), issueDate)

dmStatus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmStatus'), dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 240, 4))
Namespace.addCategoryObject('elementBinding', dmStatus.name().localName(), dmStatus)

security = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'security'), securityElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 277, 4))
Namespace.addCategoryObject('elementBinding', security.name().localName(), security)

dataRestrictions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataRestrictions'), dataRestrictionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 598, 4))
Namespace.addCategoryObject('elementBinding', dataRestrictions.name().localName(), dataRestrictions)

restrictionInstructions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'restrictionInstructions'), restrictionInstructionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 610, 4))
Namespace.addCategoryObject('elementBinding', restrictionInstructions.name().localName(), restrictionInstructions)

dataDistribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataDistribution'), dataDistributionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 624, 4))
Namespace.addCategoryObject('elementBinding', dataDistribution.name().localName(), dataDistribution)

exportControl = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'exportControl'), exportControlElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 655, 4))
Namespace.addCategoryObject('elementBinding', exportControl.name().localName(), exportControl)

exportRegistrationStmt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationStmt'), exportRegistrationStmtElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 667, 4))
Namespace.addCategoryObject('elementBinding', exportRegistrationStmt.name().localName(), exportRegistrationStmt)

simplePara = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), simpleParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4))
Namespace.addCategoryObject('elementBinding', simplePara.name().localName(), simplePara)

dmRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4))
Namespace.addCategoryObject('elementBinding', dmRef.name().localName(), dmRef)

behavior = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'behavior'), behaviorElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 728, 4))
Namespace.addCategoryObject('elementBinding', behavior.name().localName(), behavior)

dataHandling = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataHandling'), dataHandlingElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 765, 4))
Namespace.addCategoryObject('elementBinding', dataHandling.name().localName(), dataHandling)

dataDestruction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataDestruction'), dataDestructionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 771, 4))
Namespace.addCategoryObject('elementBinding', dataDestruction.name().localName(), dataDestruction)

dataDisclosure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataDisclosure'), dataDisclosureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 777, 4))
Namespace.addCategoryObject('elementBinding', dataDisclosure.name().localName(), dataDisclosure)

supersedure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supersedure'), supersedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 783, 4))
Namespace.addCategoryObject('elementBinding', supersedure.name().localName(), supersedure)

restrictionInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'restrictionInfo'), restrictionInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 790, 4))
Namespace.addCategoryObject('elementBinding', restrictionInfo.name().localName(), restrictionInfo)

copyright = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'copyright'), copyrightElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 801, 4))
Namespace.addCategoryObject('elementBinding', copyright.name().localName(), copyright)

copyrightPara = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'copyrightPara'), copyrightParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 810, 4))
Namespace.addCategoryObject('elementBinding', copyrightPara.name().localName(), copyrightPara)

emphasis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4))
Namespace.addCategoryObject('elementBinding', emphasis.name().localName(), emphasis)

functionalItemRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4))
Namespace.addCategoryObject('elementBinding', functionalItemRef.name().localName(), functionalItemRef)

name = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4))
Namespace.addCategoryObject('elementBinding', name.name().localName(), name)

pmRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4))
Namespace.addCategoryObject('elementBinding', pmRef.name().localName(), pmRef)

pmCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmCode'), pmCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 904, 4))
Namespace.addCategoryObject('elementBinding', pmCode.name().localName(), pmCode)

pmRefAddressItems = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRefAddressItems'), pmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 929, 4))
Namespace.addCategoryObject('elementBinding', pmRefAddressItems.name().localName(), pmRefAddressItems)

externalPubRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4))
Namespace.addCategoryObject('elementBinding', externalPubRef.name().localName(), externalPubRef)

acronym = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4))
Namespace.addCategoryObject('elementBinding', acronym.name().localName(), acronym)

acronymDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymDefinition'), acronymDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1027, 4))
Namespace.addCategoryObject('elementBinding', acronymDefinition.name().localName(), acronymDefinition)

verbatimText = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4))
Namespace.addCategoryObject('elementBinding', verbatimText.name().localName(), verbatimText)

circuitBreakerRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4))
Namespace.addCategoryObject('elementBinding', circuitBreakerRef.name().localName(), circuitBreakerRef)

controlIndicatorRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4))
Namespace.addCategoryObject('elementBinding', controlIndicatorRef.name().localName(), controlIndicatorRef)

inlineSignificantData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4))
Namespace.addCategoryObject('elementBinding', inlineSignificantData.name().localName(), inlineSignificantData)

quantity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4))
Namespace.addCategoryObject('elementBinding', quantity.name().localName(), quantity)

quantityGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantityGroup'), quantityGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1470, 4))
Namespace.addCategoryObject('elementBinding', quantityGroup.name().localName(), quantityGroup)

quantityValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantityValue'), quantityValueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1484, 4))
Namespace.addCategoryObject('elementBinding', quantityValue.name().localName(), quantityValue)

quantityTolerance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantityTolerance'), quantityToleranceElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2870, 4))
Namespace.addCategoryObject('elementBinding', quantityTolerance.name().localName(), quantityTolerance)

internalRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4))
Namespace.addCategoryObject('elementBinding', internalRef.name().localName(), internalRef)

changeInline = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4))
Namespace.addCategoryObject('elementBinding', changeInline.name().localName(), changeInline)

symbol = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4))
Namespace.addCategoryObject('elementBinding', symbol.name().localName(), symbol)

footnote = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4))
Namespace.addCategoryObject('elementBinding', footnote.name().localName(), footnote)

para = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4))
Namespace.addCategoryObject('elementBinding', para.name().localName(), para)

sequentialList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sequentialList'), sequentialListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3090, 4))
Namespace.addCategoryObject('elementBinding', sequentialList.name().localName(), sequentialList)

title = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4))
Namespace.addCategoryObject('elementBinding', title.name().localName(), title)

listItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'listItem'), listItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3107, 4))
Namespace.addCategoryObject('elementBinding', listItem.name().localName(), listItem)

note = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'note'), noteElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4))
Namespace.addCategoryObject('elementBinding', note.name().localName(), note)

notePara = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'notePara'), noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3136, 4))
Namespace.addCategoryObject('elementBinding', notePara.name().localName(), notePara)

attentionSequentialList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialList'), attentionSequentialListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3170, 4))
Namespace.addCategoryObject('elementBinding', attentionSequentialList.name().localName(), attentionSequentialList)

attentionSequentialListItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialListItem'), attentionSequentialListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3182, 4))
Namespace.addCategoryObject('elementBinding', attentionSequentialListItem.name().localName(), attentionSequentialListItem)

attentionListItemPara = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionListItemPara'), attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3193, 4))
Namespace.addCategoryObject('elementBinding', attentionListItemPara.name().localName(), attentionListItemPara)

attentionRandomList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), attentionRandomListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4))
Namespace.addCategoryObject('elementBinding', attentionRandomList.name().localName(), attentionRandomList)

attentionRandomListItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomListItem'), attentionRandomListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3216, 4))
Namespace.addCategoryObject('elementBinding', attentionRandomListItem.name().localName(), attentionRandomListItem)

randomList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'randomList'), randomListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4))
Namespace.addCategoryObject('elementBinding', randomList.name().localName(), randomList)

definitionList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), definitionListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4))
Namespace.addCategoryObject('elementBinding', definitionList.name().localName(), definitionList)

termTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'termTitle'), titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3363, 4))
Namespace.addCategoryObject('elementBinding', termTitle.name().localName(), termTitle)

definitionTitle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionTitle'), titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3364, 4))
Namespace.addCategoryObject('elementBinding', definitionTitle.name().localName(), definitionTitle)

definitionListItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionListItem'), definitionListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3365, 4))
Namespace.addCategoryObject('elementBinding', definitionListItem.name().localName(), definitionListItem)

listItemTerm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'listItemTerm'), listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3377, 4))
Namespace.addCategoryObject('elementBinding', listItemTerm.name().localName(), listItemTerm)

listItemDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'listItemDefinition'), listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3388, 4))
Namespace.addCategoryObject('elementBinding', listItemDefinition.name().localName(), listItemDefinition)

policyStatement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'policyStatement'), policyStatementElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3515, 4))
Namespace.addCategoryObject('elementBinding', policyStatement.name().localName(), policyStatement)

dataConds = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataConds'), dataCondsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3521, 4))
Namespace.addCategoryObject('elementBinding', dataConds.name().localName(), dataConds)

applic = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'applic'), applicElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3547, 4))
Namespace.addCategoryObject('elementBinding', applic.name().localName(), applic)

assert_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'assert'), assertElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3573, 4))
Namespace.addCategoryObject('elementBinding', assert_.name().localName(), assert_)

evaluate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'evaluate'), evaluateElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3595, 4))
Namespace.addCategoryObject('elementBinding', evaluate.name().localName(), evaluate)

modification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'modification'), modificationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3671, 4))
Namespace.addCategoryObject('elementBinding', modification.name().localName(), modification)

firstVerification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firstVerification'), firstVerificationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3712, 4))
Namespace.addCategoryObject('elementBinding', firstVerification.name().localName(), firstVerification)

secondVerification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'secondVerification'), secondVerificationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3724, 4))
Namespace.addCategoryObject('elementBinding', secondVerification.name().localName(), secondVerification)

skillLevel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'skillLevel'), skillLevelElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3733, 4))
Namespace.addCategoryObject('elementBinding', skillLevel.name().localName(), skillLevel)

reasonForUpdate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdate'), reasonForUpdateElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3841, 4))
Namespace.addCategoryObject('elementBinding', reasonForUpdate.name().localName(), reasonForUpdate)

warningsAndCautions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warningsAndCautions'), warningsAndCautionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3990, 4))
Namespace.addCategoryObject('elementBinding', warningsAndCautions.name().localName(), warningsAndCautions)

warning = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warning'), warningElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4))
Namespace.addCategoryObject('elementBinding', warning.name().localName(), warning)

warningAndCautionPara = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionPara'), warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4018, 4))
Namespace.addCategoryObject('elementBinding', warningAndCautionPara.name().localName(), warningAndCautionPara)

caution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caution'), cautionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4))
Namespace.addCategoryObject('elementBinding', caution.name().localName(), caution)

figure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'figure'), figureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4))
Namespace.addCategoryObject('elementBinding', figure.name().localName(), figure)

graphic = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'graphic'), graphicElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4086, 4))
Namespace.addCategoryObject('elementBinding', graphic.name().localName(), graphic)

hotspot = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hotspot'), hotspotElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4103, 4))
Namespace.addCategoryObject('elementBinding', hotspot.name().localName(), hotspot)

catalogSeqNumberRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), catalogSeqNumberRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4))
Namespace.addCategoryObject('elementBinding', catalogSeqNumberRef.name().localName(), catalogSeqNumberRef)

legend = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legend'), legendElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4162, 4))
Namespace.addCategoryObject('elementBinding', legend.name().localName(), legend)

commonInfoDescrPara = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara'), commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4171, 4))
Namespace.addCategoryObject('elementBinding', commonInfoDescrPara.name().localName(), commonInfoDescrPara)

circuitBreakerDescrGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup'), circuitBreakerDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4206, 4))
Namespace.addCategoryObject('elementBinding', circuitBreakerDescrGroup.name().localName(), circuitBreakerDescrGroup)

circuitBreakerDescrSubGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrSubGroup'), circuitBreakerDescrSubGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4219, 4))
Namespace.addCategoryObject('elementBinding', circuitBreakerDescrSubGroup.name().localName(), circuitBreakerDescrSubGroup)

circuitBreakerDescr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescr'), circuitBreakerDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4234, 4))
Namespace.addCategoryObject('elementBinding', circuitBreakerDescr.name().localName(), circuitBreakerDescr)

accessPointRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessPointRef'), accessPointRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4251, 4))
Namespace.addCategoryObject('elementBinding', accessPointRef.name().localName(), accessPointRef)

circuitBreakerLocation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerLocation'), circuitBreakerLocationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4371, 4))
Namespace.addCategoryObject('elementBinding', circuitBreakerLocation.name().localName(), circuitBreakerLocation)

multimedia = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'multimedia'), multimediaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4385, 4))
Namespace.addCategoryObject('elementBinding', multimedia.name().localName(), multimedia)

multimediaObject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'multimediaObject'), multimediaObjectElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4397, 4))
Namespace.addCategoryObject('elementBinding', multimediaObject.name().localName(), multimediaObject)

table = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), tableElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4))
Namespace.addCategoryObject('elementBinding', table.name().localName(), table)

tgroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tgroup'), tgroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4478, 4))
Namespace.addCategoryObject('elementBinding', tgroup.name().localName(), tgroup)

colspec = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colspec'), colspecElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4496, 4))
Namespace.addCategoryObject('elementBinding', colspec.name().localName(), colspec)

spanspec = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'spanspec'), spanspecElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4524, 4))
Namespace.addCategoryObject('elementBinding', spanspec.name().localName(), spanspec)

thead = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'thead'), theadElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4538, 4))
Namespace.addCategoryObject('elementBinding', thead.name().localName(), thead)

row = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), rowElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4546, 4))
Namespace.addCategoryObject('elementBinding', row.name().localName(), row)

entry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'entry'), entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4558, 4))
Namespace.addCategoryObject('elementBinding', entry.name().localName(), entry)

tfoot = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tfoot'), tfootElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4597, 4))
Namespace.addCategoryObject('elementBinding', tfoot.name().localName(), tfoot)

tbody = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tbody'), tbodyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4605, 4))
Namespace.addCategoryObject('elementBinding', tbody.name().localName(), tbody)

thresholdInterval = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'thresholdInterval'), thresholdIntervalElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4660, 4))
Namespace.addCategoryObject('elementBinding', thresholdInterval.name().localName(), thresholdInterval)

zoneRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'zoneRef'), zoneRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4768, 4))
Namespace.addCategoryObject('elementBinding', zoneRef.name().localName(), zoneRef)

reqCondNoRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondNoRef'), reqCondNoRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4810, 4))
Namespace.addCategoryObject('elementBinding', reqCondNoRef.name().localName(), reqCondNoRef)

reqCond = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4))
Namespace.addCategoryObject('elementBinding', reqCond.name().localName(), reqCond)

reqCondDm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondDm'), reqCondDmElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4944, 4))
Namespace.addCategoryObject('elementBinding', reqCondDm.name().localName(), reqCondDm)

reqCondCircuitBreaker = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondCircuitBreaker'), reqCondCircuitBreakerElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4955, 4))
Namespace.addCategoryObject('elementBinding', reqCondCircuitBreaker.name().localName(), reqCondCircuitBreaker)

reqCondPm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondPm'), reqCondPmElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4966, 4))
Namespace.addCategoryObject('elementBinding', reqCondPm.name().localName(), reqCondPm)

reqCondExternalPub = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondExternalPub'), reqCondExternalPubElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4977, 4))
Namespace.addCategoryObject('elementBinding', reqCondExternalPub.name().localName(), reqCondExternalPub)

reqPersons = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqPersons'), reqPersonsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4988, 4))
Namespace.addCategoryObject('elementBinding', reqPersons.name().localName(), reqPersons)

personnel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personnel'), personnelElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5000, 4))
Namespace.addCategoryObject('elementBinding', personnel.name().localName(), personnel)

personCategory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personCategory'), personCategoryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5013, 4))
Namespace.addCategoryObject('elementBinding', personCategory.name().localName(), personCategory)

personSkill = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personSkill'), personSkillElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5021, 4))
Namespace.addCategoryObject('elementBinding', personSkill.name().localName(), personSkill)

trade = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'trade'), tradeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5028, 4))
Namespace.addCategoryObject('elementBinding', trade.name().localName(), trade)

estimatedTime = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'estimatedTime'), estimatedTimeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5034, 4))
Namespace.addCategoryObject('elementBinding', estimatedTime.name().localName(), estimatedTime)

person = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'person'), personElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5042, 4))
Namespace.addCategoryObject('elementBinding', person.name().localName(), person)

reqTechInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfo'), reqTechInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5062, 4))
Namespace.addCategoryObject('elementBinding', reqTechInfo.name().localName(), reqTechInfo)

supportEquipDescr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescr'), supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5190, 4))
Namespace.addCategoryObject('elementBinding', supportEquipDescr.name().localName(), supportEquipDescr)

natoStockNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber'), natoStockNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5211, 4))
Namespace.addCategoryObject('elementBinding', natoStockNumber.name().localName(), natoStockNumber)

identNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identNumber'), identNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5228, 4))
Namespace.addCategoryObject('elementBinding', identNumber.name().localName(), identNumber)

manufacturerCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'manufacturerCode'), manufacturerCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5237, 4))
Namespace.addCategoryObject('elementBinding', manufacturerCode.name().localName(), manufacturerCode)

partNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'partNumber'), partNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5250, 4))
Namespace.addCategoryObject('elementBinding', partNumber.name().localName(), partNumber)

serialNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serialNumber'), serialNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5256, 4))
Namespace.addCategoryObject('elementBinding', serialNumber.name().localName(), serialNumber)

toolRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'toolRef'), toolRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5269, 4))
Namespace.addCategoryObject('elementBinding', toolRef.name().localName(), toolRef)

reqQuantity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity'), reqQuantityElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5286, 4))
Namespace.addCategoryObject('elementBinding', reqQuantity.name().localName(), reqQuantity)

supplyDescr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supplyDescr'), supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5306, 4))
Namespace.addCategoryObject('elementBinding', supplyDescr.name().localName(), supplyDescr)

supplyRqmtRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supplyRqmtRef'), supplyRqmtRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5326, 4))
Namespace.addCategoryObject('elementBinding', supplyRqmtRef.name().localName(), supplyRqmtRef)

spareDescr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'spareDescr'), spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5353, 4))
Namespace.addCategoryObject('elementBinding', spareDescr.name().localName(), spareDescr)

mainProcedure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mainProcedure'), mainProcedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5395, 4))
Namespace.addCategoryObject('elementBinding', mainProcedure.name().localName(), mainProcedure)

proceduralStep = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'proceduralStep'), proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5406, 4))
Namespace.addCategoryObject('elementBinding', proceduralStep.name().localName(), proceduralStep)

caption = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caption'), captionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5443, 4))
Namespace.addCategoryObject('elementBinding', caption.name().localName(), caption)

closeRqmts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'closeRqmts'), closeRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5612, 4))
Namespace.addCategoryObject('elementBinding', closeRqmts.name().localName(), closeRqmts)



dmoduleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identAndStatusSection'), identAndStatusSectionElemType, scope=dmoduleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 37, 4)))

dmoduleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'content'), contentElemType, scope=dmoduleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3981, 4)))

dmoduleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_rdf, u'Description'), _ImportedBinding__nsgroup.CTD_ANON, scope=dmoduleElemType, location=pyxb.utils.utility.Location(u'i:\\xml_editor\\xml_editor\\schema\\rdf.xsd', 23, 1)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 31, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmoduleElemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_rdf, u'Description')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 31, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmoduleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identAndStatusSection')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 32, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmoduleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'content')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 33, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmoduleElemType._Automaton = _BuildAutomaton()




identAndStatusSectionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmAddress'), dmAddressElemType, scope=identAndStatusSectionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 44, 4)))

identAndStatusSectionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmStatus'), dmStatusElemType, scope=identAndStatusSectionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 240, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(identAndStatusSectionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmAddress')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 40, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(identAndStatusSectionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmStatus')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 41, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
identAndStatusSectionElemType._Automaton = _BuildAutomaton_()




dmAddressElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmIdent'), dmIdentElemType, scope=dmAddressElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 51, 4)))

dmAddressElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmAddressItems'), dmAddressItemsElemType, scope=dmAddressElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 195, 4)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmAddressElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmIdent')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 47, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmAddressElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmAddressItems')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 48, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmAddressElemType._Automaton = _BuildAutomaton_2()




dmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), identExtensionElemType, scope=dmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4)))

dmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmCode'), dmCodeElemType, scope=dmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 67, 4)))

dmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'language'), languageElemType, scope=dmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4)))

dmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), issueInfoElemType, scope=dmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 54, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identExtension')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 54, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 55, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 56, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 57, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmIdentElemType._Automaton = _BuildAutomaton_3()




dmAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), issueDateElemType, scope=dmAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4)))

dmAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmTitle'), dmTitleElemType, scope=dmAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 231, 4)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueDate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 198, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 199, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmAddressItemsElemType._Automaton = _BuildAutomaton_4()




dmTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'techName'), pyxb.binding.datatypes.string, scope=dmTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 238, 4)))

dmTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'infoName'), pyxb.binding.datatypes.string, scope=dmTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 239, 4)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 235, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'techName')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 234, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dmTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'infoName')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 235, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmTitleElemType._Automaton = _BuildAutomaton_5()




sourceDmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), identExtensionElemType, scope=sourceDmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4)))

sourceDmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmCode'), dmCodeElemType, scope=sourceDmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 67, 4)))

sourceDmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'language'), languageElemType, scope=sourceDmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4)))

sourceDmIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), issueInfoElemType, scope=sourceDmIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 271, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(sourceDmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identExtension')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 271, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(sourceDmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 272, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(sourceDmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 273, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(sourceDmIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 274, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
sourceDmIdentElemType._Automaton = _BuildAutomaton_6()




dmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), identExtensionElemType, scope=dmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4)))

dmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmCode'), dmCodeElemType, scope=dmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 67, 4)))

dmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'language'), languageElemType, scope=dmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4)))

dmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), issueInfoElemType, scope=dmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 715, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 717, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 718, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identExtension')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 715, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 716, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 717, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 718, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmRefIdentElemType._Automaton = _BuildAutomaton_7()




dmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), issueDateElemType, scope=dmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4)))

dmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmTitle'), dmTitleElemType, scope=dmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 231, 4)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 724, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 725, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 724, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueDate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 725, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
dmRefAddressItemsElemType._Automaton = _BuildAutomaton_8()




refsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=refsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

refsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=refsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

refsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=refsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(refsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 874, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(refsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 875, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(refsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 876, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
refsElemType._Automaton = _BuildAutomaton_9()




pmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identExtension'), identExtensionElemType, scope=pmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 60, 4)))

pmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'language'), languageElemType, scope=pmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 161, 4)))

pmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueInfo'), issueInfoElemType, scope=pmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 178, 4)))

pmRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmCode'), pmCodeElemType, scope=pmRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 904, 4)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 898, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 901, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(pmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identExtension')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 898, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(pmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 899, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(pmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 900, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(pmRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 901, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
pmRefIdentElemType._Automaton = _BuildAutomaton_10()




responsiblePartnerCompanyElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enterpriseName'), pyxb.binding.datatypes.string, scope=responsiblePartnerCompanyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 950, 4)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 945, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(responsiblePartnerCompanyElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enterpriseName')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 945, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
responsiblePartnerCompanyElemType._Automaton = _BuildAutomaton_11()




externalPubRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubCode'), externalPubCodeElemType, scope=externalPubRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 986, 4)))

externalPubRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubTitle'), externalPubTitleElemType, scope=externalPubRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1251, 4)))

externalPubRefIdentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssueInfo'), externalPubIssueInfoElemType, scope=externalPubRefIdentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1262, 4)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 981, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 982, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 983, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 981, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 982, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefIdentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssueInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 983, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
externalPubRefIdentElemType._Automaton = _BuildAutomaton_12()




externalPubCodeElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=externalPubCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

externalPubCodeElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=externalPubCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

externalPubCodeElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), indexFlagElemType, scope=externalPubCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4)))

externalPubCodeElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=externalPubCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

externalPubCodeElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=externalPubCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

externalPubCodeElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=externalPubCodeElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 988, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubCodeElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'indexFlag')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 989, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubCodeElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 990, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubCodeElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 991, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubCodeElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 992, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubCodeElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 993, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubCodeElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 994, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
externalPubCodeElemType._Automaton = _BuildAutomaton_13()




acronymTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=acronymTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

acronymTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=acronymTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1023, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(acronymTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 685, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(acronymTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 686, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
acronymTermElemType._Automaton = _BuildAutomaton_14()




externalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=externalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

externalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=externalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

externalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), indexFlagElemType, scope=externalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4)))

externalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=externalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

externalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=externalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

externalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=externalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1253, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'indexFlag')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1254, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1255, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1256, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1257, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1258, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1259, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
externalPubTitleElemType._Automaton = _BuildAutomaton_15()




externalPubIssueInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssue'), externalPubIssueElemType, scope=externalPubIssueInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1268, 4)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(externalPubIssueInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubIssue')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1265, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
externalPubIssueInfoElemType._Automaton = _BuildAutomaton_16()




externalPubIssueElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=externalPubIssueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

externalPubIssueElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=externalPubIssueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

externalPubIssueElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), indexFlagElemType, scope=externalPubIssueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4)))

externalPubIssueElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=externalPubIssueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

externalPubIssueElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=externalPubIssueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

externalPubIssueElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=externalPubIssueElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1270, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubIssueElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'indexFlag')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1271, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubIssueElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1272, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubIssueElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1273, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubIssueElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1274, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubIssueElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1275, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubIssueElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1276, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
externalPubIssueElemType._Automaton = _BuildAutomaton_17()




externalPubRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), issueDateElemType, scope=externalPubRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4)))

externalPubRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'security'), securityElemType, scope=externalPubRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 277, 4)))

externalPubRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany'), responsiblePartnerCompanyElemType, scope=externalPubRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 942, 4)))

externalPubRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pubMedia'), pubMediaElemType, scope=externalPubRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 952, 4)))

externalPubRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortExternalPubTitle'), shortExternalPubTitleElemType, scope=externalPubRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1289, 4)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1282, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1283, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1284, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1285, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1286, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueDate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1282, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'security')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1283, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1284, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pubMedia')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1285, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shortExternalPubTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1286, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
externalPubRefAddressItemsElemType._Automaton = _BuildAutomaton_18()




shortExternalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=shortExternalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

shortExternalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=shortExternalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

shortExternalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), indexFlagElemType, scope=shortExternalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4)))

shortExternalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=shortExternalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

shortExternalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=shortExternalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

shortExternalPubTitleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=shortExternalPubTitleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1291, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(shortExternalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'indexFlag')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1292, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(shortExternalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1293, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(shortExternalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1294, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(shortExternalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1295, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(shortExternalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1296, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(shortExternalPubTitleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1297, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
shortExternalPubTitleElemType._Automaton = _BuildAutomaton_19()




definitionListHeaderElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'termTitle'), titleElemType, scope=definitionListHeaderElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3363, 4)))

definitionListHeaderElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionTitle'), titleElemType, scope=definitionListHeaderElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3364, 4)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(definitionListHeaderElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'termTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3359, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(definitionListHeaderElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definitionTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3360, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
definitionListHeaderElemType._Automaton = _BuildAutomaton_20()




logoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=logoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(logoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3530, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
logoElemType._Automaton = _BuildAutomaton_21()




originatorElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enterpriseName'), pyxb.binding.datatypes.string, scope=originatorElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 950, 4)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3536, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(originatorElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enterpriseName')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3536, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
originatorElemType._Automaton = _BuildAutomaton_22()




applicCrossRefTableRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=applicCrossRefTableRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(applicCrossRefTableRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3544, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
applicCrossRefTableRefElemType._Automaton = _BuildAutomaton_23()




displayTextElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), simpleParaElemType, scope=displayTextElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3570, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(displayTextElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'simplePara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3570, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
displayTextElemType._Automaton = _BuildAutomaton_24()




referencedApplicGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'applic'), applicElemType, scope=referencedApplicGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3547, 4)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(referencedApplicGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'applic')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3625, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
referencedApplicGroupElemType._Automaton = _BuildAutomaton_25()




techStandardElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityInfoAndTp'), authorityInfoAndTpElemType, scope=techStandardElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3640, 4)))

techStandardElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityInfo'), pyxb.binding.datatypes.string, scope=techStandardElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3647, 4)))

techStandardElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'techPubBase'), pyxb.binding.datatypes.string, scope=techStandardElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3648, 4)))

techStandardElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityExceptions'), authorityExceptionsElemType, scope=techStandardElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3649, 4)))

techStandardElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityNotes'), pyxb.binding.datatypes.string, scope=techStandardElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3692, 4)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(techStandardElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorityInfoAndTp')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3632, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(techStandardElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorityInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3633, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(techStandardElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'techPubBase')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3634, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(techStandardElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorityExceptions')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3636, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(techStandardElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorityNotes')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3637, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
techStandardElemType._Automaton = _BuildAutomaton_26()




authorityInfoAndTpElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorityInfo'), pyxb.binding.datatypes.string, scope=authorityInfoAndTpElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3647, 4)))

authorityInfoAndTpElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'techPubBase'), pyxb.binding.datatypes.string, scope=authorityInfoAndTpElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3648, 4)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(authorityInfoAndTpElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorityInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3643, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(authorityInfoAndTpElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'techPubBase')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3644, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
authorityInfoAndTpElemType._Automaton = _BuildAutomaton_27()




authorityExceptionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'productConfiguration'), productConfigurationElemType, scope=authorityExceptionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3656, 4)))

authorityExceptionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'retrofit'), retrofitElemType, scope=authorityExceptionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3665, 4)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3652, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3653, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(authorityExceptionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'productConfiguration')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3652, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(authorityExceptionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'retrofit')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3653, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
authorityExceptionsElemType._Automaton = _BuildAutomaton_28()




productConfigurationElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'excludedModification'), pyxb.binding.datatypes.string, scope=productConfigurationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3663, 4)))

productConfigurationElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'additionalModification'), pyxb.binding.datatypes.string, scope=productConfigurationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3664, 4)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3659, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3660, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(productConfigurationElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'excludedModification')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3659, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(productConfigurationElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'additionalModification')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3660, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
productConfigurationElemType._Automaton = _BuildAutomaton_29()




retrofitElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'modification'), modificationElemType, scope=retrofitElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3671, 4)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(retrofitElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'modification')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3668, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
retrofitElemType._Automaton = _BuildAutomaton_30()




brexDmRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=brexDmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(brexDmRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3696, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
brexDmRefElemType._Automaton = _BuildAutomaton_31()




qualityAssuranceElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unverified'), unverifiedElemType, scope=qualityAssuranceElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3710, 4)))

qualityAssuranceElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firstVerification'), firstVerificationElemType, scope=qualityAssuranceElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3712, 4)))

qualityAssuranceElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'secondVerification'), secondVerificationElemType, scope=qualityAssuranceElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3724, 4)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3705, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(qualityAssuranceElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'unverified')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3702, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(qualityAssuranceElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'firstVerification')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3704, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(qualityAssuranceElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'secondVerification')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3705, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
qualityAssuranceElemType._Automaton = _BuildAutomaton_32()




def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
systemBreakdownCodeElemType._Automaton = _BuildAutomaton_33()




def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
productSafetyElemType._Automaton = _BuildAutomaton_34()




remarksElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), simpleParaElemType, scope=remarksElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3964, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(remarksElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'simplePara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3964, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
remarksElemType._Automaton = _BuildAutomaton_35()




contentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=contentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

contentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warningsAndCautions'), warningsAndCautionsElemType, scope=contentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3990, 4)))

contentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'procedure'), procedureElemType, scope=contentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4047, 4)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3984, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3985, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(contentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3984, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(contentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warningsAndCautions')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3985, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(contentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'procedure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3986, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
contentElemType._Automaton = _BuildAutomaton_36()




procedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commonInfo'), commonInfoElemType, scope=procedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4056, 4)))

procedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'preliminaryRqmts'), preliminaryRqmtsElemType, scope=procedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4635, 4)))

procedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mainProcedure'), mainProcedureElemType, scope=procedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5395, 4)))

procedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'closeRqmts'), closeRqmtsElemType, scope=procedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5612, 4)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4050, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(procedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commonInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4050, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(procedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'preliminaryRqmts')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4051, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(procedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mainProcedure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4052, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(procedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'closeRqmts')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4053, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
procedureElemType._Automaton = _BuildAutomaton_37()




commonInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, scope=commonInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4)))

commonInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=commonInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

commonInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'note'), noteElemType, scope=commonInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4)))

commonInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'figure'), figureElemType, scope=commonInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4)))

commonInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara'), commonInfoDescrParaElemType, scope=commonInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4171, 4)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4059, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4060, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4064, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4067, 20))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(commonInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4059, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(commonInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'figure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4060, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(commonInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'note')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4064, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(commonInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4065, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4067, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(commonInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4069, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
commonInfoElemType._Automaton = _BuildAutomaton_38()




reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

reasonForAmendmentElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=reasonForAmendmentElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4158, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForAmendmentElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
reasonForAmendmentElemType._Automaton = _BuildAutomaton_39()




foldoutElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'figure'), figureElemType, scope=foldoutElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4)))

foldoutElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), tableElemType, scope=foldoutElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foldoutElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'figure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4452, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(foldoutElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4453, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
foldoutElemType._Automaton = _BuildAutomaton_40()




preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'productionMaintData'), productionMaintDataElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4648, 4)))

preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondGroup'), reqCondGroupElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4795, 4)))

preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqPersons'), reqPersonsElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4988, 4)))

preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoGroup'), reqTechInfoGroupElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5056, 4)))

preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSupportEquips'), reqSupportEquipsElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5175, 4)))

preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSupplies'), reqSuppliesElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5291, 4)))

preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSpares'), reqSparesElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5338, 4)))

preliminaryRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqSafety'), reqSafetyElemType, scope=preliminaryRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5373, 4)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4638, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4640, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4641, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'productionMaintData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4638, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCondGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4639, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqPersons')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4640, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfoGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4641, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqSupportEquips')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4642, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqSupplies')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4643, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqSpares')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4644, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(preliminaryRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqSafety')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4645, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
preliminaryRqmtsElemType._Automaton = _BuildAutomaton_41()




productionMaintDataElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessPointRef'), accessPointRefElemType, scope=productionMaintDataElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4251, 4)))

productionMaintDataElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'thresholdInterval'), thresholdIntervalElemType, scope=productionMaintDataElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4660, 4)))

productionMaintDataElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'zoneRef'), zoneRefElemType, scope=productionMaintDataElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4768, 4)))

productionMaintDataElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'workArea'), pyxb.binding.datatypes.string, scope=productionMaintDataElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4782, 4)))

productionMaintDataElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taskDuration'), taskDurationElemType, scope=productionMaintDataElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4783, 4)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4651, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4652, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4653, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4654, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4655, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(productionMaintDataElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'thresholdInterval')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4651, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(productionMaintDataElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'zoneRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4652, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(productionMaintDataElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessPointRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4653, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(productionMaintDataElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'workArea')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4654, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(productionMaintDataElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taskDuration')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4655, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
productionMaintDataElemType._Automaton = _BuildAutomaton_42()




reqCondGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noConds'), noCondsElemType, scope=reqCondGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4808, 4)))

reqCondGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondNoRef'), reqCondNoRefElemType, scope=reqCondGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4810, 4)))

reqCondGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondDm'), reqCondDmElemType, scope=reqCondGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4944, 4)))

reqCondGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondCircuitBreaker'), reqCondCircuitBreakerElemType, scope=reqCondGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4955, 4)))

reqCondGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondPm'), reqCondPmElemType, scope=reqCondGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4966, 4)))

reqCondGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondExternalPub'), reqCondExternalPubElemType, scope=reqCondGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4977, 4)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noConds')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4798, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCondNoRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4800, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCondDm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4801, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCondCircuitBreaker')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4802, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCondPm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4803, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCondExternalPub')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4804, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqCondGroupElemType._Automaton = _BuildAutomaton_43()




reqTechInfoGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfo'), reqTechInfoElemType, scope=reqTechInfoGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5062, 4)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqTechInfoGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqTechInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5059, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqTechInfoGroupElemType._Automaton = _BuildAutomaton_44()




reqSupportEquipsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSupportEquips'), noSupportEquipsElemType, scope=reqSupportEquipsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5182, 4)))

reqSupportEquipsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescrGroup'), supportEquipDescrGroupElemType, scope=reqSupportEquipsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5184, 4)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSupportEquipsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noSupportEquips')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5178, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSupportEquipsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescrGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5179, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqSupportEquipsElemType._Automaton = _BuildAutomaton_45()




supportEquipDescrGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescr'), supportEquipDescrElemType, scope=supportEquipDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5190, 4)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'supportEquipDescr')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5187, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
supportEquipDescrGroupElemType._Automaton = _BuildAutomaton_46()




partAndSerialNumberElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'partNumber'), partNumberElemType, scope=partAndSerialNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5250, 4)))

partAndSerialNumberElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serialNumber'), serialNumberElemType, scope=partAndSerialNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5256, 4)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5247, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(partAndSerialNumberElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'partNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5246, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(partAndSerialNumberElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'serialNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5247, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
partAndSerialNumberElemType._Automaton = _BuildAutomaton_47()




reqSuppliesElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSupplies'), noSuppliesElemType, scope=reqSuppliesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5298, 4)))

reqSuppliesElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supplyDescrGroup'), supplyDescrGroupElemType, scope=reqSuppliesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5300, 4)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSuppliesElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noSupplies')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5294, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSuppliesElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'supplyDescrGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5295, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqSuppliesElemType._Automaton = _BuildAutomaton_48()




supplyDescrGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supplyDescr'), supplyDescrElemType, scope=supplyDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5306, 4)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(supplyDescrGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'supplyDescr')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5303, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
supplyDescrGroupElemType._Automaton = _BuildAutomaton_49()




reqSparesElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSpares'), noSparesElemType, scope=reqSparesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5345, 4)))

reqSparesElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'spareDescrGroup'), spareDescrGroupElemType, scope=reqSparesElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5347, 4)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSparesElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noSpares')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5341, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSparesElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'spareDescrGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5342, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqSparesElemType._Automaton = _BuildAutomaton_50()




spareDescrGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'spareDescr'), spareDescrElemType, scope=spareDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5353, 4)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(spareDescrGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'spareDescr')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5350, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
spareDescrGroupElemType._Automaton = _BuildAutomaton_51()




reqSafetyElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noSafety'), noSafetyElemType, scope=reqSafetyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5380, 4)))

reqSafetyElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'safetyRqmts'), safetyRqmtsElemType, scope=reqSafetyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5382, 4)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSafetyElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noSafety')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5376, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqSafetyElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'safetyRqmts')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5377, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqSafetyElemType._Automaton = _BuildAutomaton_52()




safetyRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'note'), noteElemType, scope=safetyRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4)))

safetyRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warning'), warningElemType, scope=safetyRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4)))

safetyRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caution'), cautionElemType, scope=safetyRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5392, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(safetyRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warning')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(safetyRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(safetyRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'note')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5392, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
safetyRqmtsElemType._Automaton = _BuildAutomaton_53()




captionLineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=captionLineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5463, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(captionLineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5463, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
captionLineElemType._Automaton = _BuildAutomaton_54()




dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sourceDmIdent'), sourceDmIdentElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 268, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'security'), securityElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 277, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataRestrictions'), dataRestrictionsElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 598, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany'), responsiblePartnerCompanyElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 942, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'logo'), logoElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3527, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originator'), originatorElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3533, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'applicCrossRefTableRef'), applicCrossRefTableRefElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3541, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'applic'), applicElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3547, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'referencedApplicGroup'), referencedApplicGroupElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3622, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'techStandard'), techStandardElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3628, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'brexDmRef'), brexDmRefElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3693, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'qualityAssurance'), qualityAssuranceElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3699, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'systemBreakdownCode'), systemBreakdownCodeElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3728, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemCode'), pyxb.binding.datatypes.string, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3732, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'skillLevel'), skillLevelElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3733, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdate'), reasonForUpdateElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3841, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'productSafety'), productSafetyElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3956, 4)))

dmStatusElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remarks'), remarksElemType, scope=dmStatusElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 243, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 245, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 246, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 249, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 251, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 252, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 255, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 260, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 261, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 262, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 263, 12))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sourceDmIdent')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 243, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'security')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 244, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataRestrictions')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 245, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'logo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 246, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 247, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'originator')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 248, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'applicCrossRefTableRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 249, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'applic')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 250, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'referencedApplicGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 251, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'techStandard')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 252, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'brexDmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 253, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'qualityAssurance')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 254, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'systemBreakdownCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 256, 16))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 257, 16))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 258, 16))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'skillLevel')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 260, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reasonForUpdate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 261, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'productSafety')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 262, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dmStatusElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'remarks')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 263, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmStatusElemType._Automaton = _BuildAutomaton_55()




dataRestrictionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'restrictionInstructions'), restrictionInstructionsElemType, scope=dataRestrictionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 610, 4)))

dataRestrictionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'restrictionInfo'), restrictionInfoElemType, scope=dataRestrictionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 790, 4)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 602, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dataRestrictionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'restrictionInstructions')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 601, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dataRestrictionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'restrictionInfo')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 602, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dataRestrictionsElemType._Automaton = _BuildAutomaton_56()




restrictionInstructionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataDistribution'), dataDistributionElemType, scope=restrictionInstructionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 624, 4)))

restrictionInstructionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'exportControl'), exportControlElemType, scope=restrictionInstructionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 655, 4)))

restrictionInstructionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataHandling'), dataHandlingElemType, scope=restrictionInstructionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 765, 4)))

restrictionInstructionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataDestruction'), dataDestructionElemType, scope=restrictionInstructionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 771, 4)))

restrictionInstructionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataDisclosure'), dataDisclosureElemType, scope=restrictionInstructionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 777, 4)))

restrictionInstructionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supersedure'), supersedureElemType, scope=restrictionInstructionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 783, 4)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 614, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 615, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 616, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 617, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 618, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(restrictionInstructionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataDistribution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 613, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInstructionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'exportControl')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 614, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInstructionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataHandling')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 615, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInstructionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataDestruction')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 616, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInstructionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataDisclosure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 617, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInstructionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'supersedure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 618, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
restrictionInstructionsElemType._Automaton = _BuildAutomaton_57()




def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
dataDistributionElemType._Automaton = _BuildAutomaton_58()




exportControlElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationStmt'), exportRegistrationStmtElemType, scope=exportControlElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 667, 4)))

exportControlElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationCode'), exportRegistrationCodeElemType, scope=exportControlElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 758, 4)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 659, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(exportControlElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationStmt')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 658, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(exportControlElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'exportRegistrationCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 659, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
exportControlElemType._Automaton = _BuildAutomaton_59()




exportRegistrationStmtElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), simpleParaElemType, scope=exportRegistrationStmtElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4)))

exportRegistrationStmtElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=exportRegistrationStmtElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(exportRegistrationStmtElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'simplePara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 670, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(exportRegistrationStmtElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 671, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
exportRegistrationStmtElemType._Automaton = _BuildAutomaton_60()




simpleParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=simpleParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

simpleParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=simpleParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 677, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(simpleParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 685, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(simpleParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 686, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
simpleParaElemType._Automaton = _BuildAutomaton_61()




dmRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRefIdent'), dmRefIdentElemType, scope=dmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 712, 4)))

dmRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRefAddressItems'), dmRefAddressItemsElemType, scope=dmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 721, 4)))

dmRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'behavior'), behaviorElemType, scope=dmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 728, 4)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 701, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 702, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dmRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRefIdent')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 700, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dmRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRefAddressItems')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 701, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dmRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'behavior')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 702, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dmRefElemType._Automaton = _BuildAutomaton_62()




def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
dataHandlingElemType._Automaton = _BuildAutomaton_63()




def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
dataDestructionElemType._Automaton = _BuildAutomaton_64()




def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
dataDisclosureElemType._Automaton = _BuildAutomaton_65()




supersedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=supersedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

supersedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=supersedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 785, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(supersedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 685, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(supersedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 686, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
supersedureElemType._Automaton = _BuildAutomaton_66()




restrictionInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'copyright'), copyrightElemType, scope=restrictionInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 801, 4)))

restrictionInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'policyStatement'), policyStatementElemType, scope=restrictionInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3515, 4)))

restrictionInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataConds'), dataCondsElemType, scope=restrictionInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3521, 4)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 793, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 794, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 795, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'copyright')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 793, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'policyStatement')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 794, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(restrictionInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataConds')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 795, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
restrictionInfoElemType._Automaton = _BuildAutomaton_67()




copyrightElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'copyrightPara'), copyrightParaElemType, scope=copyrightElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 810, 4)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(copyrightElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'copyrightPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 804, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
copyrightElemType._Automaton = _BuildAutomaton_68()




copyrightParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=copyrightParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

copyrightParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=copyrightParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

copyrightParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=copyrightParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

copyrightParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=copyrightParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

copyrightParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'randomList'), randomListElemType, scope=copyrightParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 812, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(copyrightParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 813, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(copyrightParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 814, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(copyrightParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 815, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(copyrightParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 816, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(copyrightParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'randomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 817, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
copyrightParaElemType._Automaton = _BuildAutomaton_69()




emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

emphasisElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=emphasisElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 826, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(emphasisElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
emphasisElemType._Automaton = _BuildAutomaton_70()




functionalItemRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=functionalItemRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

functionalItemRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=functionalItemRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 856, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 857, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(functionalItemRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 856, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(functionalItemRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 857, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
functionalItemRefElemType._Automaton = _BuildAutomaton_71()




def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
nameElemType._Automaton = _BuildAutomaton_72()




pmRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'behavior'), behaviorElemType, scope=pmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 728, 4)))

pmRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRefIdent'), pmRefIdentElemType, scope=pmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 895, 4)))

pmRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRefAddressItems'), pmRefAddressItemsElemType, scope=pmRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 929, 4)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 884, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 885, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(pmRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRefIdent')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 883, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(pmRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRefAddressItems')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 884, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(pmRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'behavior')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 885, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
pmRefElemType._Automaton = _BuildAutomaton_73()




pmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issueDate'), issueDateElemType, scope=pmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 202, 4)))

pmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'security'), securityElemType, scope=pmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 277, 4)))

pmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmTitle'), pyxb.binding.datatypes.string, scope=pmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 941, 4)))

pmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany'), responsiblePartnerCompanyElemType, scope=pmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 942, 4)))

pmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pubMedia'), pubMediaElemType, scope=pmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 952, 4)))

pmRefAddressItemsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortPmTitle'), pyxb.binding.datatypes.string, scope=pmRefAddressItemsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 963, 4)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 932, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 933, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 934, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 935, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 936, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 937, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(pmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 932, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(pmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issueDate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 933, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(pmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'security')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 934, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(pmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responsiblePartnerCompany')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 935, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(pmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pubMedia')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 936, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(pmRefAddressItemsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shortPmTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 937, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
pmRefAddressItemsElemType._Automaton = _BuildAutomaton_74()




externalPubRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'behavior'), behaviorElemType, scope=externalPubRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 728, 4)))

externalPubRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefIdent'), externalPubRefIdentElemType, scope=externalPubRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 978, 4)))

externalPubRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefAddressItems'), externalPubRefAddressItemsElemType, scope=externalPubRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1279, 4)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 968, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 969, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(externalPubRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefIdent')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 967, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRefAddressItems')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 968, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(externalPubRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'behavior')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 969, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
externalPubRefElemType._Automaton = _BuildAutomaton_75()




acronymElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=acronymElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

acronymElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymDefinition'), acronymDefinitionElemType, scope=acronymElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1027, 4)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(acronymElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1012, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(acronymElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymDefinition')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1013, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
acronymElemType._Automaton = _BuildAutomaton_76()




acronymDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=acronymDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

acronymDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=acronymDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1029, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(acronymDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 685, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(acronymDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 686, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
acronymDefinitionElemType._Automaton = _BuildAutomaton_77()




def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
verbatimTextElemType._Automaton = _BuildAutomaton_78()




circuitBreakerRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=circuitBreakerRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

circuitBreakerRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=circuitBreakerRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1312, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1313, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(circuitBreakerRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1312, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(circuitBreakerRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1313, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
circuitBreakerRefElemType._Automaton = _BuildAutomaton_79()




controlIndicatorRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=controlIndicatorRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

controlIndicatorRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=controlIndicatorRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1346, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1347, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(controlIndicatorRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1346, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(controlIndicatorRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1347, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
controlIndicatorRefElemType._Automaton = _BuildAutomaton_80()




def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
inlineSignificantDataElemType._Automaton = _BuildAutomaton_81()




quantityElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantityGroup'), quantityGroupElemType, scope=quantityElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1470, 4)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1466, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(quantityElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantityGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1466, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
quantityElemType._Automaton = _BuildAutomaton_82()




quantityGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantityValue'), quantityValueElemType, scope=quantityGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1484, 4)))

quantityGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantityTolerance'), quantityToleranceElemType, scope=quantityGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2870, 4)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1475, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=1, max=2L, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1478, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(quantityGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantityValue')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1474, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(quantityGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantityTolerance')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1475, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(quantityGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantityTolerance')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1478, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
quantityGroupElemType._Automaton = _BuildAutomaton_83()




internalRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=internalRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

internalRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=internalRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3002, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(internalRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 685, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(internalRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 686, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
internalRefElemType._Automaton = _BuildAutomaton_84()




changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

changeInlineElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=changeInlineElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3034, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(changeInlineElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
changeInlineElemType._Automaton = _BuildAutomaton_85()




footnoteElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, scope=footnoteElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(footnoteElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3058, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
footnoteElemType._Automaton = _BuildAutomaton_86()




paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sequentialList'), sequentialListElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3090, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'randomList'), randomListElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), definitionListElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4)))

paraElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=paraElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3069, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sequentialList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3085, 12))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'randomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3086, 12))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paraElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definitionList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3087, 12))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
paraElemType._Automaton = _BuildAutomaton_87()




sequentialListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=sequentialListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

sequentialListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'listItem'), listItemElemType, scope=sequentialListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3107, 4)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3093, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(sequentialListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3093, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(sequentialListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'listItem')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3094, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
sequentialListElemType._Automaton = _BuildAutomaton_88()




titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

titleElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=titleElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3104, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(titleElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
titleElemType._Automaton = _BuildAutomaton_89()




listItemElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, scope=listItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4)))

listItemElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'note'), noteElemType, scope=listItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(listItemElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'note')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3110, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(listItemElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3111, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
listItemElemType._Automaton = _BuildAutomaton_90()




noteElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=noteElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

noteElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'notePara'), noteParaElemType, scope=noteElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3136, 4)))

noteElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialList'), attentionSequentialListElemType, scope=noteElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3170, 4)))

noteElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), attentionRandomListElemType, scope=noteElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3121, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(noteElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3121, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(noteElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'notePara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3123, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(noteElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3124, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(noteElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3125, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
noteElemType._Automaton = _BuildAutomaton_91()




noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialList'), attentionSequentialListElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3170, 4)))

noteParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), attentionRandomListElemType, scope=noteParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3138, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3140, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3151, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3152, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3153, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3154, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3155, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3156, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3157, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3158, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3159, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3160, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3161, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3162, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3163, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3164, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3165, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3166, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3167, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3140, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(noteParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3141, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
noteParaElemType._Automaton = _BuildAutomaton_92()




attentionSequentialListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=attentionSequentialListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

attentionSequentialListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialListItem'), attentionSequentialListItemElemType, scope=attentionSequentialListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3182, 4)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3173, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(attentionSequentialListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3173, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(attentionSequentialListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionSequentialListItem')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3174, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
attentionSequentialListElemType._Automaton = _BuildAutomaton_93()




attentionSequentialListItemElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionListItemPara'), attentionListItemParaElemType, scope=attentionSequentialListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3193, 4)))

attentionSequentialListItemElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), attentionRandomListElemType, scope=attentionSequentialListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3185, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3186, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionSequentialListItemElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionListItemPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3185, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(attentionSequentialListItemElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3186, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
attentionSequentialListItemElemType._Automaton = _BuildAutomaton_94()




attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

attentionListItemParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=attentionListItemParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3196, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3151, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3152, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3153, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3154, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3155, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3156, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3157, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3158, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3159, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3160, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3161, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3162, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3163, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3164, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3165, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3166, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attentionListItemParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3167, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
attentionListItemParaElemType._Automaton = _BuildAutomaton_95()




attentionRandomListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomListItem'), attentionRandomListItemElemType, scope=attentionRandomListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3216, 4)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(attentionRandomListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomListItem')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3207, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
attentionRandomListElemType._Automaton = _BuildAutomaton_96()




attentionRandomListItemElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionListItemPara'), attentionListItemParaElemType, scope=attentionRandomListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3193, 4)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(attentionRandomListItemElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionListItemPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3219, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
attentionRandomListItemElemType._Automaton = _BuildAutomaton_97()




randomListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=randomListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

randomListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'listItem'), listItemElemType, scope=randomListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3107, 4)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3334, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(randomListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3334, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(randomListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'listItem')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3335, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
randomListElemType._Automaton = _BuildAutomaton_98()




definitionListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=definitionListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

definitionListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionListHeader'), definitionListHeaderElemType, scope=definitionListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3356, 4)))

definitionListElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionListItem'), definitionListItemElemType, scope=definitionListElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3365, 4)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3347, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3348, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(definitionListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3347, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(definitionListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definitionListHeader')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3348, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(definitionListElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definitionListItem')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3349, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
definitionListElemType._Automaton = _BuildAutomaton_99()




definitionListItemElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'listItemTerm'), listItemTermElemType, scope=definitionListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3377, 4)))

definitionListItemElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'listItemDefinition'), listItemDefinitionElemType, scope=definitionListItemElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3388, 4)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(definitionListItemElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'listItemTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3368, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(definitionListItemElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'listItemDefinition')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3369, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
definitionListItemElemType._Automaton = _BuildAutomaton_100()




listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

listItemTermElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=listItemTermElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3380, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemTermElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
listItemTermElemType._Automaton = _BuildAutomaton_101()




listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sequentialList'), sequentialListElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3090, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'randomList'), randomListElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), definitionListElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4)))

listItemDefinitionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=listItemDefinitionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3392, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3391, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sequentialList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3085, 12))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'randomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3086, 12))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(listItemDefinitionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definitionList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3087, 12))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
listItemDefinitionElemType._Automaton = _BuildAutomaton_102()




def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
policyStatementElemType._Automaton = _BuildAutomaton_103()




def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
dataCondsElemType._Automaton = _BuildAutomaton_104()




applicElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'displayText'), displayTextElemType, scope=applicElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3567, 4)))

applicElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'assert'), assertElemType, scope=applicElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3573, 4)))

applicElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'evaluate'), evaluateElemType, scope=applicElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3595, 4)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3552, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(applicElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'displayText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3551, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(applicElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'assert')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3553, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(applicElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'evaluate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3554, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(applicElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'assert')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3558, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(applicElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'evaluate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3559, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
applicElemType._Automaton = _BuildAutomaton_105()




def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
assertElemType._Automaton = _BuildAutomaton_106()




evaluateElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'assert'), assertElemType, scope=evaluateElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3573, 4)))

evaluateElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'evaluate'), evaluateElemType, scope=evaluateElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3595, 4)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=2L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3597, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(evaluateElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'evaluate')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3598, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(evaluateElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'assert')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3599, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
evaluateElemType._Automaton = _BuildAutomaton_107()




modificationElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'modificationTitle'), pyxb.binding.datatypes.string, scope=modificationElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3682, 4)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3674, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(modificationElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'modificationTitle')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3674, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
modificationElemType._Automaton = _BuildAutomaton_108()




reasonForUpdateElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'simplePara'), simpleParaElemType, scope=reasonForUpdateElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 675, 4)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3844, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reasonForUpdateElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'simplePara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3844, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
reasonForUpdateElemType._Automaton = _BuildAutomaton_109()




warningsAndCautionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warning'), warningElemType, scope=warningsAndCautionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4)))

warningsAndCautionsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caution'), cautionElemType, scope=warningsAndCautionsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3995, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(warningsAndCautionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warning')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3994, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningsAndCautionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3995, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(warningsAndCautionsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3997, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
warningsAndCautionsElemType._Automaton = _BuildAutomaton_110()




warningElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=warningElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

warningElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionPara'), warningAndCautionParaElemType, scope=warningElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4018, 4)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4006, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(warningElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4006, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(warningElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4007, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
warningElemType._Automaton = _BuildAutomaton_111()




warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

warningAndCautionParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList'), attentionRandomListElemType, scope=warningAndCautionParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3204, 4)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4020, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3151, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3152, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3153, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3154, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3155, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3156, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3157, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3158, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3159, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3160, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3161, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3162, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3163, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3164, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3165, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3166, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3167, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(warningAndCautionParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'attentionRandomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4022, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
warningAndCautionParaElemType._Automaton = _BuildAutomaton_112()




cautionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=cautionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

cautionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionPara'), warningAndCautionParaElemType, scope=cautionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4018, 4)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4035, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(cautionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4035, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cautionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warningAndCautionPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4036, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cautionElemType._Automaton = _BuildAutomaton_113()




figureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=figureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

figureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'graphic'), graphicElemType, scope=figureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4086, 4)))

figureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legend'), legendElemType, scope=figureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4162, 4)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4078, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(figureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4076, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(figureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'graphic')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4077, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(figureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legend')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4078, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
figureElemType._Automaton = _BuildAutomaton_114()




graphicElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hotspot'), hotspotElemType, scope=graphicElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4103, 4)))

graphicElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendment'), reasonForAmendmentElemType, scope=graphicElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4155, 4)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4089, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4090, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(graphicElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hotspot')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4089, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(graphicElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendment')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4090, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
graphicElemType._Automaton = _BuildAutomaton_115()




hotspotElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=hotspotElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

hotspotElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=hotspotElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

hotspotElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hotspot'), hotspotElemType, scope=hotspotElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4103, 4)))

hotspotElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), catalogSeqNumberRefElemType, scope=hotspotElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4105, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hotspotElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hotspot')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4106, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hotspotElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4107, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hotspotElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4108, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hotspotElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4109, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
hotspotElemType._Automaton = _BuildAutomaton_116()




catalogSeqNumberRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=catalogSeqNumberRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4126, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(catalogSeqNumberRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4126, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
catalogSeqNumberRefElemType._Automaton = _BuildAutomaton_117()




legendElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), definitionListElemType, scope=legendElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(legendElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definitionList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4165, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
legendElemType._Automaton = _BuildAutomaton_118()




commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'note'), noteElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warning'), warningElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caution'), cautionElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'figure'), figureElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara'), commonInfoDescrParaElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4171, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup'), circuitBreakerDescrGroupElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4206, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'multimedia'), multimediaElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4385, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'foldout'), foldoutElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4449, 4)))

commonInfoDescrParaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), tableElemType, scope=commonInfoDescrParaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4174, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4175, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4187, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4176, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4174, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warning')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'note')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4201, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4202, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4203, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'figure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4379, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'multimedia')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4380, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'foldout')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4381, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4382, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(commonInfoDescrParaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commonInfoDescrPara')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4176, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
commonInfoDescrParaElemType._Automaton = _BuildAutomaton_119()




circuitBreakerDescrGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrSubGroup'), circuitBreakerDescrSubGroupElemType, scope=circuitBreakerDescrGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4219, 4)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrSubGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4209, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
circuitBreakerDescrGroupElemType._Automaton = _BuildAutomaton_120()




circuitBreakerDescrSubGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=circuitBreakerDescrSubGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

circuitBreakerDescrSubGroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescr'), circuitBreakerDescrElemType, scope=circuitBreakerDescrSubGroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4234, 4)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4222, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrSubGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4222, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrSubGroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescr')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4224, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
circuitBreakerDescrSubGroupElemType._Automaton = _BuildAutomaton_121()




circuitBreakerDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=circuitBreakerDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

circuitBreakerDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=circuitBreakerDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

circuitBreakerDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=circuitBreakerDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

circuitBreakerDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessPointRef'), accessPointRefElemType, scope=circuitBreakerDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4251, 4)))

circuitBreakerDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerLocation'), circuitBreakerLocationElemType, scope=circuitBreakerDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4371, 4)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4239, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4243, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4237, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4238, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4240, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessPointRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4241, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(circuitBreakerDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerLocation')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4243, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
circuitBreakerDescrElemType._Automaton = _BuildAutomaton_122()




accessPointRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=accessPointRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

accessPointRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=accessPointRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4254, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4255, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(accessPointRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4254, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(accessPointRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4255, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
accessPointRefElemType._Automaton = _BuildAutomaton_123()




def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
circuitBreakerLocationElemType._Automaton = _BuildAutomaton_124()




multimediaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=multimediaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

multimediaElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'multimediaObject'), multimediaObjectElemType, scope=multimediaElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4397, 4)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4388, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multimediaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4388, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(multimediaElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'multimediaObject')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4389, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
multimediaElemType._Automaton = _BuildAutomaton_125()




multimediaObjectElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendment'), reasonForAmendmentElemType, scope=multimediaObjectElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4155, 4)))

multimediaObjectElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'parameter'), parameterElemType, scope=multimediaObjectElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4418, 4)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4400, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4401, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(multimediaObjectElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'parameter')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4400, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(multimediaObjectElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reasonForAmendment')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4401, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
multimediaObjectElemType._Automaton = _BuildAutomaton_126()




tableElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=tableElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

tableElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'graphic'), graphicElemType, scope=tableElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4086, 4)))

tableElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tgroup'), tgroupElemType, scope=tableElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4478, 4)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4459, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tableElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4459, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(tableElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tgroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4461, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(tableElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'graphic')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4462, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
tableElemType._Automaton = _BuildAutomaton_127()




tgroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colspec'), colspecElemType, scope=tgroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4496, 4)))

tgroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'spanspec'), spanspecElemType, scope=tgroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4524, 4)))

tgroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'thead'), theadElemType, scope=tgroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4538, 4)))

tgroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tfoot'), tfootElemType, scope=tgroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4597, 4)))

tgroupElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tbody'), tbodyElemType, scope=tgroupElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4605, 4)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4481, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4482, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4483, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4484, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tgroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colspec')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4481, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tgroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'spanspec')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4482, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tgroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'thead')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4483, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tgroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tfoot')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4484, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(tgroupElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tbody')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4485, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
tgroupElemType._Automaton = _BuildAutomaton_128()




theadElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colspec'), colspecElemType, scope=theadElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4496, 4)))

theadElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), rowElemType, scope=theadElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4546, 4)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4541, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(theadElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colspec')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4541, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(theadElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'row')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4542, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
theadElemType._Automaton = _BuildAutomaton_129()




rowElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'entry'), entryElemType, scope=rowElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4558, 4)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(rowElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'entry')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4549, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
rowElemType._Automaton = _BuildAutomaton_130()




entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'emphasis'), emphasisElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 823, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verbatimText'), verbatimTextElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1139, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef'), circuitBreakerRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1309, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef'), controlIndicatorRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1343, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData'), inlineSignificantDataElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1355, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1463, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'changeInline'), changeInlineElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3031, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnote'), footnoteElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3055, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sequentialList'), sequentialListElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3090, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'note'), noteElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'randomList'), randomListElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3331, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definitionList'), definitionListElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3344, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warning'), warningElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caution'), cautionElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4)))

entryElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legend'), legendElemType, scope=entryElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4162, 4)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4560, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4561, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warning')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4562, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4563, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'note')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4564, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legend')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4565, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 832, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 833, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlIndicatorRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 834, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inlineSignificantData')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 835, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 836, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 837, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'changeInline')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 838, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'emphasis')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 839, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 840, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 841, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 842, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 843, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 844, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 845, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnote')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 846, 12))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 847, 12))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 848, 12))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 849, 12))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verbatimText')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 850, 12))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sequentialList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3085, 12))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'randomList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3086, 12))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(entryElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definitionList')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3087, 12))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
entryElemType._Automaton = _BuildAutomaton_131()




tfootElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colspec'), colspecElemType, scope=tfootElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4496, 4)))

tfootElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), rowElemType, scope=tfootElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4546, 4)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4600, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tfootElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colspec')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4600, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(tfootElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'row')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4601, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
tfootElemType._Automaton = _BuildAutomaton_132()




tbodyElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), rowElemType, scope=tbodyElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4546, 4)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(tbodyElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'row')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4608, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
tbodyElemType._Automaton = _BuildAutomaton_133()




def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
thresholdIntervalElemType._Automaton = _BuildAutomaton_134()




zoneRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=zoneRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

zoneRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=zoneRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4771, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4772, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(zoneRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4771, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(zoneRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4772, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
zoneRefElemType._Automaton = _BuildAutomaton_135()




reqCondNoRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), reqCondElemType, scope=reqCondNoRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondNoRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCond')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4813, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqCondNoRefElemType._Automaton = _BuildAutomaton_136()




reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subScript'), pyxb.binding.datatypes.string, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 689, 4)))

reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superScript'), pyxb.binding.datatypes.string, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 690, 4)))

reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'indexFlag'), indexFlagElemType, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 998, 4)))

reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), acronymElemType, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1009, 4)))

reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm'), acronymTermElemType, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 1021, 4)))

reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'internalRef'), internalRefElemType, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 2999, 4)))

reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'symbol'), symbolElemType, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3040, 4)))

reqCondElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef'), footnoteRefElemType, scope=reqCondElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3407, 4)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4823, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'internalRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4830, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'indexFlag')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4831, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'symbol')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4832, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4833, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superScript')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4834, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'footnoteRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4835, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4836, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(reqCondElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronymTerm')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4837, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
reqCondElemType._Automaton = _BuildAutomaton_137()




reqCondDmElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=reqCondDmElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

reqCondDmElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), reqCondElemType, scope=reqCondDmElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(reqCondDmElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCond')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4947, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondDmElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4948, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqCondDmElemType._Automaton = _BuildAutomaton_138()




reqCondCircuitBreakerElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup'), circuitBreakerDescrGroupElemType, scope=reqCondCircuitBreakerElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4206, 4)))

reqCondCircuitBreakerElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), reqCondElemType, scope=reqCondCircuitBreakerElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(reqCondCircuitBreakerElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCond')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4958, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondCircuitBreakerElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4959, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqCondCircuitBreakerElemType._Automaton = _BuildAutomaton_139()




reqCondPmElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=reqCondPmElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

reqCondPmElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), reqCondElemType, scope=reqCondPmElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(reqCondPmElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCond')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4969, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondPmElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4970, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqCondPmElemType._Automaton = _BuildAutomaton_140()




reqCondExternalPubElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=reqCondExternalPubElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

reqCondExternalPubElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCond'), reqCondElemType, scope=reqCondExternalPubElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4820, 4)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(reqCondExternalPubElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCond')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4980, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqCondExternalPubElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4981, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqCondExternalPubElemType._Automaton = _BuildAutomaton_141()




reqPersonsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personnel'), personnelElemType, scope=reqPersonsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5000, 4)))

reqPersonsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'person'), personElemType, scope=reqPersonsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5042, 4)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqPersonsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'personnel')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4991, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqPersonsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'person')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4992, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqPersonsElemType._Automaton = _BuildAutomaton_142()




personnelElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personCategory'), personCategoryElemType, scope=personnelElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5013, 4)))

personnelElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personSkill'), personSkillElemType, scope=personnelElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5021, 4)))

personnelElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'trade'), tradeElemType, scope=personnelElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5028, 4)))

personnelElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'estimatedTime'), estimatedTimeElemType, scope=personnelElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5034, 4)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5003, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5004, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5005, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5006, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(personnelElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'personCategory')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5003, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(personnelElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'personSkill')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5004, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(personnelElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'trade')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5005, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(personnelElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'estimatedTime')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5006, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
personnelElemType._Automaton = _BuildAutomaton_143()




def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
tradeElemType._Automaton = _BuildAutomaton_144()




def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
estimatedTimeElemType._Automaton = _BuildAutomaton_145()




personElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personCategory'), personCategoryElemType, scope=personElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5013, 4)))

personElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'personSkill'), personSkillElemType, scope=personElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5021, 4)))

personElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'trade'), tradeElemType, scope=personElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5028, 4)))

personElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'estimatedTime'), estimatedTimeElemType, scope=personElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5034, 4)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5045, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5046, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5047, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5048, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(personElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'personCategory')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5045, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(personElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'personSkill')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5046, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(personElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'trade')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5047, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(personElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'estimatedTime')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5048, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
personElemType._Automaton = _BuildAutomaton_146()




reqTechInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dmRef'), dmRefElemType, scope=reqTechInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 697, 4)))

reqTechInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pmRef'), pmRefElemType, scope=reqTechInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 879, 4)))

reqTechInfoElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef'), externalPubRefElemType, scope=reqTechInfoElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 964, 4)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqTechInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5065, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqTechInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pmRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5066, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(reqTechInfoElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalPubRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5067, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
reqTechInfoElemType._Automaton = _BuildAutomaton_147()




supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remarks'), remarksElemType, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4)))

supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), catalogSeqNumberRefElemType, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4)))

supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortName'), pyxb.binding.datatypes.string, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5210, 4)))

supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber'), natoStockNumberElemType, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5211, 4)))

supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identNumber'), identNumberElemType, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5228, 4)))

supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'toolRef'), toolRefElemType, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5269, 4)))

supportEquipDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity'), reqQuantityElemType, scope=supportEquipDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5286, 4)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5193, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5194, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5202, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5193, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shortName')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5194, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5196, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5197, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5198, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'toolRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5199, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5201, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(supportEquipDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'remarks')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5202, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
supportEquipDescrElemType._Automaton = _BuildAutomaton_148()




natoStockNumberElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=natoStockNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

natoStockNumberElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fullNatoStockNumber'), pyxb.binding.datatypes.string, scope=natoStockNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5224, 4)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5214, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5215, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(natoStockNumberElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fullNatoStockNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5214, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(natoStockNumberElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5215, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
natoStockNumberElemType._Automaton = _BuildAutomaton_149()




identNumberElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=identNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

identNumberElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'manufacturerCode'), manufacturerCodeElemType, scope=identNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5237, 4)))

identNumberElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'partAndSerialNumber'), partAndSerialNumberElemType, scope=identNumberElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5243, 4)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5232, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5233, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(identNumberElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'manufacturerCode')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5231, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(identNumberElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'partAndSerialNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5232, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(identNumberElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5233, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
identNumberElemType._Automaton = _BuildAutomaton_150()




def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
manufacturerCodeElemType._Automaton = _BuildAutomaton_151()




def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
partNumberElemType._Automaton = _BuildAutomaton_152()




toolRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=toolRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5272, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(toolRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5272, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
toolRefElemType._Automaton = _BuildAutomaton_153()




def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
reqQuantityElemType._Automaton = _BuildAutomaton_154()




supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remarks'), remarksElemType, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4)))

supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), catalogSeqNumberRefElemType, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4)))

supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortName'), pyxb.binding.datatypes.string, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5210, 4)))

supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber'), natoStockNumberElemType, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5211, 4)))

supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identNumber'), identNumberElemType, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5228, 4)))

supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity'), reqQuantityElemType, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5286, 4)))

supplyDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supplyRqmtRef'), supplyRqmtRefElemType, scope=supplyDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5326, 4)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5309, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5310, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5318, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5309, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shortName')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5310, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5312, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5313, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5314, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'supplyRqmtRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5315, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5317, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(supplyDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'remarks')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5318, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
supplyDescrElemType._Automaton = _BuildAutomaton_155()




supplyRqmtRefElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refs'), refsElemType, scope=supplyRqmtRefElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 871, 4)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5329, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(supplyRqmtRefElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'refs')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5329, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
supplyRqmtRefElemType._Automaton = _BuildAutomaton_156()




spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef'), functionalItemRefElemType, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 853, 4)))

spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameElemType, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 867, 4)))

spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remarks'), remarksElemType, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3961, 4)))

spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef'), catalogSeqNumberRefElemType, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4123, 4)))

spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shortName'), pyxb.binding.datatypes.string, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5210, 4)))

spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber'), natoStockNumberElemType, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5211, 4)))

spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'identNumber'), identNumberElemType, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5228, 4)))

spareDescrElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity'), reqQuantityElemType, scope=spareDescrElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5286, 4)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5356, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5357, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5365, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5356, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shortName')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5357, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'catalogSeqNumberRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5359, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'natoStockNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5360, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'identNumber')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5361, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionalItemRef')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5362, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqQuantity')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5364, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(spareDescrElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'remarks')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5365, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
spareDescrElemType._Automaton = _BuildAutomaton_157()




mainProcedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'figure'), figureElemType, scope=mainProcedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4)))

mainProcedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'multimedia'), multimediaElemType, scope=mainProcedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4385, 4)))

mainProcedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'foldout'), foldoutElemType, scope=mainProcedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4449, 4)))

mainProcedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), tableElemType, scope=mainProcedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4)))

mainProcedureElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'proceduralStep'), proceduralStepElemType, scope=mainProcedureElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5406, 4)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(mainProcedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'proceduralStep')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5398, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(mainProcedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'figure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4379, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(mainProcedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'multimedia')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4380, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(mainProcedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'foldout')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4381, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(mainProcedureElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4382, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
mainProcedureElemType._Automaton = _BuildAutomaton_158()




proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'para'), paraElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3066, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), titleElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3102, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'note'), noteElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 3118, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'warning'), warningElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4003, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caution'), cautionElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4032, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'figure'), figureElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4073, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup'), circuitBreakerDescrGroupElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4206, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'multimedia'), multimediaElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4385, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'foldout'), foldoutElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4449, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), tableElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4456, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'proceduralStep'), proceduralStepElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5406, 4)))

proceduralStepElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caption'), captionElemType, scope=proceduralStepElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5443, 4)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5413, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5428, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5411, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warning')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'note')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4201, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4202, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4203, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'figure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4379, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'multimedia')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4380, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'foldout')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4381, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4382, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caption')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5416, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'warning')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4195, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caution')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4196, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'note')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4201, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'circuitBreakerDescrGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4202, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'para')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4203, 12))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'figure')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4379, 12))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'multimedia')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4380, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'foldout')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4381, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4382, 12))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caption')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5424, 24))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(proceduralStepElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'proceduralStep')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5429, 16))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
proceduralStepElemType._Automaton = _BuildAutomaton_159()




captionElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'captionLine'), captionLineElemType, scope=captionElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5460, 4)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(captionElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'captionLine')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5446, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
captionElemType._Automaton = _BuildAutomaton_160()




closeRqmtsElemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reqCondGroup'), reqCondGroupElemType, scope=closeRqmtsElemType, location=pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 4795, 4)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(closeRqmtsElemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reqCondGroup')), pyxb.utils.utility.Location('i:\\xml_editor\\xml_editor\\schema\\proced.xsd', 5615, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
closeRqmtsElemType._Automaton = _BuildAutomaton_161()

